
CAL_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000352c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000352c  000035c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000596  00800082  00800082  000035e2  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  000035e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f0  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b660  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c21b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 18 	call	0x301e	; 0x301e <main>
      8a:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CAL_INIT>:
#include "util/delay.h"
u8 INPUT [MAXINPUT]={0},Error[]="ERROR!!!!";
NUMS numbers,rev_numbers,remender;
operations op,rev_op;
s32 i=0;
void CAL_INIT(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	Keypad_enuInit();
     b4e:	0e 94 9f 11 	call	0x233e	; 0x233e <Keypad_enuInit>
	LCD_enuInit();
     b52:	0e 94 a5 08 	call	0x114a	; 0x114a <LCD_enuInit>
	CreateStack(&numbers);
     b56:	84 ef       	ldi	r24, 0xF4	; 244
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 18 18 	call	0x3030	; 0x3030 <CreateStack>
	CreateStack(&rev_numbers);
     b5e:	82 e6       	ldi	r24, 0x62	; 98
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 18 18 	call	0x3030	; 0x3030 <CreateStack>
	CreateStack_op(&op);
     b66:	8c ef       	ldi	r24, 0xFC	; 252
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 28 18 	call	0x3050	; 0x3050 <CreateStack_op>
	CreateStack_op(&rev_op);
     b6e:	86 e9       	ldi	r24, 0x96	; 150
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 28 18 	call	0x3050	; 0x3050 <CreateStack_op>



}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <CAL_INPUT>:
void CAL_INPUT(){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62

	u8 press;

	do{

Keypad_enuGetPressedKey(&press);
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 0c 12 	call	0x2418	; 0x2418 <Keypad_enuGetPressedKey>


	}while(press==0xff);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	c9 f3       	breq	.-14     	; 0xb86 <CAL_INPUT+0xa>
	    if(press=='='){
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8d 33       	cpi	r24, 0x3D	; 61
     b98:	e9 f4       	brne	.+58     	; 0xbd4 <CAL_INPUT+0x58>
		     LCD_enuDisplayChar(press);
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_enuDisplayChar>
			 INPUT[i++]='\0';
     ba0:	80 91 92 00 	lds	r24, 0x0092
     ba4:	90 91 93 00 	lds	r25, 0x0093
     ba8:	a0 91 94 00 	lds	r26, 0x0094
     bac:	b0 91 95 00 	lds	r27, 0x0095
     bb0:	fc 01       	movw	r30, r24
     bb2:	ee 57       	subi	r30, 0x7E	; 126
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	10 82       	st	Z, r1
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	a1 1d       	adc	r26, r1
     bbc:	b1 1d       	adc	r27, r1
     bbe:	80 93 92 00 	sts	0x0092, r24
     bc2:	90 93 93 00 	sts	0x0093, r25
     bc6:	a0 93 94 00 	sts	0x0094, r26
     bca:	b0 93 95 00 	sts	0x0095, r27
			 CAL_OPERATION();
     bce:	0e 94 18 06 	call	0xc30	; 0xc30 <CAL_OPERATION>
     bd2:	2a c0       	rjmp	.+84     	; 0xc28 <CAL_INPUT+0xac>
		}
		else if(press=='c'){
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	83 36       	cpi	r24, 0x63	; 99
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <CAL_INPUT+0x64>
			Clear_CAL();
     bda:	0e 94 84 08 	call	0x1108	; 0x1108 <Clear_CAL>
     bde:	24 c0       	rjmp	.+72     	; 0xc28 <CAL_INPUT+0xac>
		}

		else if(press!='c'&&press!='='&&press!=0xff){
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	83 36       	cpi	r24, 0x63	; 99
     be4:	09 f1       	breq	.+66     	; 0xc28 <CAL_INPUT+0xac>
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	8d 33       	cpi	r24, 0x3D	; 61
     bea:	f1 f0       	breq	.+60     	; 0xc28 <CAL_INPUT+0xac>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	8f 3f       	cpi	r24, 0xFF	; 255
     bf0:	d9 f0       	breq	.+54     	; 0xc28 <CAL_INPUT+0xac>
		    LCD_enuDisplayChar(press);
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_enuDisplayChar>
		    INPUT[i++]=press;
     bf8:	80 91 92 00 	lds	r24, 0x0092
     bfc:	90 91 93 00 	lds	r25, 0x0093
     c00:	a0 91 94 00 	lds	r26, 0x0094
     c04:	b0 91 95 00 	lds	r27, 0x0095
     c08:	29 81       	ldd	r18, Y+1	; 0x01
     c0a:	fc 01       	movw	r30, r24
     c0c:	ee 57       	subi	r30, 0x7E	; 126
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	20 83       	st	Z, r18
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	80 93 92 00 	sts	0x0092, r24
     c1c:	90 93 93 00 	sts	0x0093, r25
     c20:	a0 93 94 00 	sts	0x0094, r26
     c24:	b0 93 95 00 	sts	0x0095, r27
	    }
}
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <CAL_OPERATION>:


void CAL_OPERATION(){
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	ae 97       	sbiw	r28, 0x2e	; 46
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	s32 num=0;
     c44:	1c 8a       	std	Y+20, r1	; 0x14
     c46:	1d 8a       	std	Y+21, r1	; 0x15
     c48:	1e 8a       	std	Y+22, r1	; 0x16
     c4a:	1f 8a       	std	Y+23, r1	; 0x17

	 for(int j=0;INPUT[j]!='\0';j++){
     c4c:	1b 8a       	std	Y+19, r1	; 0x13
     c4e:	1a 8a       	std	Y+18, r1	; 0x12
     c50:	ef c0       	rjmp	.+478    	; 0xe30 <CAL_OPERATION+0x200>




	        if(IsDigit(INPUT[j])){
     c52:	8a 89       	ldd	r24, Y+18	; 0x12
     c54:	9b 89       	ldd	r25, Y+19	; 0x13
     c56:	fc 01       	movw	r30, r24
     c58:	ee 57       	subi	r30, 0x7E	; 126
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	0e 94 c3 19 	call	0x3386	; 0x3386 <IsDigit>
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	21 f1       	breq	.+72     	; 0xcae <CAL_OPERATION+0x7e>
	        num=num*10+(INPUT[j]-'0');
     c66:	8c 89       	ldd	r24, Y+20	; 0x14
     c68:	9d 89       	ldd	r25, Y+21	; 0x15
     c6a:	ae 89       	ldd	r26, Y+22	; 0x16
     c6c:	bf 89       	ldd	r27, Y+23	; 0x17
     c6e:	2a e0       	ldi	r18, 0x0A	; 10
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 01 1a 	call	0x3402	; 0x3402 <__mulsi3>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	8a 89       	ldd	r24, Y+18	; 0x12
     c84:	9b 89       	ldd	r25, Y+19	; 0x13
     c86:	fc 01       	movw	r30, r24
     c88:	ee 57       	subi	r30, 0x7E	; 126
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	c0 97       	sbiw	r24, 0x30	; 48
     c94:	aa 27       	eor	r26, r26
     c96:	97 fd       	sbrc	r25, 7
     c98:	a0 95       	com	r26
     c9a:	ba 2f       	mov	r27, r26
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	a4 1f       	adc	r26, r20
     ca2:	b5 1f       	adc	r27, r21
     ca4:	8c 8b       	std	Y+20, r24	; 0x14
     ca6:	9d 8b       	std	Y+21, r25	; 0x15
     ca8:	ae 8b       	std	Y+22, r26	; 0x16
     caa:	bf 8b       	std	Y+23, r27	; 0x17
     cac:	bc c0       	rjmp	.+376    	; 0xe26 <CAL_OPERATION+0x1f6>
	        }

	        else if(IsOp(INPUT[j])){
     cae:	8a 89       	ldd	r24, Y+18	; 0x12
     cb0:	9b 89       	ldd	r25, Y+19	; 0x13
     cb2:	fc 01       	movw	r30, r24
     cb4:	ee 57       	subi	r30, 0x7E	; 126
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	80 81       	ld	r24, Z
     cba:	0e 94 df 19 	call	0x33be	; 0x33be <IsOp>
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <CAL_OPERATION+0x94>
     cc2:	b1 c0       	rjmp	.+354    	; 0xe26 <CAL_OPERATION+0x1f6>

	             Push(num,&numbers);
     cc4:	8c 89       	ldd	r24, Y+20	; 0x14
     cc6:	9d 89       	ldd	r25, Y+21	; 0x15
     cc8:	ae 89       	ldd	r26, Y+22	; 0x16
     cca:	bf 89       	ldd	r27, Y+23	; 0x17
     ccc:	24 ef       	ldi	r18, 0xF4	; 244
     cce:	32 e0       	ldi	r19, 0x02	; 2
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	a9 01       	movw	r20, r18
     cd6:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>
	             if(StackSize(&numbers)>=2){
     cda:	84 ef       	ldi	r24, 0xF4	; 244
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	0e 94 3e 19 	call	0x327c	; 0x327c <StackSize>
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	91 05       	cpc	r25, r1
     ce6:	0c f4       	brge	.+2      	; 0xcea <CAL_OPERATION+0xba>
     ce8:	8f c0       	rjmp	.+286    	; 0xe08 <CAL_OPERATION+0x1d8>

	            s32 num2,num1,res;
	            u8 oper=StackTop_op(&op),pp;
     cea:	8c ef       	ldi	r24, 0xFC	; 252
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 a9 19 	call	0x3352	; 0x3352 <StackTop_op>
     cf2:	8d 87       	std	Y+13, r24	; 0x0d

	            if(oper=='x'||oper=='/'){
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	88 37       	cpi	r24, 0x78	; 120
     cf8:	21 f0       	breq	.+8      	; 0xd02 <CAL_OPERATION+0xd2>
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	8f 32       	cpi	r24, 0x2F	; 47
     cfe:	09 f0       	breq	.+2      	; 0xd02 <CAL_OPERATION+0xd2>
     d00:	83 c0       	rjmp	.+262    	; 0xe08 <CAL_OPERATION+0x1d8>
	             Pop(&num2,&numbers);
     d02:	ce 01       	movw	r24, r28
     d04:	49 96       	adiw	r24, 0x19	; 25
     d06:	24 ef       	ldi	r18, 0xF4	; 244
     d08:	32 e0       	ldi	r19, 0x02	; 2
     d0a:	b9 01       	movw	r22, r18
     d0c:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	             Pop(&num1,&numbers);
     d10:	ce 01       	movw	r24, r28
     d12:	4d 96       	adiw	r24, 0x1d	; 29
     d14:	24 ef       	ldi	r18, 0xF4	; 244
     d16:	32 e0       	ldi	r19, 0x02	; 2
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	             if(oper=='x'){
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	88 37       	cpi	r24, 0x78	; 120
     d22:	d1 f4       	brne	.+52     	; 0xd58 <CAL_OPERATION+0x128>
	                   Pop_op(&pp,&op);
     d24:	ce 01       	movw	r24, r28
     d26:	81 96       	adiw	r24, 0x21	; 33
     d28:	2c ef       	ldi	r18, 0xFC	; 252
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	b9 01       	movw	r22, r18
     d2e:	0e 94 8c 18 	call	0x3118	; 0x3118 <Pop_op>
	                 res=num1*num2;
     d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d36:	af 8d       	ldd	r26, Y+31	; 0x1f
     d38:	b8 a1       	ldd	r27, Y+32	; 0x20
     d3a:	29 8d       	ldd	r18, Y+25	; 0x19
     d3c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d3e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d40:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d42:	bc 01       	movw	r22, r24
     d44:	cd 01       	movw	r24, r26
     d46:	0e 94 01 1a 	call	0x3402	; 0x3402 <__mulsi3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8e 87       	std	Y+14, r24	; 0x0e
     d50:	9f 87       	std	Y+15, r25	; 0x0f
     d52:	a8 8b       	std	Y+16, r26	; 0x10
     d54:	b9 8b       	std	Y+17, r27	; 0x11
     d56:	4d c0       	rjmp	.+154    	; 0xdf2 <CAL_OPERATION+0x1c2>
	             }
	             else if(oper=='/'){
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	8f 32       	cpi	r24, 0x2F	; 47
     d5c:	09 f0       	breq	.+2      	; 0xd60 <CAL_OPERATION+0x130>
     d5e:	49 c0       	rjmp	.+146    	; 0xdf2 <CAL_OPERATION+0x1c2>
	                  Pop_op(&pp,&op);
     d60:	ce 01       	movw	r24, r28
     d62:	81 96       	adiw	r24, 0x21	; 33
     d64:	2c ef       	ldi	r18, 0xFC	; 252
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	b9 01       	movw	r22, r18
     d6a:	0e 94 8c 18 	call	0x3118	; 0x3118 <Pop_op>
	                  if(num2==0){
     d6e:	89 8d       	ldd	r24, Y+25	; 0x19
     d70:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d72:	ab 8d       	ldd	r26, Y+27	; 0x1b
     d74:	bc 8d       	ldd	r27, Y+28	; 0x1c
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	a1 05       	cpc	r26, r1
     d7a:	b1 05       	cpc	r27, r1
     d7c:	41 f5       	brne	.+80     	; 0xdce <CAL_OPERATION+0x19e>
	                	  LCD_enuSendCommand(0xc0);//////GO TO SECOND LINE IN LCD
     d7e:	80 ec       	ldi	r24, 0xC0	; 192
     d80:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_enuSendCommand>
	                	  for(s32 it=0;Error[it]!='\0';it++){
     d84:	19 86       	std	Y+9, r1	; 0x09
     d86:	1a 86       	std	Y+10, r1	; 0x0a
     d88:	1b 86       	std	Y+11, r1	; 0x0b
     d8a:	1c 86       	std	Y+12, r1	; 0x0c
     d8c:	15 c0       	rjmp	.+42     	; 0xdb8 <CAL_OPERATION+0x188>
	                		  LCD_enuDisplayChar(Error[it]);
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	ab 85       	ldd	r26, Y+11	; 0x0b
     d94:	bc 85       	ldd	r27, Y+12	; 0x0c
     d96:	fc 01       	movw	r30, r24
     d98:	e8 59       	subi	r30, 0x98	; 152
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	80 81       	ld	r24, Z
     d9e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_enuDisplayChar>
	             }
	             else if(oper=='/'){
	                  Pop_op(&pp,&op);
	                  if(num2==0){
	                	  LCD_enuSendCommand(0xc0);//////GO TO SECOND LINE IN LCD
	                	  for(s32 it=0;Error[it]!='\0';it++){
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	ab 85       	ldd	r26, Y+11	; 0x0b
     da8:	bc 85       	ldd	r27, Y+12	; 0x0c
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	a1 1d       	adc	r26, r1
     dae:	b1 1d       	adc	r27, r1
     db0:	89 87       	std	Y+9, r24	; 0x09
     db2:	9a 87       	std	Y+10, r25	; 0x0a
     db4:	ab 87       	std	Y+11, r26	; 0x0b
     db6:	bc 87       	std	Y+12, r27	; 0x0c
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	ab 85       	ldd	r26, Y+11	; 0x0b
     dbe:	bc 85       	ldd	r27, Y+12	; 0x0c
     dc0:	fc 01       	movw	r30, r24
     dc2:	e8 59       	subi	r30, 0x98	; 152
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	88 23       	and	r24, r24
     dca:	09 f7       	brne	.-62     	; 0xd8e <CAL_OPERATION+0x15e>
     dcc:	fb c0       	rjmp	.+502    	; 0xfc4 <CAL_OPERATION+0x394>
	                		  LCD_enuDisplayChar(Error[it]);

	                	  }
	                	  return;
	                  }
	                 res=num1/num2;
     dce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dd2:	af 8d       	ldd	r26, Y+31	; 0x1f
     dd4:	b8 a1       	ldd	r27, Y+32	; 0x20
     dd6:	29 8d       	ldd	r18, Y+25	; 0x19
     dd8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     dda:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ddc:	5c 8d       	ldd	r21, Y+28	; 0x1c
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodsi4>
     de6:	da 01       	movw	r26, r20
     de8:	c9 01       	movw	r24, r18
     dea:	8e 87       	std	Y+14, r24	; 0x0e
     dec:	9f 87       	std	Y+15, r25	; 0x0f
     dee:	a8 8b       	std	Y+16, r26	; 0x10
     df0:	b9 8b       	std	Y+17, r27	; 0x11
	             }

	             Push(res,&numbers);
     df2:	8e 85       	ldd	r24, Y+14	; 0x0e
     df4:	9f 85       	ldd	r25, Y+15	; 0x0f
     df6:	a8 89       	ldd	r26, Y+16	; 0x10
     df8:	b9 89       	ldd	r27, Y+17	; 0x11
     dfa:	24 ef       	ldi	r18, 0xF4	; 244
     dfc:	32 e0       	ldi	r19, 0x02	; 2
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	a9 01       	movw	r20, r18
     e04:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>
	            }

	        }


	    Push_op(INPUT[j],&op);
     e08:	8a 89       	ldd	r24, Y+18	; 0x12
     e0a:	9b 89       	ldd	r25, Y+19	; 0x13
     e0c:	fc 01       	movw	r30, r24
     e0e:	ee 57       	subi	r30, 0x7E	; 126
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	2c ef       	ldi	r18, 0xFC	; 252
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	b9 01       	movw	r22, r18
     e1a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <Push_op>
	     num=0;
     e1e:	1c 8a       	std	Y+20, r1	; 0x14
     e20:	1d 8a       	std	Y+21, r1	; 0x15
     e22:	1e 8a       	std	Y+22, r1	; 0x16
     e24:	1f 8a       	std	Y+23, r1	; 0x17


void CAL_OPERATION(){
	s32 num=0;

	 for(int j=0;INPUT[j]!='\0';j++){
     e26:	8a 89       	ldd	r24, Y+18	; 0x12
     e28:	9b 89       	ldd	r25, Y+19	; 0x13
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	9b 8b       	std	Y+19, r25	; 0x13
     e2e:	8a 8b       	std	Y+18, r24	; 0x12
     e30:	8a 89       	ldd	r24, Y+18	; 0x12
     e32:	9b 89       	ldd	r25, Y+19	; 0x13
     e34:	fc 01       	movw	r30, r24
     e36:	ee 57       	subi	r30, 0x7E	; 126
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	88 23       	and	r24, r24
     e3e:	09 f0       	breq	.+2      	; 0xe42 <CAL_OPERATION+0x212>
     e40:	08 cf       	rjmp	.-496    	; 0xc52 <CAL_OPERATION+0x22>
	     num=0;
	}


	        }
	 Push(num,&numbers);
     e42:	8c 89       	ldd	r24, Y+20	; 0x14
     e44:	9d 89       	ldd	r25, Y+21	; 0x15
     e46:	ae 89       	ldd	r26, Y+22	; 0x16
     e48:	bf 89       	ldd	r27, Y+23	; 0x17
     e4a:	24 ef       	ldi	r18, 0xF4	; 244
     e4c:	32 e0       	ldi	r19, 0x02	; 2
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	a9 01       	movw	r20, r18
     e54:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>
	 u8 P=StackTop_op(&op);
     e58:	8c ef       	ldi	r24, 0xFC	; 252
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 a9 19 	call	0x3352	; 0x3352 <StackTop_op>
     e60:	88 8f       	std	Y+24, r24	; 0x18

	 if(P=='x'||P=='/'){
     e62:	88 8d       	ldd	r24, Y+24	; 0x18
     e64:	88 37       	cpi	r24, 0x78	; 120
     e66:	21 f0       	breq	.+8      	; 0xe70 <CAL_OPERATION+0x240>
     e68:	88 8d       	ldd	r24, Y+24	; 0x18
     e6a:	8f 32       	cpi	r24, 0x2F	; 47
     e6c:	09 f0       	breq	.+2      	; 0xe70 <CAL_OPERATION+0x240>
     e6e:	8e c0       	rjmp	.+284    	; 0xf8c <CAL_OPERATION+0x35c>
	     s32 num1,num2,res;
	      Pop(&num2,&numbers);
     e70:	ce 01       	movw	r24, r28
     e72:	86 96       	adiw	r24, 0x26	; 38
     e74:	24 ef       	ldi	r18, 0xF4	; 244
     e76:	32 e0       	ldi	r19, 0x02	; 2
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	       Pop(&num1,&numbers);
     e7e:	ce 01       	movw	r24, r28
     e80:	82 96       	adiw	r24, 0x22	; 34
     e82:	24 ef       	ldi	r18, 0xF4	; 244
     e84:	32 e0       	ldi	r19, 0x02	; 2
     e86:	b9 01       	movw	r22, r18
     e88:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	       if(P=='x')
     e8c:	88 8d       	ldd	r24, Y+24	; 0x18
     e8e:	88 37       	cpi	r24, 0x78	; 120
     e90:	91 f4       	brne	.+36     	; 0xeb6 <CAL_OPERATION+0x286>
	       res=num1*num2;
     e92:	8a a1       	ldd	r24, Y+34	; 0x22
     e94:	9b a1       	ldd	r25, Y+35	; 0x23
     e96:	ac a1       	ldd	r26, Y+36	; 0x24
     e98:	bd a1       	ldd	r27, Y+37	; 0x25
     e9a:	2e a1       	ldd	r18, Y+38	; 0x26
     e9c:	3f a1       	ldd	r19, Y+39	; 0x27
     e9e:	48 a5       	ldd	r20, Y+40	; 0x28
     ea0:	59 a5       	ldd	r21, Y+41	; 0x29
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 01 1a 	call	0x3402	; 0x3402 <__mulsi3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	9e 83       	std	Y+6, r25	; 0x06
     eb2:	af 83       	std	Y+7, r26	; 0x07
     eb4:	b8 87       	std	Y+8, r27	; 0x08
	        if(P=='/'){
     eb6:	88 8d       	ldd	r24, Y+24	; 0x18
     eb8:	8f 32       	cpi	r24, 0x2F	; 47
     eba:	09 f0       	breq	.+2      	; 0xebe <CAL_OPERATION+0x28e>
     ebc:	42 c0       	rjmp	.+132    	; 0xf42 <CAL_OPERATION+0x312>
	           res=num1/num2;
     ebe:	8a a1       	ldd	r24, Y+34	; 0x22
     ec0:	9b a1       	ldd	r25, Y+35	; 0x23
     ec2:	ac a1       	ldd	r26, Y+36	; 0x24
     ec4:	bd a1       	ldd	r27, Y+37	; 0x25
     ec6:	2e a1       	ldd	r18, Y+38	; 0x26
     ec8:	3f a1       	ldd	r19, Y+39	; 0x27
     eca:	48 a5       	ldd	r20, Y+40	; 0x28
     ecc:	59 a5       	ldd	r21, Y+41	; 0x29
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodsi4>
     ed6:	da 01       	movw	r26, r20
     ed8:	c9 01       	movw	r24, r18
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	af 83       	std	Y+7, r26	; 0x07
     ee0:	b8 87       	std	Y+8, r27	; 0x08
	           if(num2==0){
     ee2:	8e a1       	ldd	r24, Y+38	; 0x26
     ee4:	9f a1       	ldd	r25, Y+39	; 0x27
     ee6:	a8 a5       	ldd	r26, Y+40	; 0x28
     ee8:	b9 a5       	ldd	r27, Y+41	; 0x29
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	a1 05       	cpc	r26, r1
     eee:	b1 05       	cpc	r27, r1
     ef0:	41 f5       	brne	.+80     	; 0xf42 <CAL_OPERATION+0x312>
	        	   LCD_enuSendCommand(0xc0);
     ef2:	80 ec       	ldi	r24, 0xC0	; 192
     ef4:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_enuSendCommand>
	        for(s32 it=0;Error[it]!='\0';it++){
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	1a 82       	std	Y+2, r1	; 0x02
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	1c 82       	std	Y+4, r1	; 0x04
     f00:	15 c0       	rjmp	.+42     	; 0xf2c <CAL_OPERATION+0x2fc>

	       	       LCD_enuDisplayChar(Error[it]);
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	ab 81       	ldd	r26, Y+3	; 0x03
     f08:	bc 81       	ldd	r27, Y+4	; 0x04
     f0a:	fc 01       	movw	r30, r24
     f0c:	e8 59       	subi	r30, 0x98	; 152
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	80 81       	ld	r24, Z
     f12:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_enuDisplayChar>
	       res=num1*num2;
	        if(P=='/'){
	           res=num1/num2;
	           if(num2==0){
	        	   LCD_enuSendCommand(0xc0);
	        for(s32 it=0;Error[it]!='\0';it++){
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	ab 81       	ldd	r26, Y+3	; 0x03
     f1c:	bc 81       	ldd	r27, Y+4	; 0x04
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	a1 1d       	adc	r26, r1
     f22:	b1 1d       	adc	r27, r1
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	ab 83       	std	Y+3, r26	; 0x03
     f2a:	bc 83       	std	Y+4, r27	; 0x04
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	ab 81       	ldd	r26, Y+3	; 0x03
     f32:	bc 81       	ldd	r27, Y+4	; 0x04
     f34:	fc 01       	movw	r30, r24
     f36:	e8 59       	subi	r30, 0x98	; 152
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	09 f7       	brne	.-62     	; 0xf02 <CAL_OPERATION+0x2d2>
     f40:	41 c0       	rjmp	.+130    	; 0xfc4 <CAL_OPERATION+0x394>
	       	                	  }
	        return;
	        }

	        }
	       Push(res,&numbers);
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	af 81       	ldd	r26, Y+7	; 0x07
     f48:	b8 85       	ldd	r27, Y+8	; 0x08
     f4a:	24 ef       	ldi	r18, 0xF4	; 244
     f4c:	32 e0       	ldi	r19, 0x02	; 2
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	a9 01       	movw	r20, r18
     f54:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>

	        Pop_op(&P,&op);
     f58:	ce 01       	movw	r24, r28
     f5a:	48 96       	adiw	r24, 0x18	; 24
     f5c:	2c ef       	ldi	r18, 0xFC	; 252
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 8c 18 	call	0x3118	; 0x3118 <Pop_op>
     f66:	12 c0       	rjmp	.+36     	; 0xf8c <CAL_OPERATION+0x35c>

	 }
	 /////REVERSE THE INPUT
	 while(!StackEmpty(&numbers)){
	 	s32 s1_top;
	 	Pop(&s1_top,&numbers);
     f68:	ce 01       	movw	r24, r28
     f6a:	8a 96       	adiw	r24, 0x2a	; 42
     f6c:	24 ef       	ldi	r18, 0xF4	; 244
     f6e:	32 e0       	ldi	r19, 0x02	; 2
     f70:	b9 01       	movw	r22, r18
     f72:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	 	Push(s1_top,&rev_numbers);
     f76:	8a a5       	ldd	r24, Y+42	; 0x2a
     f78:	9b a5       	ldd	r25, Y+43	; 0x2b
     f7a:	ac a5       	ldd	r26, Y+44	; 0x2c
     f7c:	bd a5       	ldd	r27, Y+45	; 0x2d
     f7e:	22 e6       	ldi	r18, 0x62	; 98
     f80:	31 e0       	ldi	r19, 0x01	; 1
     f82:	bc 01       	movw	r22, r24
     f84:	cd 01       	movw	r24, r26
     f86:	a9 01       	movw	r20, r18
     f88:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>

	        Pop_op(&P,&op);

	 }
	 /////REVERSE THE INPUT
	 while(!StackEmpty(&numbers)){
     f8c:	84 ef       	ldi	r24, 0xF4	; 244
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 21 19 	call	0x3242	; 0x3242 <StackEmpty>
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	41 f3       	breq	.-48     	; 0xf68 <CAL_OPERATION+0x338>
     f98:	0d c0       	rjmp	.+26     	; 0xfb4 <CAL_OPERATION+0x384>
	 	Push(s1_top,&rev_numbers);

	 }
	 while(!StackEmpty_op(&op)){
	 		u8 p1_top;
	 		Pop_op(&p1_top,&op);
     f9a:	ce 01       	movw	r24, r28
     f9c:	8e 96       	adiw	r24, 0x2e	; 46
     f9e:	2c ef       	ldi	r18, 0xFC	; 252
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 8c 18 	call	0x3118	; 0x3118 <Pop_op>
	 		Push_op(p1_top,&rev_op);
     fa8:	8e a5       	ldd	r24, Y+46	; 0x2e
     faa:	26 e9       	ldi	r18, 0x96	; 150
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	b9 01       	movw	r22, r18
     fb0:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <Push_op>
	 	s32 s1_top;
	 	Pop(&s1_top,&numbers);
	 	Push(s1_top,&rev_numbers);

	 }
	 while(!StackEmpty_op(&op)){
     fb4:	8c ef       	ldi	r24, 0xFC	; 252
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 04 19 	call	0x3208	; 0x3208 <StackEmpty_op>
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	69 f3       	breq	.-38     	; 0xf9a <CAL_OPERATION+0x36a>


	 	}


	  CAL_OUTPUT();
     fc0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CAL_OUTPUT>

}
     fc4:	ae 96       	adiw	r28, 0x2e	; 46
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <CAL_OUTPUT>:


void CAL_OUTPUT(){
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	63 97       	sbiw	r28, 0x13	; 19
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	64 c0       	rjmp	.+200    	; 0x10bc <CAL_OUTPUT+0xe6>
	s32 result;

	 while(!StackEmpty_op(&rev_op)){

	           s32 res=0;
     ff4:	19 82       	std	Y+1, r1	; 0x01
     ff6:	1a 82       	std	Y+2, r1	; 0x02
     ff8:	1b 82       	std	Y+3, r1	; 0x03
     ffa:	1c 82       	std	Y+4, r1	; 0x04
	       s32 top_num1;
	       Pop(&top_num1,&rev_numbers);
     ffc:	ce 01       	movw	r24, r28
     ffe:	09 96       	adiw	r24, 0x09	; 9
    1000:	22 e6       	ldi	r18, 0x62	; 98
    1002:	31 e0       	ldi	r19, 0x01	; 1
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	        s32 top_num2;
	       Pop(&top_num2,&rev_numbers);
    100a:	ce 01       	movw	r24, r28
    100c:	0d 96       	adiw	r24, 0x0d	; 13
    100e:	22 e6       	ldi	r18, 0x62	; 98
    1010:	31 e0       	ldi	r19, 0x01	; 1
    1012:	b9 01       	movw	r22, r18
    1014:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	        u8 opre;
	        Pop_op(&opre,&rev_op);
    1018:	ce 01       	movw	r24, r28
    101a:	41 96       	adiw	r24, 0x11	; 17
    101c:	26 e9       	ldi	r18, 0x96	; 150
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	b9 01       	movw	r22, r18
    1022:	0e 94 8c 18 	call	0x3118	; 0x3118 <Pop_op>
	        switch(opre){
    1026:	89 89       	ldd	r24, Y+17	; 0x11
    1028:	e8 2e       	mov	r14, r24
    102a:	ff 24       	eor	r15, r15
    102c:	fb 8a       	std	Y+19, r15	; 0x13
    102e:	ea 8a       	std	Y+18, r14	; 0x12
    1030:	0a 89       	ldd	r16, Y+18	; 0x12
    1032:	1b 89       	ldd	r17, Y+19	; 0x13
    1034:	0b 32       	cpi	r16, 0x2B	; 43
    1036:	11 05       	cpc	r17, r1
    1038:	31 f0       	breq	.+12     	; 0x1046 <CAL_OUTPUT+0x70>
    103a:	2a 89       	ldd	r18, Y+18	; 0x12
    103c:	3b 89       	ldd	r19, Y+19	; 0x13
    103e:	2d 32       	cpi	r18, 0x2D	; 45
    1040:	31 05       	cpc	r19, r1
    1042:	e9 f0       	breq	.+58     	; 0x107e <CAL_OUTPUT+0xa8>
    1044:	3b c0       	rjmp	.+118    	; 0x10bc <CAL_OUTPUT+0xe6>

	        case'+':

	        res=top_num1+top_num2;
    1046:	29 85       	ldd	r18, Y+9	; 0x09
    1048:	3a 85       	ldd	r19, Y+10	; 0x0a
    104a:	4b 85       	ldd	r20, Y+11	; 0x0b
    104c:	5c 85       	ldd	r21, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	af 85       	ldd	r26, Y+15	; 0x0f
    1054:	b8 89       	ldd	r27, Y+16	; 0x10
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	a4 1f       	adc	r26, r20
    105c:	b5 1f       	adc	r27, r21
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	ab 83       	std	Y+3, r26	; 0x03
    1064:	bc 83       	std	Y+4, r27	; 0x04
	        Push(res,&rev_numbers);
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	ab 81       	ldd	r26, Y+3	; 0x03
    106c:	bc 81       	ldd	r27, Y+4	; 0x04
    106e:	22 e6       	ldi	r18, 0x62	; 98
    1070:	31 e0       	ldi	r19, 0x01	; 1
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	a9 01       	movw	r20, r18
    1078:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>
    107c:	1f c0       	rjmp	.+62     	; 0x10bc <CAL_OUTPUT+0xe6>
	        break;

	         case'-':
	        res=top_num1-top_num2;
    107e:	29 85       	ldd	r18, Y+9	; 0x09
    1080:	3a 85       	ldd	r19, Y+10	; 0x0a
    1082:	4b 85       	ldd	r20, Y+11	; 0x0b
    1084:	5c 85       	ldd	r21, Y+12	; 0x0c
    1086:	8d 85       	ldd	r24, Y+13	; 0x0d
    1088:	9e 85       	ldd	r25, Y+14	; 0x0e
    108a:	af 85       	ldd	r26, Y+15	; 0x0f
    108c:	b8 89       	ldd	r27, Y+16	; 0x10
    108e:	79 01       	movw	r14, r18
    1090:	8a 01       	movw	r16, r20
    1092:	e8 1a       	sub	r14, r24
    1094:	f9 0a       	sbc	r15, r25
    1096:	0a 0b       	sbc	r16, r26
    1098:	1b 0b       	sbc	r17, r27
    109a:	d8 01       	movw	r26, r16
    109c:	c7 01       	movw	r24, r14
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	ab 83       	std	Y+3, r26	; 0x03
    10a4:	bc 83       	std	Y+4, r27	; 0x04
	        Push(res,&rev_numbers);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	ab 81       	ldd	r26, Y+3	; 0x03
    10ac:	bc 81       	ldd	r27, Y+4	; 0x04
    10ae:	22 e6       	ldi	r18, 0x62	; 98
    10b0:	31 e0       	ldi	r19, 0x01	; 1
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	a9 01       	movw	r20, r18
    10b8:	0e 94 38 18 	call	0x3070	; 0x3070 <Push>


void CAL_OUTPUT(){
	s32 result;

	 while(!StackEmpty_op(&rev_op)){
    10bc:	86 e9       	ldi	r24, 0x96	; 150
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 04 19 	call	0x3208	; 0x3208 <StackEmpty_op>
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f4       	brne	.+2      	; 0x10ca <CAL_OUTPUT+0xf4>
    10c8:	95 cf       	rjmp	.-214    	; 0xff4 <CAL_OUTPUT+0x1e>
	         case'-':
	        res=top_num1-top_num2;
	        Push(res,&rev_numbers);
	        }
	 }
	        Pop(&result, &rev_numbers );
    10ca:	ce 01       	movw	r24, r28
    10cc:	05 96       	adiw	r24, 0x05	; 5
    10ce:	22 e6       	ldi	r18, 0x62	; 98
    10d0:	31 e0       	ldi	r19, 0x01	; 1
    10d2:	b9 01       	movw	r22, r18
    10d4:	0e 94 b4 18 	call	0x3168	; 0x3168 <Pop>
	        LCD_enuSendCommand(0xc0);/////GO TO SECOND LINE IN LCD
    10d8:	80 ec       	ldi	r24, 0xC0	; 192
    10da:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_enuSendCommand>


	        LCD_enuDisplayIntegerNum(result);
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	af 81       	ldd	r26, Y+7	; 0x07
    10e4:	b8 85       	ldd	r27, Y+8	; 0x08
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <LCD_enuDisplayIntegerNum>



	        }
    10ee:	63 96       	adiw	r28, 0x13	; 19
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	08 95       	ret

00001108 <Clear_CAL>:




void Clear_CAL(){
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	 LCD_Clear();
    1110:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_Clear>
	 ClearStack(&numbers);
    1114:	84 ef       	ldi	r24, 0xF4	; 244
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	0e 94 4e 19 	call	0x329c	; 0x329c <ClearStack>
	 ClearStack(&numbers);
    111c:	84 ef       	ldi	r24, 0xF4	; 244
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	0e 94 4e 19 	call	0x329c	; 0x329c <ClearStack>
	 ClearStack_op(&op);
    1124:	8c ef       	ldi	r24, 0xFC	; 252
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 5e 19 	call	0x32bc	; 0x32bc <ClearStack_op>
	 ClearStack_op(&rev_op);
    112c:	86 e9       	ldi	r24, 0x96	; 150
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 5e 19 	call	0x32bc	; 0x32bc <ClearStack_op>
i=0;
    1134:	10 92 92 00 	sts	0x0092, r1
    1138:	10 92 93 00 	sts	0x0093, r1
    113c:	10 92 94 00 	sts	0x0094, r1
    1140:	10 92 95 00 	sts	0x0095, r1

}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	e9 97       	sbiw	r28, 0x39	; 57
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    115e:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	62 e0       	ldi	r22, 0x02	; 2
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	67 e0       	ldi	r22, 0x07	; 7
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	66 e0       	ldi	r22, 0x06	; 6
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	65 e0       	ldi	r22, 0x05	; 5
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	64 e0       	ldi	r22, 0x04	; 4
    11a0:	41 e0       	ldi	r20, 0x01	; 1
    11a2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	ac e0       	ldi	r26, 0x0C	; 12
    11ac:	b2 e4       	ldi	r27, 0x42	; 66
    11ae:	8d ab       	std	Y+53, r24	; 0x35
    11b0:	9e ab       	std	Y+54, r25	; 0x36
    11b2:	af ab       	std	Y+55, r26	; 0x37
    11b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6d a9       	ldd	r22, Y+53	; 0x35
    11b8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ba:	8f a9       	ldd	r24, Y+55	; 0x37
    11bc:	98 ad       	ldd	r25, Y+56	; 0x38
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a e7       	ldi	r20, 0x7A	; 122
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	89 ab       	std	Y+49, r24	; 0x31
    11d0:	9a ab       	std	Y+50, r25	; 0x32
    11d2:	ab ab       	std	Y+51, r26	; 0x33
    11d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d6:	69 a9       	ldd	r22, Y+49	; 0x31
    11d8:	7a a9       	ldd	r23, Y+50	; 0x32
    11da:	8b a9       	ldd	r24, Y+51	; 0x33
    11dc:	9c a9       	ldd	r25, Y+52	; 0x34
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <LCD_enuInit+0xae>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	98 ab       	std	Y+48, r25	; 0x30
    11f4:	8f a7       	std	Y+47, r24	; 0x2f
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    11f8:	69 a9       	ldd	r22, Y+49	; 0x31
    11fa:	7a a9       	ldd	r23, Y+50	; 0x32
    11fc:	8b a9       	ldd	r24, Y+51	; 0x33
    11fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6d a9       	ldd	r22, Y+53	; 0x35
    1212:	7e a9       	ldd	r23, Y+54	; 0x36
    1214:	8f a9       	ldd	r24, Y+55	; 0x37
    1216:	98 ad       	ldd	r25, Y+56	; 0x38
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	98 ab       	std	Y+48, r25	; 0x30
    1236:	8f a7       	std	Y+47, r24	; 0x2f
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <LCD_enuInit+0x10e>
    123a:	89 e1       	ldi	r24, 0x19	; 25
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9e a7       	std	Y+46, r25	; 0x2e
    1240:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1242:	8d a5       	ldd	r24, Y+45	; 0x2d
    1244:	9e a5       	ldd	r25, Y+46	; 0x2e
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_enuInit+0xfc>
    124a:	9e a7       	std	Y+46, r25	; 0x2e
    124c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1250:	98 a9       	ldd	r25, Y+48	; 0x30
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	98 ab       	std	Y+48, r25	; 0x30
    1256:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8f a5       	ldd	r24, Y+47	; 0x2f
    125a:	98 a9       	ldd	r25, Y+48	; 0x30
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <LCD_enuInit+0xf0>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	69 a9       	ldd	r22, Y+49	; 0x31
    1264:	7a a9       	ldd	r23, Y+50	; 0x32
    1266:	8b a9       	ldd	r24, Y+51	; 0x33
    1268:	9c a9       	ldd	r25, Y+52	; 0x34
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	98 ab       	std	Y+48, r25	; 0x30
    1274:	8f a7       	std	Y+47, r24	; 0x2f
    1276:	8f a5       	ldd	r24, Y+47	; 0x2f
    1278:	98 a9       	ldd	r25, Y+48	; 0x30
    127a:	9c a7       	std	Y+44, r25	; 0x2c
    127c:	8b a7       	std	Y+43, r24	; 0x2b
    127e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1280:	9c a5       	ldd	r25, Y+44	; 0x2c
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <LCD_enuInit+0x138>
    1286:	9c a7       	std	Y+44, r25	; 0x2c
    1288:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
    128a:	88 e2       	ldi	r24, 0x28	; 40
    128c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_invidSendCommend>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e8       	ldi	r26, 0x80	; 128
    1296:	bf e3       	ldi	r27, 0x3F	; 63
    1298:	8f a3       	std	Y+39, r24	; 0x27
    129a:	98 a7       	std	Y+40, r25	; 0x28
    129c:	a9 a7       	std	Y+41, r26	; 0x29
    129e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6f a1       	ldd	r22, Y+39	; 0x27
    12a2:	78 a5       	ldd	r23, Y+40	; 0x28
    12a4:	89 a5       	ldd	r24, Y+41	; 0x29
    12a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a e7       	ldi	r20, 0x7A	; 122
    12ae:	53 e4       	ldi	r21, 0x43	; 67
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8b a3       	std	Y+35, r24	; 0x23
    12ba:	9c a3       	std	Y+36, r25	; 0x24
    12bc:	ad a3       	std	Y+37, r26	; 0x25
    12be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c0:	6b a1       	ldd	r22, Y+35	; 0x23
    12c2:	7c a1       	ldd	r23, Y+36	; 0x24
    12c4:	8d a1       	ldd	r24, Y+37	; 0x25
    12c6:	9e a1       	ldd	r25, Y+38	; 0x26
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <LCD_enuInit+0x198>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9a a3       	std	Y+34, r25	; 0x22
    12de:	89 a3       	std	Y+33, r24	; 0x21
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <LCD_enuInit+0x216>
	else if (__tmp > 65535)
    12e2:	6b a1       	ldd	r22, Y+35	; 0x23
    12e4:	7c a1       	ldd	r23, Y+36	; 0x24
    12e6:	8d a1       	ldd	r24, Y+37	; 0x25
    12e8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6f a1       	ldd	r22, Y+39	; 0x27
    12fc:	78 a5       	ldd	r23, Y+40	; 0x28
    12fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1300:	9a a5       	ldd	r25, Y+42	; 0x2a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <LCD_enuInit+0x1f8>
    1324:	89 e1       	ldi	r24, 0x19	; 25
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
    132c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    132e:	98 a1       	ldd	r25, Y+32	; 0x20
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_enuInit+0x1e6>
    1334:	98 a3       	std	Y+32, r25	; 0x20
    1336:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	89 a1       	ldd	r24, Y+33	; 0x21
    133a:	9a a1       	ldd	r25, Y+34	; 0x22
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	89 a1       	ldd	r24, Y+33	; 0x21
    1344:	9a a1       	ldd	r25, Y+34	; 0x22
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <LCD_enuInit+0x1da>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6b a1       	ldd	r22, Y+35	; 0x23
    134e:	7c a1       	ldd	r23, Y+36	; 0x24
    1350:	8d a1       	ldd	r24, Y+37	; 0x25
    1352:	9e a1       	ldd	r25, Y+38	; 0x26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9a a3       	std	Y+34, r25	; 0x22
    135e:	89 a3       	std	Y+33, r24	; 0x21
    1360:	89 a1       	ldd	r24, Y+33	; 0x21
    1362:	9a a1       	ldd	r25, Y+34	; 0x22
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
    1368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_enuInit+0x222>
    1370:	9e 8f       	std	Y+30, r25	; 0x1e
    1372:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1374:	8f e0       	ldi	r24, 0x0F	; 15
    1376:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_invidSendCommend>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e8       	ldi	r26, 0x80	; 128
    1380:	bf e3       	ldi	r27, 0x3F	; 63
    1382:	89 8f       	std	Y+25, r24	; 0x19
    1384:	9a 8f       	std	Y+26, r25	; 0x1a
    1386:	ab 8f       	std	Y+27, r26	; 0x1b
    1388:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	69 8d       	ldd	r22, Y+25	; 0x19
    138c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a e7       	ldi	r20, 0x7A	; 122
    1398:	53 e4       	ldi	r21, 0x43	; 67
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8d 8b       	std	Y+21, r24	; 0x15
    13a4:	9e 8b       	std	Y+22, r25	; 0x16
    13a6:	af 8b       	std	Y+23, r26	; 0x17
    13a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13aa:	6d 89       	ldd	r22, Y+21	; 0x15
    13ac:	7e 89       	ldd	r23, Y+22	; 0x16
    13ae:	8f 89       	ldd	r24, Y+23	; 0x17
    13b0:	98 8d       	ldd	r25, Y+24	; 0x18
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <LCD_enuInit+0x282>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    13cc:	6d 89       	ldd	r22, Y+21	; 0x15
    13ce:	7e 89       	ldd	r23, Y+22	; 0x16
    13d0:	8f 89       	ldd	r24, Y+23	; 0x17
    13d2:	98 8d       	ldd	r25, Y+24	; 0x18
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	69 8d       	ldd	r22, Y+25	; 0x19
    13e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9c 8b       	std	Y+20, r25	; 0x14
    140a:	8b 8b       	std	Y+19, r24	; 0x13
    140c:	0f c0       	rjmp	.+30     	; 0x142c <LCD_enuInit+0x2e2>
    140e:	89 e1       	ldi	r24, 0x19	; 25
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9a 8b       	std	Y+18, r25	; 0x12
    1414:	89 8b       	std	Y+17, r24	; 0x11
    1416:	89 89       	ldd	r24, Y+17	; 0x11
    1418:	9a 89       	ldd	r25, Y+18	; 0x12
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <LCD_enuInit+0x2d0>
    141e:	9a 8b       	std	Y+18, r25	; 0x12
    1420:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9c 8b       	std	Y+20, r25	; 0x14
    142a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8b 89       	ldd	r24, Y+19	; 0x13
    142e:	9c 89       	ldd	r25, Y+20	; 0x14
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <LCD_enuInit+0x2c4>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	8b 89       	ldd	r24, Y+19	; 0x13
    144c:	9c 89       	ldd	r25, Y+20	; 0x14
    144e:	98 8b       	std	Y+16, r25	; 0x10
    1450:	8f 87       	std	Y+15, r24	; 0x0f
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_enuInit+0x30c>
    145a:	98 8b       	std	Y+16, r25	; 0x10
    145c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_invidSendCommend>
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e4       	ldi	r27, 0x40	; 64
    146c:	8b 87       	std	Y+11, r24	; 0x0b
    146e:	9c 87       	std	Y+12, r25	; 0x0c
    1470:	ad 87       	std	Y+13, r26	; 0x0d
    1472:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1474:	6b 85       	ldd	r22, Y+11	; 0x0b
    1476:	7c 85       	ldd	r23, Y+12	; 0x0c
    1478:	8d 85       	ldd	r24, Y+13	; 0x0d
    147a:	9e 85       	ldd	r25, Y+14	; 0x0e
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	4a e7       	ldi	r20, 0x7A	; 122
    1482:	53 e4       	ldi	r21, 0x43	; 67
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	8f 83       	std	Y+7, r24	; 0x07
    148e:	98 87       	std	Y+8, r25	; 0x08
    1490:	a9 87       	std	Y+9, r26	; 0x09
    1492:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <LCD_enuInit+0x36c>
		__ticks = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	3f c0       	rjmp	.+126    	; 0x1534 <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	3f ef       	ldi	r19, 0xFF	; 255
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	57 e4       	ldi	r21, 0x47	; 71
    14c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ca:	18 16       	cp	r1, r24
    14cc:	4c f5       	brge	.+82     	; 0x1520 <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e2       	ldi	r20, 0x20	; 32
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	0f c0       	rjmp	.+30     	; 0x1516 <LCD_enuInit+0x3cc>
    14f8:	89 e1       	ldi	r24, 0x19	; 25
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <LCD_enuInit+0x3ba>
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	69 f7       	brne	.-38     	; 0x14f8 <LCD_enuInit+0x3ae>
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <LCD_enuInit+0x3f6>
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1548:	86 e0       	ldi	r24, 0x06	; 6
    154a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LCD_invidSendCommend>

	return Local_enuErrorState;
    154e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1550:	e9 96       	adiw	r28, 0x39	; 57
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <LCD_enuDisplayChar+0x6>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    156e:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_vidLatch>

	return Local_enuErrorState;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <LCD_enuSendCommand+0x6>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1598:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_vidLatch>


	return Local_enuErrorState;
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	2b 97       	sbiw	r28, 0x0b	; 11
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	68 87       	std	Y+8, r22	; 0x08
    15cc:	79 87       	std	Y+9, r23	; 0x09
    15ce:	8a 87       	std	Y+10, r24	; 0x0a
    15d0:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    15d2:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    15d4:	1b 82       	std	Y+3, r1	; 0x03
    15d6:	1c 82       	std	Y+4, r1	; 0x04
    15d8:	1d 82       	std	Y+5, r1	; 0x05
    15da:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    15dc:	1a 82       	std	Y+2, r1	; 0x02
    15de:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    15e0:	88 85       	ldd	r24, Y+8	; 0x08
    15e2:	99 85       	ldd	r25, Y+9	; 0x09
    15e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    15e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    15e8:	bb 23       	and	r27, r27
    15ea:	0c f0       	brlt	.+2      	; 0x15ee <LCD_enuDisplayIntegerNum+0x38>
    15ec:	57 c0       	rjmp	.+174    	; 0x169c <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    15f8:	8d e2       	ldi	r24, 0x2D	; 45
    15fa:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    15fe:	88 85       	ldd	r24, Y+8	; 0x08
    1600:	99 85       	ldd	r25, Y+9	; 0x09
    1602:	aa 85       	ldd	r26, Y+10	; 0x0a
    1604:	bb 85       	ldd	r27, Y+11	; 0x0b
    1606:	b0 95       	com	r27
    1608:	a0 95       	com	r26
    160a:	90 95       	com	r25
    160c:	81 95       	neg	r24
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	af 4f       	sbci	r26, 0xFF	; 255
    1612:	bf 4f       	sbci	r27, 0xFF	; 255
    1614:	88 87       	std	Y+8, r24	; 0x08
    1616:	99 87       	std	Y+9, r25	; 0x09
    1618:	aa 87       	std	Y+10, r26	; 0x0a
    161a:	bb 87       	std	Y+11, r27	; 0x0b
    161c:	3f c0       	rjmp	.+126    	; 0x169c <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    161e:	88 85       	ldd	r24, Y+8	; 0x08
    1620:	99 85       	ldd	r25, Y+9	; 0x09
    1622:	aa 85       	ldd	r26, Y+10	; 0x0a
    1624:	bb 85       	ldd	r27, Y+11	; 0x0b
    1626:	2a e0       	ldi	r18, 0x0A	; 10
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodsi4>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	ad 81       	ldd	r26, Y+5	; 0x05
    1642:	be 81       	ldd	r27, Y+6	; 0x06
    1644:	2a e0       	ldi	r18, 0x0A	; 10
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 01 1a 	call	0x3402	; 0x3402 <__mulsi3>
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	a4 1f       	adc	r26, r20
    1668:	b5 1f       	adc	r27, r21
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	ad 83       	std	Y+5, r26	; 0x05
    1670:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1672:	88 85       	ldd	r24, Y+8	; 0x08
    1674:	99 85       	ldd	r25, Y+9	; 0x09
    1676:	aa 85       	ldd	r26, Y+10	; 0x0a
    1678:	bb 85       	ldd	r27, Y+11	; 0x0b
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodsi4>
    168a:	da 01       	movw	r26, r20
    168c:	c9 01       	movw	r24, r18
    168e:	88 87       	std	Y+8, r24	; 0x08
    1690:	99 87       	std	Y+9, r25	; 0x09
    1692:	aa 87       	std	Y+10, r26	; 0x0a
    1694:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    169c:	88 85       	ldd	r24, Y+8	; 0x08
    169e:	99 85       	ldd	r25, Y+9	; 0x09
    16a0:	aa 85       	ldd	r26, Y+10	; 0x0a
    16a2:	bb 85       	ldd	r27, Y+11	; 0x0b
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	a1 05       	cpc	r26, r1
    16a8:	b1 05       	cpc	r27, r1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <LCD_enuDisplayIntegerNum+0xf8>
    16ac:	b8 cf       	rjmp	.-144    	; 0x161e <LCD_enuDisplayIntegerNum+0x68>
    16ae:	2d c0       	rjmp	.+90     	; 0x170a <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	ad 81       	ldd	r26, Y+5	; 0x05
    16b6:	be 81       	ldd	r27, Y+6	; 0x06
    16b8:	2a e0       	ldi	r18, 0x0A	; 10
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodsi4>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	80 5d       	subi	r24, 0xD0	; 208
    16dc:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	ad 81       	ldd	r26, Y+5	; 0x05
    16e6:	be 81       	ldd	r27, Y+6	; 0x06
    16e8:	2a e0       	ldi	r18, 0x0A	; 10
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodsi4>
    16f8:	da 01       	movw	r26, r20
    16fa:	c9 01       	movw	r24, r18
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	ad 83       	std	Y+5, r26	; 0x05
    1702:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	81 50       	subi	r24, 0x01	; 1
    1708:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 23       	and	r24, r24
    170e:	81 f6       	brne	.-96     	; 0x16b0 <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    1710:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1712:	2b 96       	adiw	r28, 0x0b	; 11
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	c5 55       	subi	r28, 0x55	; 85
    1732:	d0 40       	sbci	r29, 0x00	; 0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	fe 01       	movw	r30, r28
    1740:	eb 5a       	subi	r30, 0xAB	; 171
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    175a:	fe 01       	movw	r30, r28
    175c:	eb 5a       	subi	r30, 0xAB	; 171
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	98 2f       	mov	r25, r24
    1764:	99 1f       	adc	r25, r25
    1766:	99 27       	eor	r25, r25
    1768:	99 1f       	adc	r25, r25
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	67 e0       	ldi	r22, 0x07	; 7
    176e:	49 2f       	mov	r20, r25
    1770:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1774:	fe 01       	movw	r30, r28
    1776:	eb 5a       	subi	r30, 0xAB	; 171
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	82 95       	swap	r24
    177e:	86 95       	lsr	r24
    1780:	86 95       	lsr	r24
    1782:	83 70       	andi	r24, 0x03	; 3
    1784:	98 2f       	mov	r25, r24
    1786:	91 70       	andi	r25, 0x01	; 1
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	66 e0       	ldi	r22, 0x06	; 6
    178c:	49 2f       	mov	r20, r25
    178e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1792:	fe 01       	movw	r30, r28
    1794:	eb 5a       	subi	r30, 0xAB	; 171
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	82 95       	swap	r24
    179c:	86 95       	lsr	r24
    179e:	87 70       	andi	r24, 0x07	; 7
    17a0:	98 2f       	mov	r25, r24
    17a2:	91 70       	andi	r25, 0x01	; 1
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	65 e0       	ldi	r22, 0x05	; 5
    17a8:	49 2f       	mov	r20, r25
    17aa:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    17ae:	fe 01       	movw	r30, r28
    17b0:	eb 5a       	subi	r30, 0xAB	; 171
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 81       	ld	r24, Z
    17b6:	82 95       	swap	r24
    17b8:	8f 70       	andi	r24, 0x0F	; 15
    17ba:	98 2f       	mov	r25, r24
    17bc:	91 70       	andi	r25, 0x01	; 1
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	64 e0       	ldi	r22, 0x04	; 4
    17c2:	49 2f       	mov	r20, r25
    17c4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    17c8:	fe 01       	movw	r30, r28
    17ca:	eb 5a       	subi	r30, 0xAB	; 171
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	88 32       	cpi	r24, 0x28	; 40
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <LCD_vidLatch+0xb2>
    17d4:	79 c1       	rjmp	.+754    	; 0x1ac8 <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    17e0:	fe 01       	movw	r30, r28
    17e2:	ef 5a       	subi	r30, 0xAF	; 175
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e2       	ldi	r26, 0x20	; 32
    17ec:	b1 e4       	ldi	r27, 0x41	; 65
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f6:	8e 01       	movw	r16, r28
    17f8:	03 5b       	subi	r16, 0xB3	; 179
    17fa:	1f 4f       	sbci	r17, 0xFF	; 255
    17fc:	fe 01       	movw	r30, r28
    17fe:	ef 5a       	subi	r30, 0xAF	; 175
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a e7       	ldi	r20, 0x7A	; 122
    1810:	53 e4       	ldi	r21, 0x43	; 67
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	f8 01       	movw	r30, r16
    181c:	80 83       	st	Z, r24
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	a2 83       	std	Z+2, r26	; 0x02
    1822:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1824:	fe 01       	movw	r30, r28
    1826:	e3 5b       	subi	r30, 0xB3	; 179
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	44 f4       	brge	.+16     	; 0x1852 <LCD_vidLatch+0x12e>
		__ticks = 1;
    1842:	fe 01       	movw	r30, r28
    1844:	e5 5b       	subi	r30, 0xB5	; 181
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
    1850:	64 c0       	rjmp	.+200    	; 0x191a <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    1852:	fe 01       	movw	r30, r28
    1854:	e3 5b       	subi	r30, 0xB3	; 179
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	0c f0       	brlt	.+2      	; 0x1872 <LCD_vidLatch+0x14e>
    1870:	43 c0       	rjmp	.+134    	; 0x18f8 <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	fe 01       	movw	r30, r28
    1874:	ef 5a       	subi	r30, 0xAF	; 175
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8e 01       	movw	r16, r28
    1892:	05 5b       	subi	r16, 0xB5	; 181
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	1f c0       	rjmp	.+62     	; 0x18e8 <LCD_vidLatch+0x1c4>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e7 5b       	subi	r30, 0xB7	; 183
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	89 e1       	ldi	r24, 0x19	; 25
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	fe 01       	movw	r30, r28
    18ba:	e7 5b       	subi	r30, 0xB7	; 183
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <LCD_vidLatch+0x19e>
    18c6:	fe 01       	movw	r30, r28
    18c8:	e7 5b       	subi	r30, 0xB7	; 183
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	de 01       	movw	r26, r28
    18d2:	a5 5b       	subi	r26, 0xB5	; 181
    18d4:	bf 4f       	sbci	r27, 0xFF	; 255
    18d6:	fe 01       	movw	r30, r28
    18d8:	e5 5b       	subi	r30, 0xB5	; 181
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	11 96       	adiw	r26, 0x01	; 1
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e8:	fe 01       	movw	r30, r28
    18ea:	e5 5b       	subi	r30, 0xB5	; 181
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	d1 f6       	brne	.-76     	; 0x18aa <LCD_vidLatch+0x186>
    18f6:	27 c0       	rjmp	.+78     	; 0x1946 <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	8e 01       	movw	r16, r28
    18fa:	05 5b       	subi	r16, 0xB5	; 181
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	e3 5b       	subi	r30, 0xB3	; 179
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	f8 01       	movw	r30, r16
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	de 01       	movw	r26, r28
    191c:	a9 5b       	subi	r26, 0xB9	; 185
    191e:	bf 4f       	sbci	r27, 0xFF	; 255
    1920:	fe 01       	movw	r30, r28
    1922:	e5 5b       	subi	r30, 0xB5	; 181
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	8d 93       	st	X+, r24
    192c:	9c 93       	st	X, r25
    192e:	fe 01       	movw	r30, r28
    1930:	e9 5b       	subi	r30, 0xB9	; 185
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_vidLatch+0x214>
    193c:	fe 01       	movw	r30, r28
    193e:	e9 5b       	subi	r30, 0xB9	; 185
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    1950:	fe 01       	movw	r30, r28
    1952:	ed 5b       	subi	r30, 0xBD	; 189
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e2       	ldi	r26, 0x20	; 32
    195c:	b1 e4       	ldi	r27, 0x41	; 65
    195e:	80 83       	st	Z, r24
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	a2 83       	std	Z+2, r26	; 0x02
    1964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	8e 01       	movw	r16, r28
    1968:	01 5c       	subi	r16, 0xC1	; 193
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	fe 01       	movw	r30, r28
    196e:	ed 5b       	subi	r30, 0xBD	; 189
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a e7       	ldi	r20, 0x7A	; 122
    1980:	53 e4       	ldi	r21, 0x43	; 67
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	f8 01       	movw	r30, r16
    198c:	80 83       	st	Z, r24
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	a2 83       	std	Z+2, r26	; 0x02
    1992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1994:	fe 01       	movw	r30, r28
    1996:	ff 96       	adiw	r30, 0x3f	; 63
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <LCD_vidLatch+0x296>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9e af       	std	Y+62, r25	; 0x3e
    19b6:	8d af       	std	Y+61, r24	; 0x3d
    19b8:	46 c0       	rjmp	.+140    	; 0x1a46 <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    19ba:	fe 01       	movw	r30, r28
    19bc:	ff 96       	adiw	r30, 0x3f	; 63
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	64 f5       	brge	.+88     	; 0x1a2e <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 5b       	subi	r30, 0xBD	; 189
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e2       	ldi	r20, 0x20	; 32
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9e af       	std	Y+62, r25	; 0x3e
    1a02:	8d af       	std	Y+61, r24	; 0x3d
    1a04:	0f c0       	rjmp	.+30     	; 0x1a24 <LCD_vidLatch+0x300>
    1a06:	89 e1       	ldi	r24, 0x19	; 25
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c af       	std	Y+60, r25	; 0x3c
    1a0c:	8b af       	std	Y+59, r24	; 0x3b
    1a0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a10:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_vidLatch+0x2ee>
    1a16:	9c af       	std	Y+60, r25	; 0x3c
    1a18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	9e af       	std	Y+62, r25	; 0x3e
    1a22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	69 f7       	brne	.-38     	; 0x1a06 <LCD_vidLatch+0x2e2>
    1a2c:	16 c0       	rjmp	.+44     	; 0x1a5a <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ff 96       	adiw	r30, 0x3f	; 63
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e af       	std	Y+62, r25	; 0x3e
    1a44:	8d af       	std	Y+61, r24	; 0x3d
    1a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4a:	9a af       	std	Y+58, r25	; 0x3a
    1a4c:	89 af       	std	Y+57, r24	; 0x39
    1a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_vidLatch+0x32e>
    1a56:	9a af       	std	Y+58, r25	; 0x3a
    1a58:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	eb 5a       	subi	r30, 0xAB	; 171
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	98 2f       	mov	r25, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	99 27       	eor	r25, r25
    1a68:	99 1f       	adc	r25, r25
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	67 e0       	ldi	r22, 0x07	; 7
    1a6e:	49 2f       	mov	r20, r25
    1a70:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1a74:	fe 01       	movw	r30, r28
    1a76:	eb 5a       	subi	r30, 0xAB	; 171
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	82 95       	swap	r24
    1a7e:	86 95       	lsr	r24
    1a80:	86 95       	lsr	r24
    1a82:	83 70       	andi	r24, 0x03	; 3
    1a84:	98 2f       	mov	r25, r24
    1a86:	91 70       	andi	r25, 0x01	; 1
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	66 e0       	ldi	r22, 0x06	; 6
    1a8c:	49 2f       	mov	r20, r25
    1a8e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1a92:	fe 01       	movw	r30, r28
    1a94:	eb 5a       	subi	r30, 0xAB	; 171
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	82 95       	swap	r24
    1a9c:	86 95       	lsr	r24
    1a9e:	87 70       	andi	r24, 0x07	; 7
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	91 70       	andi	r25, 0x01	; 1
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	65 e0       	ldi	r22, 0x05	; 5
    1aa8:	49 2f       	mov	r20, r25
    1aaa:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1aae:	fe 01       	movw	r30, r28
    1ab0:	eb 5a       	subi	r30, 0xAB	; 171
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	82 95       	swap	r24
    1ab8:	8f 70       	andi	r24, 0x0F	; 15
    1aba:	98 2f       	mov	r25, r24
    1abc:	91 70       	andi	r25, 0x01	; 1
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	64 e0       	ldi	r22, 0x04	; 4
    1ac2:	49 2f       	mov	r20, r25
    1ac4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e2       	ldi	r26, 0x20	; 32
    1ad8:	b1 e4       	ldi	r27, 0x41	; 65
    1ada:	8d ab       	std	Y+53, r24	; 0x35
    1adc:	9e ab       	std	Y+54, r25	; 0x36
    1ade:	af ab       	std	Y+55, r26	; 0x37
    1ae0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a e7       	ldi	r20, 0x7A	; 122
    1af0:	53 e4       	ldi	r21, 0x43	; 67
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	89 ab       	std	Y+49, r24	; 0x31
    1afc:	9a ab       	std	Y+50, r25	; 0x32
    1afe:	ab ab       	std	Y+51, r26	; 0x33
    1b00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b02:	69 a9       	ldd	r22, Y+49	; 0x31
    1b04:	7a a9       	ldd	r23, Y+50	; 0x32
    1b06:	8b a9       	ldd	r24, Y+51	; 0x33
    1b08:	9c a9       	ldd	r25, Y+52	; 0x34
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <LCD_vidLatch+0x400>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	98 ab       	std	Y+48, r25	; 0x30
    1b20:	8f a7       	std	Y+47, r24	; 0x2f
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    1b24:	69 a9       	ldd	r22, Y+49	; 0x31
    1b26:	7a a9       	ldd	r23, Y+50	; 0x32
    1b28:	8b a9       	ldd	r24, Y+51	; 0x33
    1b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b40:	8f a9       	ldd	r24, Y+55	; 0x37
    1b42:	98 ad       	ldd	r25, Y+56	; 0x38
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	98 ab       	std	Y+48, r25	; 0x30
    1b62:	8f a7       	std	Y+47, r24	; 0x2f
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <LCD_vidLatch+0x460>
    1b66:	89 e1       	ldi	r24, 0x19	; 25
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9e a7       	std	Y+46, r25	; 0x2e
    1b6c:	8d a7       	std	Y+45, r24	; 0x2d
    1b6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_vidLatch+0x44e>
    1b76:	9e a7       	std	Y+46, r25	; 0x2e
    1b78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	98 ab       	std	Y+48, r25	; 0x30
    1b82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b86:	98 a9       	ldd	r25, Y+48	; 0x30
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <LCD_vidLatch+0x442>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b90:	7a a9       	ldd	r23, Y+50	; 0x32
    1b92:	8b a9       	ldd	r24, Y+51	; 0x33
    1b94:	9c a9       	ldd	r25, Y+52	; 0x34
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	98 ab       	std	Y+48, r25	; 0x30
    1ba0:	8f a7       	std	Y+47, r24	; 0x2f
    1ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba6:	9c a7       	std	Y+44, r25	; 0x2c
    1ba8:	8b a7       	std	Y+43, r24	; 0x2b
    1baa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD_vidLatch+0x48a>
    1bb2:	9c a7       	std	Y+44, r25	; 0x2c
    1bb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e2       	ldi	r26, 0x20	; 32
    1bc6:	b1 e4       	ldi	r27, 0x41	; 65
    1bc8:	8f a3       	std	Y+39, r24	; 0x27
    1bca:	98 a7       	std	Y+40, r25	; 0x28
    1bcc:	a9 a7       	std	Y+41, r26	; 0x29
    1bce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	53 e4       	ldi	r21, 0x43	; 67
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8b a3       	std	Y+35, r24	; 0x23
    1bea:	9c a3       	std	Y+36, r25	; 0x24
    1bec:	ad a3       	std	Y+37, r26	; 0x25
    1bee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <LCD_vidLatch+0x4ee>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9a a3       	std	Y+34, r25	; 0x22
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    1c12:	6b a1       	ldd	r22, Y+35	; 0x23
    1c14:	7c a1       	ldd	r23, Y+36	; 0x24
    1c16:	8d a1       	ldd	r24, Y+37	; 0x25
    1c18:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9a a3       	std	Y+34, r25	; 0x22
    1c50:	89 a3       	std	Y+33, r24	; 0x21
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <LCD_vidLatch+0x54e>
    1c54:	89 e1       	ldi	r24, 0x19	; 25
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	98 a3       	std	Y+32, r25	; 0x20
    1c5a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c5e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_vidLatch+0x53c>
    1c64:	98 a3       	std	Y+32, r25	; 0x20
    1c66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9a a3       	std	Y+34, r25	; 0x22
    1c70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	89 a1       	ldd	r24, Y+33	; 0x21
    1c74:	9a a1       	ldd	r25, Y+34	; 0x22
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <LCD_vidLatch+0x530>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c80:	8d a1       	ldd	r24, Y+37	; 0x25
    1c82:	9e a1       	ldd	r25, Y+38	; 0x26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9a a3       	std	Y+34, r25	; 0x22
    1c8e:	89 a3       	std	Y+33, r24	; 0x21
    1c90:	89 a1       	ldd	r24, Y+33	; 0x21
    1c92:	9a a1       	ldd	r25, Y+34	; 0x22
    1c94:	9e 8f       	std	Y+30, r25	; 0x1e
    1c96:	8d 8f       	std	Y+29, r24	; 0x1d
    1c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_vidLatch+0x578>
    1ca0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca2:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	eb 5a       	subi	r30, 0xAB	; 171
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	86 95       	lsr	r24
    1cae:	86 95       	lsr	r24
    1cb0:	86 95       	lsr	r24
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	91 70       	andi	r25, 0x01	; 1
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	67 e0       	ldi	r22, 0x07	; 7
    1cba:	49 2f       	mov	r20, r25
    1cbc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	eb 5a       	subi	r30, 0xAB	; 171
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	86 95       	lsr	r24
    1cca:	86 95       	lsr	r24
    1ccc:	98 2f       	mov	r25, r24
    1cce:	91 70       	andi	r25, 0x01	; 1
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	49 2f       	mov	r20, r25
    1cd6:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    1cda:	fe 01       	movw	r30, r28
    1cdc:	eb 5a       	subi	r30, 0xAB	; 171
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	86 95       	lsr	r24
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	91 70       	andi	r25, 0x01	; 1
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	65 e0       	ldi	r22, 0x05	; 5
    1cec:	49 2f       	mov	r20, r25
    1cee:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	eb 5a       	subi	r30, 0xAB	; 171
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	98 2f       	mov	r25, r24
    1cfc:	91 70       	andi	r25, 0x01	; 1
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	64 e0       	ldi	r22, 0x04	; 4
    1d02:	49 2f       	mov	r20, r25
    1d04:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e2       	ldi	r26, 0x20	; 32
    1d18:	b1 e4       	ldi	r27, 0x41	; 65
    1d1a:	89 8f       	std	Y+25, r24	; 0x19
    1d1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	69 8d       	ldd	r22, Y+25	; 0x19
    1d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4a e7       	ldi	r20, 0x7A	; 122
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8d 8b       	std	Y+21, r24	; 0x15
    1d3c:	9e 8b       	std	Y+22, r25	; 0x16
    1d3e:	af 8b       	std	Y+23, r26	; 0x17
    1d40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d42:	6d 89       	ldd	r22, Y+21	; 0x15
    1d44:	7e 89       	ldd	r23, Y+22	; 0x16
    1d46:	8f 89       	ldd	r24, Y+23	; 0x17
    1d48:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <LCD_vidLatch+0x640>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
    1d62:	3f c0       	rjmp	.+126    	; 0x1de2 <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    1d64:	6d 89       	ldd	r22, Y+21	; 0x15
    1d66:	7e 89       	ldd	r23, Y+22	; 0x16
    1d68:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	3f ef       	ldi	r19, 0xFF	; 255
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	57 e4       	ldi	r21, 0x47	; 71
    1d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	4c f5       	brge	.+82     	; 0x1dce <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	51 e4       	ldi	r21, 0x41	; 65
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <LCD_vidLatch+0x6a0>
    1da6:	89 e1       	ldi	r24, 0x19	; 25
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9a 8b       	std	Y+18, r25	; 0x12
    1dac:	89 8b       	std	Y+17, r24	; 0x11
    1dae:	89 89       	ldd	r24, Y+17	; 0x11
    1db0:	9a 89       	ldd	r25, Y+18	; 0x12
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_vidLatch+0x68e>
    1db6:	9a 8b       	std	Y+18, r25	; 0x12
    1db8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	69 f7       	brne	.-38     	; 0x1da6 <LCD_vidLatch+0x682>
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dce:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
    1de2:	8b 89       	ldd	r24, Y+19	; 0x13
    1de4:	9c 89       	ldd	r25, Y+20	; 0x14
    1de6:	98 8b       	std	Y+16, r25	; 0x10
    1de8:	8f 87       	std	Y+15, r24	; 0x0f
    1dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dec:	98 89       	ldd	r25, Y+16	; 0x10
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_vidLatch+0x6ca>
    1df2:	98 8b       	std	Y+16, r25	; 0x10
    1df4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	62 e0       	ldi	r22, 0x02	; 2
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e2       	ldi	r26, 0x20	; 32
    1e06:	b1 e4       	ldi	r27, 0x41	; 65
    1e08:	8b 87       	std	Y+11, r24	; 0x0b
    1e0a:	9c 87       	std	Y+12, r25	; 0x0c
    1e0c:	ad 87       	std	Y+13, r26	; 0x0d
    1e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	53 e4       	ldi	r21, 0x43	; 67
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8f 83       	std	Y+7, r24	; 0x07
    1e2a:	98 87       	std	Y+8, r25	; 0x08
    1e2c:	a9 87       	std	Y+9, r26	; 0x09
    1e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e30:	6f 81       	ldd	r22, Y+7	; 0x07
    1e32:	78 85       	ldd	r23, Y+8	; 0x08
    1e34:	89 85       	ldd	r24, Y+9	; 0x09
    1e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_vidLatch+0x72e>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    1e52:	6f 81       	ldd	r22, Y+7	; 0x07
    1e54:	78 85       	ldd	r23, Y+8	; 0x08
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_vidLatch+0x78e>
    1e94:	89 e1       	ldi	r24, 0x19	; 25
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_vidLatch+0x77c>
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_vidLatch+0x770>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_vidLatch+0x7b8>
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    1ee4:	cb 5a       	subi	r28, 0xAB	; 171
    1ee6:	df 4f       	sbci	r29, 0xFF	; 255
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	ab 97       	sbiw	r28, 0x2b	; 43
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1f30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f32:	98 2f       	mov	r25, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	99 27       	eor	r25, r25
    1f38:	99 1f       	adc	r25, r25
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	67 e0       	ldi	r22, 0x07	; 7
    1f3e:	49 2f       	mov	r20, r25
    1f40:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1f44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f46:	82 95       	swap	r24
    1f48:	86 95       	lsr	r24
    1f4a:	86 95       	lsr	r24
    1f4c:	83 70       	andi	r24, 0x03	; 3
    1f4e:	98 2f       	mov	r25, r24
    1f50:	91 70       	andi	r25, 0x01	; 1
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	66 e0       	ldi	r22, 0x06	; 6
    1f56:	49 2f       	mov	r20, r25
    1f58:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1f5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5e:	82 95       	swap	r24
    1f60:	86 95       	lsr	r24
    1f62:	87 70       	andi	r24, 0x07	; 7
    1f64:	98 2f       	mov	r25, r24
    1f66:	91 70       	andi	r25, 0x01	; 1
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	65 e0       	ldi	r22, 0x05	; 5
    1f6c:	49 2f       	mov	r20, r25
    1f6e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1f72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f74:	82 95       	swap	r24
    1f76:	8f 70       	andi	r24, 0x0F	; 15
    1f78:	98 2f       	mov	r25, r24
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	64 e0       	ldi	r22, 0x04	; 4
    1f80:	49 2f       	mov	r20, r25
    1f82:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    1f86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f88:	88 32       	cpi	r24, 0x28	; 40
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <LCD_invidSendCommend+0x92>
    1f8c:	a7 c0       	rjmp	.+334    	; 0x20dc <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	62 e0       	ldi	r22, 0x02	; 2
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a0 e2       	ldi	r26, 0x20	; 32
    1f9e:	b1 e4       	ldi	r27, 0x41	; 65
    1fa0:	8f a3       	std	Y+39, r24	; 0x27
    1fa2:	98 a7       	std	Y+40, r25	; 0x28
    1fa4:	a9 a7       	std	Y+41, r26	; 0x29
    1fa6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	6f a1       	ldd	r22, Y+39	; 0x27
    1faa:	78 a5       	ldd	r23, Y+40	; 0x28
    1fac:	89 a5       	ldd	r24, Y+41	; 0x29
    1fae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a e7       	ldi	r20, 0x7A	; 122
    1fb6:	53 e4       	ldi	r21, 0x43	; 67
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8b a3       	std	Y+35, r24	; 0x23
    1fc2:	9c a3       	std	Y+36, r25	; 0x24
    1fc4:	ad a3       	std	Y+37, r26	; 0x25
    1fc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fca:	7c a1       	ldd	r23, Y+36	; 0x24
    1fcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fce:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_invidSendCommend+0xee>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9a a3       	std	Y+34, r25	; 0x22
    1fe6:	89 a3       	std	Y+33, r24	; 0x21
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    1fea:	6b a1       	ldd	r22, Y+35	; 0x23
    1fec:	7c a1       	ldd	r23, Y+36	; 0x24
    1fee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	4c f5       	brge	.+82     	; 0x2054 <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	6f a1       	ldd	r22, Y+39	; 0x27
    2004:	78 a5       	ldd	r23, Y+40	; 0x28
    2006:	89 a5       	ldd	r24, Y+41	; 0x29
    2008:	9a a5       	ldd	r25, Y+42	; 0x2a
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9a a3       	std	Y+34, r25	; 0x22
    2028:	89 a3       	std	Y+33, r24	; 0x21
    202a:	0f c0       	rjmp	.+30     	; 0x204a <LCD_invidSendCommend+0x14e>
    202c:	89 e1       	ldi	r24, 0x19	; 25
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	98 a3       	std	Y+32, r25	; 0x20
    2032:	8f 8f       	std	Y+31, r24	; 0x1f
    2034:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2036:	98 a1       	ldd	r25, Y+32	; 0x20
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_invidSendCommend+0x13c>
    203c:	98 a3       	std	Y+32, r25	; 0x20
    203e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	89 a1       	ldd	r24, Y+33	; 0x21
    2042:	9a a1       	ldd	r25, Y+34	; 0x22
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f7       	brne	.-38     	; 0x202c <LCD_invidSendCommend+0x130>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	6b a1       	ldd	r22, Y+35	; 0x23
    2056:	7c a1       	ldd	r23, Y+36	; 0x24
    2058:	8d a1       	ldd	r24, Y+37	; 0x25
    205a:	9e a1       	ldd	r25, Y+38	; 0x26
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9a a3       	std	Y+34, r25	; 0x22
    2066:	89 a3       	std	Y+33, r24	; 0x21
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	9a a1       	ldd	r25, Y+34	; 0x22
    206c:	9e 8f       	std	Y+30, r25	; 0x1e
    206e:	8d 8f       	std	Y+29, r24	; 0x1d
    2070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2072:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_invidSendCommend+0x178>
    2078:	9e 8f       	std	Y+30, r25	; 0x1e
    207a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    207c:	83 e0       	ldi	r24, 0x03	; 3
    207e:	62 e0       	ldi	r22, 0x02	; 2
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2086:	8b a5       	ldd	r24, Y+43	; 0x2b
    2088:	98 2f       	mov	r25, r24
    208a:	99 1f       	adc	r25, r25
    208c:	99 27       	eor	r25, r25
    208e:	99 1f       	adc	r25, r25
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	67 e0       	ldi	r22, 0x07	; 7
    2094:	49 2f       	mov	r20, r25
    2096:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    209a:	8b a5       	ldd	r24, Y+43	; 0x2b
    209c:	82 95       	swap	r24
    209e:	86 95       	lsr	r24
    20a0:	86 95       	lsr	r24
    20a2:	83 70       	andi	r24, 0x03	; 3
    20a4:	98 2f       	mov	r25, r24
    20a6:	91 70       	andi	r25, 0x01	; 1
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	66 e0       	ldi	r22, 0x06	; 6
    20ac:	49 2f       	mov	r20, r25
    20ae:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    20b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b4:	82 95       	swap	r24
    20b6:	86 95       	lsr	r24
    20b8:	87 70       	andi	r24, 0x07	; 7
    20ba:	98 2f       	mov	r25, r24
    20bc:	91 70       	andi	r25, 0x01	; 1
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	65 e0       	ldi	r22, 0x05	; 5
    20c2:	49 2f       	mov	r20, r25
    20c4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    20c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ca:	82 95       	swap	r24
    20cc:	8f 70       	andi	r24, 0x0F	; 15
    20ce:	98 2f       	mov	r25, r24
    20d0:	91 70       	andi	r25, 0x01	; 1
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	64 e0       	ldi	r22, 0x04	; 4
    20d6:	49 2f       	mov	r20, r25
    20d8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	62 e0       	ldi	r22, 0x02	; 2
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e2       	ldi	r26, 0x20	; 32
    20ec:	b1 e4       	ldi	r27, 0x41	; 65
    20ee:	89 8f       	std	Y+25, r24	; 0x19
    20f0:	9a 8f       	std	Y+26, r25	; 0x1a
    20f2:	ab 8f       	std	Y+27, r26	; 0x1b
    20f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	69 8d       	ldd	r22, Y+25	; 0x19
    20f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a e7       	ldi	r20, 0x7A	; 122
    2104:	53 e4       	ldi	r21, 0x43	; 67
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8d 8b       	std	Y+21, r24	; 0x15
    2110:	9e 8b       	std	Y+22, r25	; 0x16
    2112:	af 8b       	std	Y+23, r26	; 0x17
    2114:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2116:	6d 89       	ldd	r22, Y+21	; 0x15
    2118:	7e 89       	ldd	r23, Y+22	; 0x16
    211a:	8f 89       	ldd	r24, Y+23	; 0x17
    211c:	98 8d       	ldd	r25, Y+24	; 0x18
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 8b       	std	Y+20, r25	; 0x14
    2134:	8b 8b       	std	Y+19, r24	; 0x13
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    2138:	6d 89       	ldd	r22, Y+21	; 0x15
    213a:	7e 89       	ldd	r23, Y+22	; 0x16
    213c:	8f 89       	ldd	r24, Y+23	; 0x17
    213e:	98 8d       	ldd	r25, Y+24	; 0x18
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	69 8d       	ldd	r22, Y+25	; 0x19
    2152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9c 8b       	std	Y+20, r25	; 0x14
    2176:	8b 8b       	std	Y+19, r24	; 0x13
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <LCD_invidSendCommend+0x29c>
    217a:	89 e1       	ldi	r24, 0x19	; 25
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
    2182:	89 89       	ldd	r24, Y+17	; 0x11
    2184:	9a 89       	ldd	r25, Y+18	; 0x12
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_invidSendCommend+0x28a>
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8b 89       	ldd	r24, Y+19	; 0x13
    2190:	9c 89       	ldd	r25, Y+20	; 0x14
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8b 89       	ldd	r24, Y+19	; 0x13
    219a:	9c 89       	ldd	r25, Y+20	; 0x14
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <LCD_invidSendCommend+0x27e>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9c 8b       	std	Y+20, r25	; 0x14
    21b4:	8b 8b       	std	Y+19, r24	; 0x13
    21b6:	8b 89       	ldd	r24, Y+19	; 0x13
    21b8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ba:	98 8b       	std	Y+16, r25	; 0x10
    21bc:	8f 87       	std	Y+15, r24	; 0x0f
    21be:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c0:	98 89       	ldd	r25, Y+16	; 0x10
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_invidSendCommend+0x2c6>
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    21d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d6:	86 95       	lsr	r24
    21d8:	86 95       	lsr	r24
    21da:	86 95       	lsr	r24
    21dc:	98 2f       	mov	r25, r24
    21de:	91 70       	andi	r25, 0x01	; 1
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	67 e0       	ldi	r22, 0x07	; 7
    21e4:	49 2f       	mov	r20, r25
    21e6:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    21ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ec:	86 95       	lsr	r24
    21ee:	86 95       	lsr	r24
    21f0:	98 2f       	mov	r25, r24
    21f2:	91 70       	andi	r25, 0x01	; 1
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	66 e0       	ldi	r22, 0x06	; 6
    21f8:	49 2f       	mov	r20, r25
    21fa:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    21fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2200:	86 95       	lsr	r24
    2202:	98 2f       	mov	r25, r24
    2204:	91 70       	andi	r25, 0x01	; 1
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	65 e0       	ldi	r22, 0x05	; 5
    220a:	49 2f       	mov	r20, r25
    220c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    2210:	8b a5       	ldd	r24, Y+43	; 0x2b
    2212:	98 2f       	mov	r25, r24
    2214:	91 70       	andi	r25, 0x01	; 1
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	64 e0       	ldi	r22, 0x04	; 4
    221a:	49 2f       	mov	r20, r25
    221c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2220:	83 e0       	ldi	r24, 0x03	; 3
    2222:	62 e0       	ldi	r22, 0x02	; 2
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e2       	ldi	r26, 0x20	; 32
    2230:	b1 e4       	ldi	r27, 0x41	; 65
    2232:	8b 87       	std	Y+11, r24	; 0x0b
    2234:	9c 87       	std	Y+12, r25	; 0x0c
    2236:	ad 87       	std	Y+13, r26	; 0x0d
    2238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a e7       	ldi	r20, 0x7A	; 122
    2248:	53 e4       	ldi	r21, 0x43	; 67
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8f 83       	std	Y+7, r24	; 0x07
    2254:	98 87       	std	Y+8, r25	; 0x08
    2256:	a9 87       	std	Y+9, r26	; 0x09
    2258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	2c f4       	brge	.+10     	; 0x227c <LCD_invidSendCommend+0x380>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	4c f5       	brge	.+82     	; 0x22e6 <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	7c 85       	ldd	r23, Y+12	; 0x0c
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <LCD_invidSendCommend+0x3e0>
    22be:	89 e1       	ldi	r24, 0x19	; 25
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	8b 83       	std	Y+3, r24	; 0x03
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_invidSendCommend+0x3ce>
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	69 f7       	brne	.-38     	; 0x22be <LCD_invidSendCommend+0x3c2>
    22e4:	14 c0       	rjmp	.+40     	; 0x230e <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a 81       	ldd	r25, Y+2	; 0x02
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_invidSendCommend+0x40a>
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
}
    2318:	ab 96       	adiw	r28, 0x2b	; 43
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LCD_Clear>:
void LCD_Clear(){
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62

	LCD_enuSendCommand(LCD_CLEAR);
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_enuSendCommand>



}
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <Keypad_enuInit>:
#include "KPD_priv.h"

#include <util/delay.h>


ES_t Keypad_enuInit(void){
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2348:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorstate =   DIO_enuSetPinDirection(C1_PORT,C1_PIN, DIO_u8OUTPUT);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    2354:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C2_PORT,C2_PIN, DIO_u8OUTPUT);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    2360:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C3_PORT,C3_PIN, DIO_u8OUTPUT);
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    236c:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C4_PORT,C4_PIN, DIO_u8OUTPUT);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    2378:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinDirection(R1_PORT,R1_PIN, DIO_u8INPUT);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	64 e0       	ldi	r22, 0x04	; 4
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    2384:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R2_PORT,R2_PIN, DIO_u8INPUT);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	65 e0       	ldi	r22, 0x05	; 5
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    2390:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R3_PORT,R3_PIN, DIO_u8INPUT);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	66 e0       	ldi	r22, 0x06	; 6
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    239c:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R4_PORT,R4_PIN, DIO_u8INPUT);
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	67 e0       	ldi	r22, 0x07	; 7
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enuSetPinDirection>
    23a8:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinValue(C1_PORT,C1_PIN, DIO_u8HIGH);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	41 e0       	ldi	r20, 0x01	; 1
    23b0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23b4:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C2_PORT,C2_PIN, DIO_u8HIGH);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23c0:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C3_PORT,C3_PIN, DIO_u8HIGH);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23cc:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C4_PORT,C4_PIN, DIO_u8HIGH);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	63 e0       	ldi	r22, 0x03	; 3
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23d8:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinValue(R1_PORT,R1_PIN, DIO_u8PULL_UP);
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	64 e0       	ldi	r22, 0x04	; 4
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23e4:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R2_PORT,R2_PIN, DIO_u8PULL_UP);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	65 e0       	ldi	r22, 0x05	; 5
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23f0:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R3_PORT,R3_PIN, DIO_u8PULL_UP);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	66 e0       	ldi	r22, 0x06	; 6
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    23fc:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R4_PORT,R4_PIN, DIO_u8PULL_UP);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	67 e0       	ldi	r22, 0x07	; 7
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
    2408:	89 83       	std	Y+1, r24	; 0x01

	 Local_enuErrorstate  =ES_OK;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	89 83       	std	Y+1, r24	; 0x01


		return Local_enuErrorstate;
    240e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue){
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	ea 97       	sbiw	r28, 0x3a	; 58
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	9c ab       	std	Y+52, r25	; 0x34
    242e:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorstate=ES_NOK;
    2430:	19 8a       	std	Y+17, r1	; 0x11
			if( Copy_pu8KeyValue!=NULL){
    2432:	8b a9       	ldd	r24, Y+51	; 0x33
    2434:	9c a9       	ldd	r25, Y+52	; 0x34
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	09 f4       	brne	.+2      	; 0x243c <Keypad_enuGetPressedKey+0x24>
    243a:	64 c1       	rjmp	.+712    	; 0x2704 <Keypad_enuGetPressedKey+0x2ec>
				    u8 Local_Au8RowPins [ROWS_NUM] = { R1_PIN , R2_PIN , R3_PIN , R4_PIN };
    243c:	84 e0       	ldi	r24, 0x04	; 4
    243e:	8a 8b       	std	Y+18, r24	; 0x12
    2440:	85 e0       	ldi	r24, 0x05	; 5
    2442:	8b 8b       	std	Y+19, r24	; 0x13
    2444:	86 e0       	ldi	r24, 0x06	; 6
    2446:	8c 8b       	std	Y+20, r24	; 0x14
    2448:	87 e0       	ldi	r24, 0x07	; 7
    244a:	8d 8b       	std	Y+21, r24	; 0x15
				    u8 Local_Au8ColPins [COLS_NUM] = { C1_PIN , C2_PIN , C3_PIN , C4_PIN };
    244c:	1e 8a       	std	Y+22, r1	; 0x16
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	8f 8b       	std	Y+23, r24	; 0x17
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	88 8f       	std	Y+24, r24	; 0x18
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	89 8f       	std	Y+25, r24	; 0x19
				    u8 Local_Au8RowPorts[ROWS_NUM] = { R1_PORT , R2_PORT , R3_PORT , R4_PORT };
    245a:	1a 8e       	std	Y+26, r1	; 0x1a
    245c:	1b 8e       	std	Y+27, r1	; 0x1b
    245e:	1c 8e       	std	Y+28, r1	; 0x1c
    2460:	1d 8e       	std	Y+29, r1	; 0x1d
				    u8 Local_Au8ColPorts[COLS_NUM] = { C1_PORT , C2_PORT , C3_PORT , C4_PORT };
    2462:	1e 8e       	std	Y+30, r1	; 0x1e
    2464:	1f 8e       	std	Y+31, r1	; 0x1f
    2466:	18 a2       	std	Y+32, r1	; 0x20
    2468:	19 a2       	std	Y+33, r1	; 0x21

						*Copy_pu8KeyValue = KEY_NOT_PRESS;
    246a:	eb a9       	ldd	r30, Y+51	; 0x33
    246c:	fc a9       	ldd	r31, Y+52	; 0x34
    246e:	8f ef       	ldi	r24, 0xFF	; 255
    2470:	80 83       	st	Z, r24
						u8 Local_u8PinValue = 0xff;
    2472:	8f ef       	ldi	r24, 0xFF	; 255
    2474:	8a a3       	std	Y+34, r24	; 0x22

				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    2476:	ce 01       	movw	r24, r28
    2478:	83 96       	adiw	r24, 0x23	; 35
    247a:	9f ab       	std	Y+55, r25	; 0x37
    247c:	8e ab       	std	Y+54, r24	; 0x36
    247e:	e2 e7       	ldi	r30, 0x72	; 114
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	f9 af       	std	Y+57, r31	; 0x39
    2484:	e8 af       	std	Y+56, r30	; 0x38
    2486:	f0 e1       	ldi	r31, 0x10	; 16
    2488:	fa af       	std	Y+58, r31	; 0x3a
    248a:	e8 ad       	ldd	r30, Y+56	; 0x38
    248c:	f9 ad       	ldd	r31, Y+57	; 0x39
    248e:	00 80       	ld	r0, Z
    2490:	88 ad       	ldd	r24, Y+56	; 0x38
    2492:	99 ad       	ldd	r25, Y+57	; 0x39
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	99 af       	std	Y+57, r25	; 0x39
    2498:	88 af       	std	Y+56, r24	; 0x38
    249a:	ee a9       	ldd	r30, Y+54	; 0x36
    249c:	ff a9       	ldd	r31, Y+55	; 0x37
    249e:	00 82       	st	Z, r0
    24a0:	8e a9       	ldd	r24, Y+54	; 0x36
    24a2:	9f a9       	ldd	r25, Y+55	; 0x37
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	9f ab       	std	Y+55, r25	; 0x37
    24a8:	8e ab       	std	Y+54, r24	; 0x36
    24aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    24ac:	91 50       	subi	r25, 0x01	; 1
    24ae:	9a af       	std	Y+58, r25	; 0x3a
    24b0:	ea ad       	ldd	r30, Y+58	; 0x3a
    24b2:	ee 23       	and	r30, r30
    24b4:	51 f7       	brne	.-44     	; 0x248a <Keypad_enuGetPressedKey+0x72>
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
    24b6:	18 8a       	std	Y+16, r1	; 0x10
    24b8:	20 c1       	rjmp	.+576    	; 0x26fa <Keypad_enuGetPressedKey+0x2e2>
					  //active col
					   DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it],Local_Au8ColPins[Local_col_it],DIO_u8LOW);
    24ba:	88 89       	ldd	r24, Y+16	; 0x10
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	ce 01       	movw	r24, r28
    24c2:	4e 96       	adiw	r24, 0x1e	; 30
    24c4:	fc 01       	movw	r30, r24
    24c6:	e2 0f       	add	r30, r18
    24c8:	f3 1f       	adc	r31, r19
    24ca:	40 81       	ld	r20, Z
    24cc:	88 89       	ldd	r24, Y+16	; 0x10
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	ce 01       	movw	r24, r28
    24d4:	46 96       	adiw	r24, 0x16	; 22
    24d6:	fc 01       	movw	r30, r24
    24d8:	e2 0f       	add	r30, r18
    24da:	f3 1f       	adc	r31, r19
    24dc:	90 81       	ld	r25, Z
    24de:	84 2f       	mov	r24, r20
    24e0:	69 2f       	mov	r22, r25
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
					   for(Local_row_it=0;Local_row_it<ROWS_NUM;Local_row_it++){
    24e8:	1f 86       	std	Y+15, r1	; 0x0f
    24ea:	e9 c0       	rjmp	.+466    	; 0x26be <Keypad_enuGetPressedKey+0x2a6>
						   DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    24ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	ce 01       	movw	r24, r28
    24f4:	4a 96       	adiw	r24, 0x1a	; 26
    24f6:	fc 01       	movw	r30, r24
    24f8:	e2 0f       	add	r30, r18
    24fa:	f3 1f       	adc	r31, r19
    24fc:	40 81       	ld	r20, Z
    24fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	ce 01       	movw	r24, r28
    2506:	42 96       	adiw	r24, 0x12	; 18
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	90 81       	ld	r25, Z
    2510:	9e 01       	movw	r18, r28
    2512:	2e 5d       	subi	r18, 0xDE	; 222
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	84 2f       	mov	r24, r20
    2518:	69 2f       	mov	r22, r25
    251a:	a9 01       	movw	r20, r18
    251c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <DIO_enuGetPinValue>
						   if (! Local_u8PinValue)
    2520:	8a a1       	ldd	r24, Y+34	; 0x22
    2522:	88 23       	and	r24, r24
    2524:	09 f0       	breq	.+2      	; 0x2528 <Keypad_enuGetPressedKey+0x110>
    2526:	c8 c0       	rjmp	.+400    	; 0x26b8 <Keypad_enuGetPressedKey+0x2a0>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 e2       	ldi	r26, 0x20	; 32
    252e:	b1 e4       	ldi	r27, 0x41	; 65
    2530:	8b 87       	std	Y+11, r24	; 0x0b
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	ad 87       	std	Y+13, r26	; 0x0d
    2536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8f 83       	std	Y+7, r24	; 0x07
    2552:	98 87       	std	Y+8, r25	; 0x08
    2554:	a9 87       	std	Y+9, r26	; 0x09
    2556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <Keypad_enuGetPressedKey+0x162>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <Keypad_enuGetPressedKey+0x1e0>
	else if (__tmp > 65535)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <Keypad_enuGetPressedKey+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <Keypad_enuGetPressedKey+0x1c2>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <Keypad_enuGetPressedKey+0x1b0>
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <Keypad_enuGetPressedKey+0x1a4>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <Keypad_enuGetPressedKey+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <Keypad_enuGetPressedKey+0x1ec>
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
						   				{
						   					_delay_ms(10);
						   					DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    260c:	8f 85       	ldd	r24, Y+15	; 0x0f
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	ce 01       	movw	r24, r28
    2614:	4a 96       	adiw	r24, 0x1a	; 26
    2616:	fc 01       	movw	r30, r24
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	40 81       	ld	r20, Z
    261e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	ce 01       	movw	r24, r28
    2626:	42 96       	adiw	r24, 0x12	; 18
    2628:	fc 01       	movw	r30, r24
    262a:	e2 0f       	add	r30, r18
    262c:	f3 1f       	adc	r31, r19
    262e:	90 81       	ld	r25, Z
    2630:	9e 01       	movw	r18, r28
    2632:	2e 5d       	subi	r18, 0xDE	; 222
    2634:	3f 4f       	sbci	r19, 0xFF	; 255
    2636:	84 2f       	mov	r24, r20
    2638:	69 2f       	mov	r22, r25
    263a:	a9 01       	movw	r20, r18
    263c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <DIO_enuGetPinValue>
						   					if (! Local_u8PinValue)
    2640:	8a a1       	ldd	r24, Y+34	; 0x22
    2642:	88 23       	and	r24, r24
    2644:	c9 f5       	brne	.+114    	; 0x26b8 <Keypad_enuGetPressedKey+0x2a0>
    2646:	1a c0       	rjmp	.+52     	; 0x267c <Keypad_enuGetPressedKey+0x264>
						   					{
						   						while (! Local_u8PinValue)
						   						{
						   							DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    2648:	8f 85       	ldd	r24, Y+15	; 0x0f
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	ce 01       	movw	r24, r28
    2650:	4a 96       	adiw	r24, 0x1a	; 26
    2652:	fc 01       	movw	r30, r24
    2654:	e2 0f       	add	r30, r18
    2656:	f3 1f       	adc	r31, r19
    2658:	40 81       	ld	r20, Z
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	ce 01       	movw	r24, r28
    2662:	42 96       	adiw	r24, 0x12	; 18
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	90 81       	ld	r25, Z
    266c:	9e 01       	movw	r18, r28
    266e:	2e 5d       	subi	r18, 0xDE	; 222
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	84 2f       	mov	r24, r20
    2674:	69 2f       	mov	r22, r25
    2676:	a9 01       	movw	r20, r18
    2678:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <DIO_enuGetPinValue>
						   				{
						   					_delay_ms(10);
						   					DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
						   					if (! Local_u8PinValue)
						   					{
						   						while (! Local_u8PinValue)
    267c:	8a a1       	ldd	r24, Y+34	; 0x22
    267e:	88 23       	and	r24, r24
    2680:	19 f3       	breq	.-58     	; 0x2648 <Keypad_enuGetPressedKey+0x230>
						   						{
						   							DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
						   						}

						   						*Copy_pu8KeyValue = Local_Au8KeyValues[Local_row_it][Local_col_it];
    2682:	8f 85       	ldd	r24, Y+15	; 0x0f
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	88 89       	ldd	r24, Y+16	; 0x10
    268a:	48 2f       	mov	r20, r24
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	22 0f       	add	r18, r18
    2690:	33 1f       	adc	r19, r19
    2692:	22 0f       	add	r18, r18
    2694:	33 1f       	adc	r19, r19
    2696:	ce 01       	movw	r24, r28
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	84 0f       	add	r24, r20
    26a0:	95 1f       	adc	r25, r21
    26a2:	fc 01       	movw	r30, r24
    26a4:	b2 96       	adiw	r30, 0x22	; 34
    26a6:	80 81       	ld	r24, Z
    26a8:	eb a9       	ldd	r30, Y+51	; 0x33
    26aa:	fc a9       	ldd	r31, Y+52	; 0x34
    26ac:	80 83       	st	Z, r24

						   						return Local_enuErrorstate=ES_OK;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	89 8b       	std	Y+17, r24	; 0x11
    26b2:	f9 89       	ldd	r31, Y+17	; 0x11
    26b4:	fd ab       	std	Y+53, r31	; 0x35
    26b6:	2a c0       	rjmp	.+84     	; 0x270c <Keypad_enuGetPressedKey+0x2f4>
				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
					  //active col
					   DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it],Local_Au8ColPins[Local_col_it],DIO_u8LOW);
					   for(Local_row_it=0;Local_row_it<ROWS_NUM;Local_row_it++){
    26b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	84 30       	cpi	r24, 0x04	; 4
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <Keypad_enuGetPressedKey+0x2ae>
    26c4:	13 cf       	rjmp	.-474    	; 0x24ec <Keypad_enuGetPressedKey+0xd4>
						   					}
						   				}
						   			}
					   //deactive

						   			DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it] , Local_Au8ColPins[Local_col_it] , DIO_u8HIGH);
    26c6:	88 89       	ldd	r24, Y+16	; 0x10
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	ce 01       	movw	r24, r28
    26ce:	4e 96       	adiw	r24, 0x1e	; 30
    26d0:	fc 01       	movw	r30, r24
    26d2:	e2 0f       	add	r30, r18
    26d4:	f3 1f       	adc	r31, r19
    26d6:	40 81       	ld	r20, Z
    26d8:	88 89       	ldd	r24, Y+16	; 0x10
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	ce 01       	movw	r24, r28
    26e0:	46 96       	adiw	r24, 0x16	; 22
    26e2:	fc 01       	movw	r30, r24
    26e4:	e2 0f       	add	r30, r18
    26e6:	f3 1f       	adc	r31, r19
    26e8:	90 81       	ld	r25, Z
    26ea:	84 2f       	mov	r24, r20
    26ec:	69 2f       	mov	r22, r25
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <DIO_enuSetPinValue>
						*Copy_pu8KeyValue = KEY_NOT_PRESS;
						u8 Local_u8PinValue = 0xff;

				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
    26f4:	88 89       	ldd	r24, Y+16	; 0x10
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	88 8b       	std	Y+16, r24	; 0x10
    26fa:	88 89       	ldd	r24, Y+16	; 0x10
    26fc:	84 30       	cpi	r24, 0x04	; 4
    26fe:	08 f4       	brcc	.+2      	; 0x2702 <Keypad_enuGetPressedKey+0x2ea>
    2700:	dc ce       	rjmp	.-584    	; 0x24ba <Keypad_enuGetPressedKey+0xa2>
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <Keypad_enuGetPressedKey+0x2f0>




			else{
				 Local_enuErrorstate=ES_NULL_POINTER;
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	89 8b       	std	Y+17, r24	; 0x11
			}


			return Local_enuErrorstate;
    2708:	89 89       	ldd	r24, Y+17	; 0x11
    270a:	8d ab       	std	Y+53, r24	; 0x35
    270c:	8d a9       	ldd	r24, Y+53	; 0x35

}
    270e:	ea 96       	adiw	r28, 0x3a	; 58
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	0f 92       	push	r0
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    272a:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    272c:	ea e3       	ldi	r30, 0x3A	; 58
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	8f ef       	ldi	r24, 0xFF	; 255
    2732:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    2734:	e7 e3       	ldi	r30, 0x37	; 55
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 ef       	ldi	r24, 0xF0	; 240
    273a:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    273c:	e4 e3       	ldi	r30, 0x34	; 52
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	8f ef       	ldi	r24, 0xFF	; 255
    2742:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    2744:	e1 e3       	ldi	r30, 0x31	; 49
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	8f ed       	ldi	r24, 0xDF	; 223
    274a:	80 83       	st	Z, r24

	    PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    274c:	eb e3       	ldi	r30, 0x3B	; 59
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	10 82       	st	Z, r1
		PORTB =CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    2752:	e8 e3       	ldi	r30, 0x38	; 56
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	8f ef       	ldi	r24, 0xFF	; 255
    2758:	80 83       	st	Z, r24
		PORTC =CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    275a:	e5 e3       	ldi	r30, 0x35	; 53
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	10 82       	st	Z, r1
		PORTD =CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    2760:	e2 e3       	ldi	r30, 0x32	; 50
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	88 e5       	ldi	r24, 0x58	; 88
    2766:	80 83       	st	Z, r24

	Local_enuErrorstate = ES_OK;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    276c:	89 81       	ldd	r24, Y+1	; 0x01
}
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <DIO_enuSetPortDirection+0x6>
    277c:	00 d0       	rcall	.+0      	; 0x277e <DIO_enuSetPortDirection+0x8>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2788:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	84 30       	cpi	r24, 0x04	; 4
    278e:	a8 f5       	brcc	.+106    	; 0x27fa <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	3d 83       	std	Y+5, r19	; 0x05
    2798:	2c 83       	std	Y+4, r18	; 0x04
    279a:	8c 81       	ldd	r24, Y+4	; 0x04
    279c:	9d 81       	ldd	r25, Y+5	; 0x05
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	91 05       	cpc	r25, r1
    27a2:	d1 f0       	breq	.+52     	; 0x27d8 <DIO_enuSetPortDirection+0x62>
    27a4:	2c 81       	ldd	r18, Y+4	; 0x04
    27a6:	3d 81       	ldd	r19, Y+5	; 0x05
    27a8:	22 30       	cpi	r18, 0x02	; 2
    27aa:	31 05       	cpc	r19, r1
    27ac:	2c f4       	brge	.+10     	; 0x27b8 <DIO_enuSetPortDirection+0x42>
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	9d 81       	ldd	r25, Y+5	; 0x05
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	61 f0       	breq	.+24     	; 0x27ce <DIO_enuSetPortDirection+0x58>
    27b6:	1e c0       	rjmp	.+60     	; 0x27f4 <DIO_enuSetPortDirection+0x7e>
    27b8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ba:	3d 81       	ldd	r19, Y+5	; 0x05
    27bc:	22 30       	cpi	r18, 0x02	; 2
    27be:	31 05       	cpc	r19, r1
    27c0:	81 f0       	breq	.+32     	; 0x27e2 <DIO_enuSetPortDirection+0x6c>
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	83 30       	cpi	r24, 0x03	; 3
    27c8:	91 05       	cpc	r25, r1
    27ca:	81 f0       	breq	.+32     	; 0x27ec <DIO_enuSetPortDirection+0x76>
    27cc:	13 c0       	rjmp	.+38     	; 0x27f4 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    27ce:	ea e3       	ldi	r30, 0x3A	; 58
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	80 83       	st	Z, r24
    27d6:	0e c0       	rjmp	.+28     	; 0x27f4 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    27d8:	e7 e3       	ldi	r30, 0x37	; 55
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	80 83       	st	Z, r24
    27e0:	09 c0       	rjmp	.+18     	; 0x27f4 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    27e2:	e4 e3       	ldi	r30, 0x34	; 52
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	80 83       	st	Z, r24
    27ea:	04 c0       	rjmp	.+8      	; 0x27f4 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    27ec:	e1 e3       	ldi	r30, 0x31	; 49
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <DIO_enuSetPortValue+0x6>
    2816:	00 d0       	rcall	.+0      	; 0x2818 <DIO_enuSetPortValue+0x8>
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	8a 83       	std	Y+2, r24	; 0x02
    2820:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2822:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	84 30       	cpi	r24, 0x04	; 4
    2828:	a8 f5       	brcc	.+106    	; 0x2894 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	3d 83       	std	Y+5, r19	; 0x05
    2832:	2c 83       	std	Y+4, r18	; 0x04
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	9d 81       	ldd	r25, Y+5	; 0x05
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	91 05       	cpc	r25, r1
    283c:	d1 f0       	breq	.+52     	; 0x2872 <DIO_enuSetPortValue+0x62>
    283e:	2c 81       	ldd	r18, Y+4	; 0x04
    2840:	3d 81       	ldd	r19, Y+5	; 0x05
    2842:	22 30       	cpi	r18, 0x02	; 2
    2844:	31 05       	cpc	r19, r1
    2846:	2c f4       	brge	.+10     	; 0x2852 <DIO_enuSetPortValue+0x42>
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	9d 81       	ldd	r25, Y+5	; 0x05
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	61 f0       	breq	.+24     	; 0x2868 <DIO_enuSetPortValue+0x58>
    2850:	1e c0       	rjmp	.+60     	; 0x288e <DIO_enuSetPortValue+0x7e>
    2852:	2c 81       	ldd	r18, Y+4	; 0x04
    2854:	3d 81       	ldd	r19, Y+5	; 0x05
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	81 f0       	breq	.+32     	; 0x287c <DIO_enuSetPortValue+0x6c>
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9d 81       	ldd	r25, Y+5	; 0x05
    2860:	83 30       	cpi	r24, 0x03	; 3
    2862:	91 05       	cpc	r25, r1
    2864:	81 f0       	breq	.+32     	; 0x2886 <DIO_enuSetPortValue+0x76>
    2866:	13 c0       	rjmp	.+38     	; 0x288e <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    2868:	eb e3       	ldi	r30, 0x3B	; 59
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	80 83       	st	Z, r24
    2870:	0e c0       	rjmp	.+28     	; 0x288e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    2872:	e8 e3       	ldi	r30, 0x38	; 56
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	80 83       	st	Z, r24
    287a:	09 c0       	rjmp	.+18     	; 0x288e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    287c:	e5 e3       	ldi	r30, 0x35	; 53
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	80 83       	st	Z, r24
    2884:	04 c0       	rjmp	.+8      	; 0x288e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    2886:	e2 e3       	ldi	r30, 0x32	; 50
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2898:	89 81       	ldd	r24, Y+1	; 0x01
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <DIO_enuTogPortValue+0x6>
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <DIO_enuTogPortValue+0x8>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    28b8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	84 30       	cpi	r24, 0x04	; 4
    28be:	08 f0       	brcs	.+2      	; 0x28c2 <DIO_enuTogPortValue+0x18>
    28c0:	41 c0       	rjmp	.+130    	; 0x2944 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	3c 83       	std	Y+4, r19	; 0x04
    28ca:	2b 83       	std	Y+3, r18	; 0x03
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	9c 81       	ldd	r25, Y+4	; 0x04
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	91 05       	cpc	r25, r1
    28d4:	e9 f0       	breq	.+58     	; 0x2910 <DIO_enuTogPortValue+0x66>
    28d6:	2b 81       	ldd	r18, Y+3	; 0x03
    28d8:	3c 81       	ldd	r19, Y+4	; 0x04
    28da:	22 30       	cpi	r18, 0x02	; 2
    28dc:	31 05       	cpc	r19, r1
    28de:	2c f4       	brge	.+10     	; 0x28ea <DIO_enuTogPortValue+0x40>
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	61 f0       	breq	.+24     	; 0x2900 <DIO_enuTogPortValue+0x56>
    28e8:	2a c0       	rjmp	.+84     	; 0x293e <DIO_enuTogPortValue+0x94>
    28ea:	2b 81       	ldd	r18, Y+3	; 0x03
    28ec:	3c 81       	ldd	r19, Y+4	; 0x04
    28ee:	22 30       	cpi	r18, 0x02	; 2
    28f0:	31 05       	cpc	r19, r1
    28f2:	b1 f0       	breq	.+44     	; 0x2920 <DIO_enuTogPortValue+0x76>
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	83 30       	cpi	r24, 0x03	; 3
    28fa:	91 05       	cpc	r25, r1
    28fc:	c9 f0       	breq	.+50     	; 0x2930 <DIO_enuTogPortValue+0x86>
    28fe:	1f c0       	rjmp	.+62     	; 0x293e <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    2900:	ab e3       	ldi	r26, 0x3B	; 59
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	eb e3       	ldi	r30, 0x3B	; 59
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	80 95       	com	r24
    290c:	8c 93       	st	X, r24
    290e:	17 c0       	rjmp	.+46     	; 0x293e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    2910:	a8 e3       	ldi	r26, 0x38	; 56
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e8 e3       	ldi	r30, 0x38	; 56
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	80 95       	com	r24
    291c:	8c 93       	st	X, r24
    291e:	0f c0       	rjmp	.+30     	; 0x293e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    2920:	a5 e3       	ldi	r26, 0x35	; 53
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e5 e3       	ldi	r30, 0x35	; 53
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	80 95       	com	r24
    292c:	8c 93       	st	X, r24
    292e:	07 c0       	rjmp	.+14     	; 0x293e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    2930:	a2 e3       	ldi	r26, 0x32	; 50
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e2 e3       	ldi	r30, 0x32	; 50
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	80 95       	com	r24
    293c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2948:	89 81       	ldd	r24, Y+1	; 0x01
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	00 d0       	rcall	.+0      	; 0x295e <DIO_enuGetPortValue+0x6>
    295e:	00 d0       	rcall	.+0      	; 0x2960 <DIO_enuGetPortValue+0x8>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <DIO_enuGetPortValue+0xa>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	7c 83       	std	Y+4, r23	; 0x04
    296a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    296c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	09 f4       	brne	.+2      	; 0x2978 <DIO_enuGetPortValue+0x20>
    2976:	43 c0       	rjmp	.+134    	; 0x29fe <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	84 30       	cpi	r24, 0x04	; 4
    297c:	e8 f5       	brcc	.+122    	; 0x29f8 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	28 2f       	mov	r18, r24
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	3e 83       	std	Y+6, r19	; 0x06
    2986:	2d 83       	std	Y+5, r18	; 0x05
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	91 05       	cpc	r25, r1
    2990:	e1 f0       	breq	.+56     	; 0x29ca <DIO_enuGetPortValue+0x72>
    2992:	2d 81       	ldd	r18, Y+5	; 0x05
    2994:	3e 81       	ldd	r19, Y+6	; 0x06
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 05       	cpc	r19, r1
    299a:	2c f4       	brge	.+10     	; 0x29a6 <DIO_enuGetPortValue+0x4e>
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	61 f0       	breq	.+24     	; 0x29bc <DIO_enuGetPortValue+0x64>
    29a4:	26 c0       	rjmp	.+76     	; 0x29f2 <DIO_enuGetPortValue+0x9a>
    29a6:	2d 81       	ldd	r18, Y+5	; 0x05
    29a8:	3e 81       	ldd	r19, Y+6	; 0x06
    29aa:	22 30       	cpi	r18, 0x02	; 2
    29ac:	31 05       	cpc	r19, r1
    29ae:	a1 f0       	breq	.+40     	; 0x29d8 <DIO_enuGetPortValue+0x80>
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	83 30       	cpi	r24, 0x03	; 3
    29b6:	91 05       	cpc	r25, r1
    29b8:	b1 f0       	breq	.+44     	; 0x29e6 <DIO_enuGetPortValue+0x8e>
    29ba:	1b c0       	rjmp	.+54     	; 0x29f2 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    29bc:	e9 e3       	ldi	r30, 0x39	; 57
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	eb 81       	ldd	r30, Y+3	; 0x03
    29c4:	fc 81       	ldd	r31, Y+4	; 0x04
    29c6:	80 83       	st	Z, r24
    29c8:	14 c0       	rjmp	.+40     	; 0x29f2 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    29ca:	e6 e3       	ldi	r30, 0x36	; 54
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	eb 81       	ldd	r30, Y+3	; 0x03
    29d2:	fc 81       	ldd	r31, Y+4	; 0x04
    29d4:	80 83       	st	Z, r24
    29d6:	0d c0       	rjmp	.+26     	; 0x29f2 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    29d8:	e3 e3       	ldi	r30, 0x33	; 51
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	eb 81       	ldd	r30, Y+3	; 0x03
    29e0:	fc 81       	ldd	r31, Y+4	; 0x04
    29e2:	80 83       	st	Z, r24
    29e4:	06 c0       	rjmp	.+12     	; 0x29f2 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    29e6:	e0 e3       	ldi	r30, 0x30	; 48
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	eb 81       	ldd	r30, Y+3	; 0x03
    29ee:	fc 81       	ldd	r31, Y+4	; 0x04
    29f0:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	05 c0       	rjmp	.+10     	; 0x2a02 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    29f8:	83 e0       	ldi	r24, 0x03	; 3
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a04:	26 96       	adiw	r28, 0x06	; 6
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <DIO_enuSetPinDirection+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <DIO_enuSetPinDirection+0x8>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <DIO_enuSetPinDirection+0xa>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	8a 83       	std	Y+2, r24	; 0x02
    2a26:	6b 83       	std	Y+3, r22	; 0x03
    2a28:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2a2a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	84 30       	cpi	r24, 0x04	; 4
    2a30:	08 f0       	brcs	.+2      	; 0x2a34 <DIO_enuSetPinDirection+0x1e>
    2a32:	d1 c0       	rjmp	.+418    	; 0x2bd6 <DIO_enuSetPinDirection+0x1c0>
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	88 30       	cpi	r24, 0x08	; 8
    2a38:	08 f0       	brcs	.+2      	; 0x2a3c <DIO_enuSetPinDirection+0x26>
    2a3a:	cd c0       	rjmp	.+410    	; 0x2bd6 <DIO_enuSetPinDirection+0x1c0>
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	08 f0       	brcs	.+2      	; 0x2a44 <DIO_enuSetPinDirection+0x2e>
    2a42:	c9 c0       	rjmp	.+402    	; 0x2bd6 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	28 2f       	mov	r18, r24
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	3e 83       	std	Y+6, r19	; 0x06
    2a4c:	2d 83       	std	Y+5, r18	; 0x05
    2a4e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a50:	7e 81       	ldd	r23, Y+6	; 0x06
    2a52:	61 30       	cpi	r22, 0x01	; 1
    2a54:	71 05       	cpc	r23, r1
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <DIO_enuSetPinDirection+0x44>
    2a58:	41 c0       	rjmp	.+130    	; 0x2adc <DIO_enuSetPinDirection+0xc6>
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	82 30       	cpi	r24, 0x02	; 2
    2a60:	91 05       	cpc	r25, r1
    2a62:	34 f4       	brge	.+12     	; 0x2a70 <DIO_enuSetPinDirection+0x5a>
    2a64:	2d 81       	ldd	r18, Y+5	; 0x05
    2a66:	3e 81       	ldd	r19, Y+6	; 0x06
    2a68:	21 15       	cp	r18, r1
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	71 f0       	breq	.+28     	; 0x2a8a <DIO_enuSetPinDirection+0x74>
    2a6e:	b0 c0       	rjmp	.+352    	; 0x2bd0 <DIO_enuSetPinDirection+0x1ba>
    2a70:	6d 81       	ldd	r22, Y+5	; 0x05
    2a72:	7e 81       	ldd	r23, Y+6	; 0x06
    2a74:	62 30       	cpi	r22, 0x02	; 2
    2a76:	71 05       	cpc	r23, r1
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <DIO_enuSetPinDirection+0x66>
    2a7a:	59 c0       	rjmp	.+178    	; 0x2b2e <DIO_enuSetPinDirection+0x118>
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	83 30       	cpi	r24, 0x03	; 3
    2a82:	91 05       	cpc	r25, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <DIO_enuSetPinDirection+0x72>
    2a86:	7c c0       	rjmp	.+248    	; 0x2b80 <DIO_enuSetPinDirection+0x16a>
    2a88:	a3 c0       	rjmp	.+326    	; 0x2bd0 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2a8a:	aa e3       	ldi	r26, 0x3A	; 58
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	ea e3       	ldi	r30, 0x3A	; 58
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	48 2f       	mov	r20, r24
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <DIO_enuSetPinDirection+0x90>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	2a 95       	dec	r18
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <DIO_enuSetPinDirection+0x8c>
    2aaa:	80 95       	com	r24
    2aac:	84 23       	and	r24, r20
    2aae:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2ab0:	aa e3       	ldi	r26, 0x3A	; 58
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	ea e3       	ldi	r30, 0x3A	; 58
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	48 2f       	mov	r20, r24
    2abc:	8c 81       	ldd	r24, Y+4	; 0x04
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	b9 01       	movw	r22, r18
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <DIO_enuSetPinDirection+0xba>
    2acc:	66 0f       	add	r22, r22
    2ace:	77 1f       	adc	r23, r23
    2ad0:	8a 95       	dec	r24
    2ad2:	e2 f7       	brpl	.-8      	; 0x2acc <DIO_enuSetPinDirection+0xb6>
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	84 2b       	or	r24, r20
    2ad8:	8c 93       	st	X, r24
    2ada:	7a c0       	rjmp	.+244    	; 0x2bd0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2adc:	a7 e3       	ldi	r26, 0x37	; 55
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e7 e3       	ldi	r30, 0x37	; 55
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_enuSetPinDirection+0xe2>
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	2a 95       	dec	r18
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <DIO_enuSetPinDirection+0xde>
    2afc:	80 95       	com	r24
    2afe:	84 23       	and	r24, r20
    2b00:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    2b02:	a7 e3       	ldi	r26, 0x37	; 55
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e7 e3       	ldi	r30, 0x37	; 55
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	48 2f       	mov	r20, r24
    2b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <DIO_enuSetPinDirection+0x10c>
    2b1e:	66 0f       	add	r22, r22
    2b20:	77 1f       	adc	r23, r23
    2b22:	8a 95       	dec	r24
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <DIO_enuSetPinDirection+0x108>
    2b26:	cb 01       	movw	r24, r22
    2b28:	84 2b       	or	r24, r20
    2b2a:	8c 93       	st	X, r24
    2b2c:	51 c0       	rjmp	.+162    	; 0x2bd0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2b2e:	a4 e3       	ldi	r26, 0x34	; 52
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e4 e3       	ldi	r30, 0x34	; 52
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	48 2f       	mov	r20, r24
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <DIO_enuSetPinDirection+0x134>
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	2a 95       	dec	r18
    2b4c:	e2 f7       	brpl	.-8      	; 0x2b46 <DIO_enuSetPinDirection+0x130>
    2b4e:	80 95       	com	r24
    2b50:	84 23       	and	r24, r20
    2b52:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    2b54:	a4 e3       	ldi	r26, 0x34	; 52
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e4 e3       	ldi	r30, 0x34	; 52
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	48 2f       	mov	r20, r24
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <DIO_enuSetPinDirection+0x15e>
    2b70:	66 0f       	add	r22, r22
    2b72:	77 1f       	adc	r23, r23
    2b74:	8a 95       	dec	r24
    2b76:	e2 f7       	brpl	.-8      	; 0x2b70 <DIO_enuSetPinDirection+0x15a>
    2b78:	cb 01       	movw	r24, r22
    2b7a:	84 2b       	or	r24, r20
    2b7c:	8c 93       	st	X, r24
    2b7e:	28 c0       	rjmp	.+80     	; 0x2bd0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2b80:	a1 e3       	ldi	r26, 0x31	; 49
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e1 e3       	ldi	r30, 0x31	; 49
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	48 2f       	mov	r20, r24
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <DIO_enuSetPinDirection+0x186>
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	2a 95       	dec	r18
    2b9e:	e2 f7       	brpl	.-8      	; 0x2b98 <DIO_enuSetPinDirection+0x182>
    2ba0:	80 95       	com	r24
    2ba2:	84 23       	and	r24, r20
    2ba4:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    2ba6:	a1 e3       	ldi	r26, 0x31	; 49
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e1 e3       	ldi	r30, 0x31	; 49
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	48 2f       	mov	r20, r24
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	b9 01       	movw	r22, r18
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <DIO_enuSetPinDirection+0x1b0>
    2bc2:	66 0f       	add	r22, r22
    2bc4:	77 1f       	adc	r23, r23
    2bc6:	8a 95       	dec	r24
    2bc8:	e2 f7       	brpl	.-8      	; 0x2bc2 <DIO_enuSetPinDirection+0x1ac>
    2bca:	cb 01       	movw	r24, r22
    2bcc:	84 2b       	or	r24, r20
    2bce:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bdc:	26 96       	adiw	r28, 0x06	; 6
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <DIO_enuSetPinValue+0x6>
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <DIO_enuSetPinValue+0x8>
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <DIO_enuSetPinValue+0xa>
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	8a 83       	std	Y+2, r24	; 0x02
    2bfe:	6b 83       	std	Y+3, r22	; 0x03
    2c00:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2c02:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	84 30       	cpi	r24, 0x04	; 4
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <DIO_enuSetPinValue+0x1e>
    2c0a:	d1 c0       	rjmp	.+418    	; 0x2dae <DIO_enuSetPinValue+0x1c0>
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	88 30       	cpi	r24, 0x08	; 8
    2c10:	08 f0       	brcs	.+2      	; 0x2c14 <DIO_enuSetPinValue+0x26>
    2c12:	cd c0       	rjmp	.+410    	; 0x2dae <DIO_enuSetPinValue+0x1c0>
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	82 30       	cpi	r24, 0x02	; 2
    2c18:	08 f0       	brcs	.+2      	; 0x2c1c <DIO_enuSetPinValue+0x2e>
    2c1a:	c9 c0       	rjmp	.+402    	; 0x2dae <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	3e 83       	std	Y+6, r19	; 0x06
    2c24:	2d 83       	std	Y+5, r18	; 0x05
    2c26:	6d 81       	ldd	r22, Y+5	; 0x05
    2c28:	7e 81       	ldd	r23, Y+6	; 0x06
    2c2a:	61 30       	cpi	r22, 0x01	; 1
    2c2c:	71 05       	cpc	r23, r1
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <DIO_enuSetPinValue+0x44>
    2c30:	41 c0       	rjmp	.+130    	; 0x2cb4 <DIO_enuSetPinValue+0xc6>
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	82 30       	cpi	r24, 0x02	; 2
    2c38:	91 05       	cpc	r25, r1
    2c3a:	34 f4       	brge	.+12     	; 0x2c48 <DIO_enuSetPinValue+0x5a>
    2c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c40:	21 15       	cp	r18, r1
    2c42:	31 05       	cpc	r19, r1
    2c44:	71 f0       	breq	.+28     	; 0x2c62 <DIO_enuSetPinValue+0x74>
    2c46:	b0 c0       	rjmp	.+352    	; 0x2da8 <DIO_enuSetPinValue+0x1ba>
    2c48:	6d 81       	ldd	r22, Y+5	; 0x05
    2c4a:	7e 81       	ldd	r23, Y+6	; 0x06
    2c4c:	62 30       	cpi	r22, 0x02	; 2
    2c4e:	71 05       	cpc	r23, r1
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <DIO_enuSetPinValue+0x66>
    2c52:	59 c0       	rjmp	.+178    	; 0x2d06 <DIO_enuSetPinValue+0x118>
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	83 30       	cpi	r24, 0x03	; 3
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <DIO_enuSetPinValue+0x72>
    2c5e:	7c c0       	rjmp	.+248    	; 0x2d58 <DIO_enuSetPinValue+0x16a>
    2c60:	a3 c0       	rjmp	.+326    	; 0x2da8 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2c62:	ab e3       	ldi	r26, 0x3B	; 59
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	eb e3       	ldi	r30, 0x3B	; 59
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	48 2f       	mov	r20, r24
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <DIO_enuSetPinValue+0x90>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	2a 95       	dec	r18
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <DIO_enuSetPinValue+0x8c>
    2c82:	80 95       	com	r24
    2c84:	84 23       	and	r24, r20
    2c86:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    2c88:	ab e3       	ldi	r26, 0x3B	; 59
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	eb e3       	ldi	r30, 0x3B	; 59
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	48 2f       	mov	r20, r24
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	b9 01       	movw	r22, r18
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <DIO_enuSetPinValue+0xba>
    2ca4:	66 0f       	add	r22, r22
    2ca6:	77 1f       	adc	r23, r23
    2ca8:	8a 95       	dec	r24
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <DIO_enuSetPinValue+0xb6>
    2cac:	cb 01       	movw	r24, r22
    2cae:	84 2b       	or	r24, r20
    2cb0:	8c 93       	st	X, r24
    2cb2:	7a c0       	rjmp	.+244    	; 0x2da8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2cb4:	a8 e3       	ldi	r26, 0x38	; 56
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e8 e3       	ldi	r30, 0x38	; 56
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	48 2f       	mov	r20, r24
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <DIO_enuSetPinValue+0xe2>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	2a 95       	dec	r18
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <DIO_enuSetPinValue+0xde>
    2cd4:	80 95       	com	r24
    2cd6:	84 23       	and	r24, r20
    2cd8:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    2cda:	a8 e3       	ldi	r26, 0x38	; 56
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e8 e3       	ldi	r30, 0x38	; 56
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	48 2f       	mov	r20, r24
    2ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	b9 01       	movw	r22, r18
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <DIO_enuSetPinValue+0x10c>
    2cf6:	66 0f       	add	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	8a 95       	dec	r24
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <DIO_enuSetPinValue+0x108>
    2cfe:	cb 01       	movw	r24, r22
    2d00:	84 2b       	or	r24, r20
    2d02:	8c 93       	st	X, r24
    2d04:	51 c0       	rjmp	.+162    	; 0x2da8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2d06:	a5 e3       	ldi	r26, 0x35	; 53
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e5 e3       	ldi	r30, 0x35	; 53
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	48 2f       	mov	r20, r24
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <DIO_enuSetPinValue+0x134>
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	2a 95       	dec	r18
    2d24:	e2 f7       	brpl	.-8      	; 0x2d1e <DIO_enuSetPinValue+0x130>
    2d26:	80 95       	com	r24
    2d28:	84 23       	and	r24, r20
    2d2a:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    2d2c:	a5 e3       	ldi	r26, 0x35	; 53
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e5 e3       	ldi	r30, 0x35	; 53
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	48 2f       	mov	r20, r24
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	88 2f       	mov	r24, r24
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	b9 01       	movw	r22, r18
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <DIO_enuSetPinValue+0x15e>
    2d48:	66 0f       	add	r22, r22
    2d4a:	77 1f       	adc	r23, r23
    2d4c:	8a 95       	dec	r24
    2d4e:	e2 f7       	brpl	.-8      	; 0x2d48 <DIO_enuSetPinValue+0x15a>
    2d50:	cb 01       	movw	r24, r22
    2d52:	84 2b       	or	r24, r20
    2d54:	8c 93       	st	X, r24
    2d56:	28 c0       	rjmp	.+80     	; 0x2da8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2d58:	a2 e3       	ldi	r26, 0x32	; 50
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e2 e3       	ldi	r30, 0x32	; 50
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	48 2f       	mov	r20, r24
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <DIO_enuSetPinValue+0x186>
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	2a 95       	dec	r18
    2d76:	e2 f7       	brpl	.-8      	; 0x2d70 <DIO_enuSetPinValue+0x182>
    2d78:	80 95       	com	r24
    2d7a:	84 23       	and	r24, r20
    2d7c:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    2d7e:	a2 e3       	ldi	r26, 0x32	; 50
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e2 e3       	ldi	r30, 0x32	; 50
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	48 2f       	mov	r20, r24
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	b9 01       	movw	r22, r18
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <DIO_enuSetPinValue+0x1b0>
    2d9a:	66 0f       	add	r22, r22
    2d9c:	77 1f       	adc	r23, r23
    2d9e:	8a 95       	dec	r24
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <DIO_enuSetPinValue+0x1ac>
    2da2:	cb 01       	movw	r24, r22
    2da4:	84 2b       	or	r24, r20
    2da6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2dae:	83 e0       	ldi	r24, 0x03	; 3
    2db0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2db4:	26 96       	adiw	r28, 0x06	; 6
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <DIO_enuTogPin+0x6>
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <DIO_enuTogPin+0x8>
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
    2dd6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2dd8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	84 30       	cpi	r24, 0x04	; 4
    2dde:	08 f0       	brcs	.+2      	; 0x2de2 <DIO_enuTogPin+0x1c>
    2de0:	75 c0       	rjmp	.+234    	; 0x2ecc <DIO_enuTogPin+0x106>
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	88 30       	cpi	r24, 0x08	; 8
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <DIO_enuTogPin+0x24>
    2de8:	71 c0       	rjmp	.+226    	; 0x2ecc <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	3d 83       	std	Y+5, r19	; 0x05
    2df2:	2c 83       	std	Y+4, r18	; 0x04
    2df4:	8c 81       	ldd	r24, Y+4	; 0x04
    2df6:	9d 81       	ldd	r25, Y+5	; 0x05
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	49 f1       	breq	.+82     	; 0x2e50 <DIO_enuTogPin+0x8a>
    2dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    2e00:	3d 81       	ldd	r19, Y+5	; 0x05
    2e02:	22 30       	cpi	r18, 0x02	; 2
    2e04:	31 05       	cpc	r19, r1
    2e06:	2c f4       	brge	.+10     	; 0x2e12 <DIO_enuTogPin+0x4c>
    2e08:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	61 f0       	breq	.+24     	; 0x2e28 <DIO_enuTogPin+0x62>
    2e10:	5a c0       	rjmp	.+180    	; 0x2ec6 <DIO_enuTogPin+0x100>
    2e12:	2c 81       	ldd	r18, Y+4	; 0x04
    2e14:	3d 81       	ldd	r19, Y+5	; 0x05
    2e16:	22 30       	cpi	r18, 0x02	; 2
    2e18:	31 05       	cpc	r19, r1
    2e1a:	71 f1       	breq	.+92     	; 0x2e78 <DIO_enuTogPin+0xb2>
    2e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e20:	83 30       	cpi	r24, 0x03	; 3
    2e22:	91 05       	cpc	r25, r1
    2e24:	e9 f1       	breq	.+122    	; 0x2ea0 <DIO_enuTogPin+0xda>
    2e26:	4f c0       	rjmp	.+158    	; 0x2ec6 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e28:	ab e3       	ldi	r26, 0x3B	; 59
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	eb e3       	ldi	r30, 0x3B	; 59
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	48 2f       	mov	r20, r24
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	28 2f       	mov	r18, r24
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	02 2e       	mov	r0, r18
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <DIO_enuTogPin+0x80>
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	0a 94       	dec	r0
    2e48:	e2 f7       	brpl	.-8      	; 0x2e42 <DIO_enuTogPin+0x7c>
    2e4a:	84 27       	eor	r24, r20
    2e4c:	8c 93       	st	X, r24
    2e4e:	3b c0       	rjmp	.+118    	; 0x2ec6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e50:	a8 e3       	ldi	r26, 0x38	; 56
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	e8 e3       	ldi	r30, 0x38	; 56
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	48 2f       	mov	r20, r24
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	02 2e       	mov	r0, r18
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <DIO_enuTogPin+0xa8>
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	0a 94       	dec	r0
    2e70:	e2 f7       	brpl	.-8      	; 0x2e6a <DIO_enuTogPin+0xa4>
    2e72:	84 27       	eor	r24, r20
    2e74:	8c 93       	st	X, r24
    2e76:	27 c0       	rjmp	.+78     	; 0x2ec6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e78:	a5 e3       	ldi	r26, 0x35	; 53
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e5 e3       	ldi	r30, 0x35	; 53
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	48 2f       	mov	r20, r24
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	02 2e       	mov	r0, r18
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <DIO_enuTogPin+0xd0>
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	0a 94       	dec	r0
    2e98:	e2 f7       	brpl	.-8      	; 0x2e92 <DIO_enuTogPin+0xcc>
    2e9a:	84 27       	eor	r24, r20
    2e9c:	8c 93       	st	X, r24
    2e9e:	13 c0       	rjmp	.+38     	; 0x2ec6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2ea0:	a2 e3       	ldi	r26, 0x32	; 50
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	e2 e3       	ldi	r30, 0x32	; 50
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	48 2f       	mov	r20, r24
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	02 2e       	mov	r0, r18
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <DIO_enuTogPin+0xf8>
    2eba:	88 0f       	add	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	0a 94       	dec	r0
    2ec0:	e2 f7       	brpl	.-8      	; 0x2eba <DIO_enuTogPin+0xf4>
    2ec2:	84 27       	eor	r24, r20
    2ec4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2ecc:	83 e0       	ldi	r24, 0x03	; 3
    2ece:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	27 97       	sbiw	r28, 0x07	; 7
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	8a 83       	std	Y+2, r24	; 0x02
    2ef8:	6b 83       	std	Y+3, r22	; 0x03
    2efa:	5d 83       	std	Y+5, r21	; 0x05
    2efc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2efe:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2f00:	8c 81       	ldd	r24, Y+4	; 0x04
    2f02:	9d 81       	ldd	r25, Y+5	; 0x05
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <DIO_enuGetPinValue+0x28>
    2f08:	7e c0       	rjmp	.+252    	; 0x3006 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	84 30       	cpi	r24, 0x04	; 4
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <DIO_enuGetPinValue+0x30>
    2f10:	77 c0       	rjmp	.+238    	; 0x3000 <DIO_enuGetPinValue+0x11e>
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	88 30       	cpi	r24, 0x08	; 8
    2f16:	08 f0       	brcs	.+2      	; 0x2f1a <DIO_enuGetPinValue+0x38>
    2f18:	73 c0       	rjmp	.+230    	; 0x3000 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	3f 83       	std	Y+7, r19	; 0x07
    2f22:	2e 83       	std	Y+6, r18	; 0x06
    2f24:	4e 81       	ldd	r20, Y+6	; 0x06
    2f26:	5f 81       	ldd	r21, Y+7	; 0x07
    2f28:	41 30       	cpi	r20, 0x01	; 1
    2f2a:	51 05       	cpc	r21, r1
    2f2c:	59 f1       	breq	.+86     	; 0x2f84 <DIO_enuGetPinValue+0xa2>
    2f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f30:	9f 81       	ldd	r25, Y+7	; 0x07
    2f32:	82 30       	cpi	r24, 0x02	; 2
    2f34:	91 05       	cpc	r25, r1
    2f36:	34 f4       	brge	.+12     	; 0x2f44 <DIO_enuGetPinValue+0x62>
    2f38:	2e 81       	ldd	r18, Y+6	; 0x06
    2f3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f3c:	21 15       	cp	r18, r1
    2f3e:	31 05       	cpc	r19, r1
    2f40:	69 f0       	breq	.+26     	; 0x2f5c <DIO_enuGetPinValue+0x7a>
    2f42:	5b c0       	rjmp	.+182    	; 0x2ffa <DIO_enuGetPinValue+0x118>
    2f44:	4e 81       	ldd	r20, Y+6	; 0x06
    2f46:	5f 81       	ldd	r21, Y+7	; 0x07
    2f48:	42 30       	cpi	r20, 0x02	; 2
    2f4a:	51 05       	cpc	r21, r1
    2f4c:	79 f1       	breq	.+94     	; 0x2fac <DIO_enuGetPinValue+0xca>
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	9f 81       	ldd	r25, Y+7	; 0x07
    2f52:	83 30       	cpi	r24, 0x03	; 3
    2f54:	91 05       	cpc	r25, r1
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <DIO_enuGetPinValue+0x78>
    2f58:	3d c0       	rjmp	.+122    	; 0x2fd4 <DIO_enuGetPinValue+0xf2>
    2f5a:	4f c0       	rjmp	.+158    	; 0x2ffa <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    2f5c:	e9 e3       	ldi	r30, 0x39	; 57
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	88 2f       	mov	r24, r24
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a9 01       	movw	r20, r18
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <DIO_enuGetPinValue+0x92>
    2f70:	55 95       	asr	r21
    2f72:	47 95       	ror	r20
    2f74:	8a 95       	dec	r24
    2f76:	e2 f7       	brpl	.-8      	; 0x2f70 <DIO_enuGetPinValue+0x8e>
    2f78:	ca 01       	movw	r24, r20
    2f7a:	81 70       	andi	r24, 0x01	; 1
    2f7c:	ec 81       	ldd	r30, Y+4	; 0x04
    2f7e:	fd 81       	ldd	r31, Y+5	; 0x05
    2f80:	80 83       	st	Z, r24
    2f82:	3b c0       	rjmp	.+118    	; 0x2ffa <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    2f84:	e6 e3       	ldi	r30, 0x36	; 54
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	a9 01       	movw	r20, r18
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <DIO_enuGetPinValue+0xba>
    2f98:	55 95       	asr	r21
    2f9a:	47 95       	ror	r20
    2f9c:	8a 95       	dec	r24
    2f9e:	e2 f7       	brpl	.-8      	; 0x2f98 <DIO_enuGetPinValue+0xb6>
    2fa0:	ca 01       	movw	r24, r20
    2fa2:	81 70       	andi	r24, 0x01	; 1
    2fa4:	ec 81       	ldd	r30, Y+4	; 0x04
    2fa6:	fd 81       	ldd	r31, Y+5	; 0x05
    2fa8:	80 83       	st	Z, r24
    2faa:	27 c0       	rjmp	.+78     	; 0x2ffa <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    2fac:	e3 e3       	ldi	r30, 0x33	; 51
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	88 2f       	mov	r24, r24
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a9 01       	movw	r20, r18
    2fbe:	02 c0       	rjmp	.+4      	; 0x2fc4 <DIO_enuGetPinValue+0xe2>
    2fc0:	55 95       	asr	r21
    2fc2:	47 95       	ror	r20
    2fc4:	8a 95       	dec	r24
    2fc6:	e2 f7       	brpl	.-8      	; 0x2fc0 <DIO_enuGetPinValue+0xde>
    2fc8:	ca 01       	movw	r24, r20
    2fca:	81 70       	andi	r24, 0x01	; 1
    2fcc:	ec 81       	ldd	r30, Y+4	; 0x04
    2fce:	fd 81       	ldd	r31, Y+5	; 0x05
    2fd0:	80 83       	st	Z, r24
    2fd2:	13 c0       	rjmp	.+38     	; 0x2ffa <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    2fd4:	e0 e3       	ldi	r30, 0x30	; 48
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	88 2f       	mov	r24, r24
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	a9 01       	movw	r20, r18
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <DIO_enuGetPinValue+0x10a>
    2fe8:	55 95       	asr	r21
    2fea:	47 95       	ror	r20
    2fec:	8a 95       	dec	r24
    2fee:	e2 f7       	brpl	.-8      	; 0x2fe8 <DIO_enuGetPinValue+0x106>
    2ff0:	ca 01       	movw	r24, r20
    2ff2:	81 70       	andi	r24, 0x01	; 1
    2ff4:	ec 81       	ldd	r30, Y+4	; 0x04
    2ff6:	fd 81       	ldd	r31, Y+5	; 0x05
    2ff8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	05 c0       	rjmp	.+10     	; 0x300a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	02 c0       	rjmp	.+4      	; 0x300a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    3006:	82 e0       	ldi	r24, 0x02	; 2
    3008:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
}
    300c:	27 96       	adiw	r28, 0x07	; 7
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <main>:
#include "util/delay.h"
#include "calculator/cal.h"


int main (void)
{
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62

	CAL_INIT();
    3026:	0e 94 a3 05 	call	0xb46	; 0xb46 <CAL_INIT>

   while(1){
    CAL_INPUT();
    302a:	0e 94 be 05 	call	0xb7c	; 0xb7c <CAL_INPUT>
    302e:	fd cf       	rjmp	.-6      	; 0x302a <main+0xc>

00003030 <CreateStack>:

#include "stack.h"

void CreateStack(NUMS *ps)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	00 d0       	rcall	.+0      	; 0x3036 <CreateStack+0x6>
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    303e:	e9 81       	ldd	r30, Y+1	; 0x01
    3040:	fa 81       	ldd	r31, Y+2	; 0x02
    3042:	11 82       	std	Z+1, r1	; 0x01
    3044:	10 82       	st	Z, r1
}
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <CreateStack_op>:

void CreateStack_op(operations *ps)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <CreateStack_op+0x6>
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    305e:	e9 81       	ldd	r30, Y+1	; 0x01
    3060:	fa 81       	ldd	r31, Y+2	; 0x02
    3062:	11 82       	std	Z+1, r1	; 0x01
    3064:	10 82       	st	Z, r1
}
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <Push>:


void Push(stackentry e, NUMS *ps)
{
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	00 d0       	rcall	.+0      	; 0x3076 <Push+0x6>
    3076:	00 d0       	rcall	.+0      	; 0x3078 <Push+0x8>
    3078:	00 d0       	rcall	.+0      	; 0x307a <Push+0xa>
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	69 83       	std	Y+1, r22	; 0x01
    3080:	7a 83       	std	Y+2, r23	; 0x02
    3082:	8b 83       	std	Y+3, r24	; 0x03
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	5e 83       	std	Y+6, r21	; 0x06
    3088:	4d 83       	std	Y+5, r20	; 0x05
    ps->entry[ps->top++]=e;
    308a:	ed 81       	ldd	r30, Y+5	; 0x05
    308c:	fe 81       	ldd	r31, Y+6	; 0x06
    308e:	40 81       	ld	r20, Z
    3090:	51 81       	ldd	r21, Z+1	; 0x01
    3092:	2d 81       	ldd	r18, Y+5	; 0x05
    3094:	3e 81       	ldd	r19, Y+6	; 0x06
    3096:	ca 01       	movw	r24, r20
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	f9 01       	movw	r30, r18
    30a4:	e8 0f       	add	r30, r24
    30a6:	f9 1f       	adc	r31, r25
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	ab 81       	ldd	r26, Y+3	; 0x03
    30ae:	bc 81       	ldd	r27, Y+4	; 0x04
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
    30b8:	ca 01       	movw	r24, r20
    30ba:	01 96       	adiw	r24, 0x01	; 1
    30bc:	ed 81       	ldd	r30, Y+5	; 0x05
    30be:	fe 81       	ldd	r31, Y+6	; 0x06
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
}
    30c4:	26 96       	adiw	r28, 0x06	; 6
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <Push_op>:
void Push_op(u8 e, operations *OP)
{
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	00 d0       	rcall	.+0      	; 0x30dc <Push_op+0x6>
    30dc:	0f 92       	push	r0
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	7b 83       	std	Y+3, r23	; 0x03
    30e6:	6a 83       	std	Y+2, r22	; 0x02
    OP->entryy[OP->top++]=e;
    30e8:	ea 81       	ldd	r30, Y+2	; 0x02
    30ea:	fb 81       	ldd	r31, Y+3	; 0x03
    30ec:	20 81       	ld	r18, Z
    30ee:	31 81       	ldd	r19, Z+1	; 0x01
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	82 0f       	add	r24, r18
    30f6:	93 1f       	adc	r25, r19
    30f8:	fc 01       	movw	r30, r24
    30fa:	32 96       	adiw	r30, 0x02	; 2
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	c9 01       	movw	r24, r18
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	ea 81       	ldd	r30, Y+2	; 0x02
    3106:	fb 81       	ldd	r31, Y+3	; 0x03
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
}
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <Pop_op>:

void Pop_op(u8 *pe, operations *OP)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	00 d0       	rcall	.+0      	; 0x311e <Pop_op+0x6>
    311e:	00 d0       	rcall	.+0      	; 0x3120 <Pop_op+0x8>
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	7c 83       	std	Y+4, r23	; 0x04
    312a:	6b 83       	std	Y+3, r22	; 0x03
    *pe=OP->entryy[--OP->top];
    312c:	eb 81       	ldd	r30, Y+3	; 0x03
    312e:	fc 81       	ldd	r31, Y+4	; 0x04
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	eb 81       	ldd	r30, Y+3	; 0x03
    3138:	fc 81       	ldd	r31, Y+4	; 0x04
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24
    313e:	eb 81       	ldd	r30, Y+3	; 0x03
    3140:	fc 81       	ldd	r31, Y+4	; 0x04
    3142:	20 81       	ld	r18, Z
    3144:	31 81       	ldd	r19, Z+1	; 0x01
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	9c 81       	ldd	r25, Y+4	; 0x04
    314a:	82 0f       	add	r24, r18
    314c:	93 1f       	adc	r25, r19
    314e:	fc 01       	movw	r30, r24
    3150:	32 96       	adiw	r30, 0x02	; 2
    3152:	80 81       	ld	r24, Z
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	80 83       	st	Z, r24
}
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <Pop>:

void Pop(stackentry *pe, NUMS *ps)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <Pop+0x6>
    316e:	00 d0       	rcall	.+0      	; 0x3170 <Pop+0x8>
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	7c 83       	std	Y+4, r23	; 0x04
    317a:	6b 83       	std	Y+3, r22	; 0x03
    *pe=ps->entry[--ps->top];
    317c:	eb 81       	ldd	r30, Y+3	; 0x03
    317e:	fc 81       	ldd	r31, Y+4	; 0x04
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	eb 81       	ldd	r30, Y+3	; 0x03
    3188:	fc 81       	ldd	r31, Y+4	; 0x04
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
    318e:	eb 81       	ldd	r30, Y+3	; 0x03
    3190:	fc 81       	ldd	r31, Y+4	; 0x04
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	2b 81       	ldd	r18, Y+3	; 0x03
    3198:	3c 81       	ldd	r19, Y+4	; 0x04
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	f9 01       	movw	r30, r18
    31a6:	e8 0f       	add	r30, r24
    31a8:	f9 1f       	adc	r31, r25
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	a2 81       	ldd	r26, Z+2	; 0x02
    31b0:	b3 81       	ldd	r27, Z+3	; 0x03
    31b2:	e9 81       	ldd	r30, Y+1	; 0x01
    31b4:	fa 81       	ldd	r31, Y+2	; 0x02
    31b6:	80 83       	st	Z, r24
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	a2 83       	std	Z+2, r26	; 0x02
    31bc:	b3 83       	std	Z+3, r27	; 0x03
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <StackFull>:


int StackFull(NUMS *ps)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <StackFull+0x6>
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <StackFull+0x8>
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	9a 83       	std	Y+2, r25	; 0x02
    31da:	89 83       	std	Y+1, r24	; 0x01
    return (ps->top==maxstack);
    31dc:	e9 81       	ldd	r30, Y+1	; 0x01
    31de:	fa 81       	ldd	r31, Y+2	; 0x02
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	1c 82       	std	Y+4, r1	; 0x04
    31e6:	1b 82       	std	Y+3, r1	; 0x03
    31e8:	84 36       	cpi	r24, 0x64	; 100
    31ea:	91 05       	cpc	r25, r1
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <StackFull+0x2a>
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9c 83       	std	Y+4, r25	; 0x04
    31f4:	8b 83       	std	Y+3, r24	; 0x03
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	cf 91       	pop	r28
    3204:	df 91       	pop	r29
    3206:	08 95       	ret

00003208 <StackEmpty_op>:

int StackEmpty_op(operations *ps)
{
    3208:	df 93       	push	r29
    320a:	cf 93       	push	r28
    320c:	00 d0       	rcall	.+0      	; 0x320e <StackEmpty_op+0x6>
    320e:	00 d0       	rcall	.+0      	; 0x3210 <StackEmpty_op+0x8>
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
    return !ps->top;
    3218:	e9 81       	ldd	r30, Y+1	; 0x01
    321a:	fa 81       	ldd	r31, Y+2	; 0x02
    321c:	80 81       	ld	r24, Z
    321e:	91 81       	ldd	r25, Z+1	; 0x01
    3220:	1c 82       	std	Y+4, r1	; 0x04
    3222:	1b 82       	std	Y+3, r1	; 0x03
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	21 f4       	brne	.+8      	; 0x3230 <StackEmpty_op+0x28>
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9c 83       	std	Y+4, r25	; 0x04
    322e:	8b 83       	std	Y+3, r24	; 0x03
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <StackEmpty>:
int StackEmpty(NUMS *ps)
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <StackEmpty+0x6>
    3248:	00 d0       	rcall	.+0      	; 0x324a <StackEmpty+0x8>
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	89 83       	std	Y+1, r24	; 0x01
    return !ps->top;
    3252:	e9 81       	ldd	r30, Y+1	; 0x01
    3254:	fa 81       	ldd	r31, Y+2	; 0x02
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	1c 82       	std	Y+4, r1	; 0x04
    325c:	1b 82       	std	Y+3, r1	; 0x03
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	21 f4       	brne	.+8      	; 0x326a <StackEmpty+0x28>
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9c 83       	std	Y+4, r25	; 0x04
    3268:	8b 83       	std	Y+3, r24	; 0x03
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <StackSize>:


int StackSize(NUMS *ps)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	00 d0       	rcall	.+0      	; 0x3282 <StackSize+0x6>
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01

    return ps->top;
    328a:	e9 81       	ldd	r30, Y+1	; 0x01
    328c:	fa 81       	ldd	r31, Y+2	; 0x02
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
}
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <ClearStack>:
void ClearStack(NUMS *ps)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <ClearStack+0x6>
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	89 83       	std	Y+1, r24	; 0x01

    ps->top=0;
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	11 82       	std	Z+1, r1	; 0x01
    32b0:	10 82       	st	Z, r1
}
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <ClearStack_op>:
void ClearStack_op(operations* op){
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <ClearStack_op+0x6>
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
	op->top=0;
    32ca:	e9 81       	ldd	r30, Y+1	; 0x01
    32cc:	fa 81       	ldd	r31, Y+2	; 0x02
    32ce:	11 82       	std	Z+1, r1	; 0x01
    32d0:	10 82       	st	Z, r1
}
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <TraverseStack>:
void TraverseStack(NUMS *ps, void (*pf)(stackentry))
{
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <TraverseStack+0x6>
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <TraverseStack+0x8>
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <TraverseStack+0xa>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	9c 83       	std	Y+4, r25	; 0x04
    32ec:	8b 83       	std	Y+3, r24	; 0x03
    32ee:	7e 83       	std	Y+6, r23	; 0x06
    32f0:	6d 83       	std	Y+5, r22	; 0x05
    for(int i=ps->top; i>0; i--)
    32f2:	eb 81       	ldd	r30, Y+3	; 0x03
    32f4:	fc 81       	ldd	r31, Y+4	; 0x04
    32f6:	80 81       	ld	r24, Z
    32f8:	91 81       	ldd	r25, Z+1	; 0x01
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	1b c0       	rjmp	.+54     	; 0x3336 <TraverseStack+0x5a>
        (*pf)(ps->entry[i-1]);
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	9a 81       	ldd	r25, Y+2	; 0x02
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	2b 81       	ldd	r18, Y+3	; 0x03
    3308:	3c 81       	ldd	r19, Y+4	; 0x04
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	f9 01       	movw	r30, r18
    3316:	e8 0f       	add	r30, r24
    3318:	f9 1f       	adc	r31, r25
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	a2 81       	ldd	r26, Z+2	; 0x02
    3320:	b3 81       	ldd	r27, Z+3	; 0x03
    3322:	ed 81       	ldd	r30, Y+5	; 0x05
    3324:	fe 81       	ldd	r31, Y+6	; 0x06
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	09 95       	icall
void ClearStack_op(operations* op){
	op->top=0;
}
void TraverseStack(NUMS *ps, void (*pf)(stackentry))
{
    for(int i=ps->top; i>0; i--)
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	9a 81       	ldd	r25, Y+2	; 0x02
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	18 16       	cp	r1, r24
    333c:	19 06       	cpc	r1, r25
    333e:	04 f3       	brlt	.-64     	; 0x3300 <TraverseStack+0x24>
        (*pf)(ps->entry[i-1]);

}
    3340:	26 96       	adiw	r28, 0x06	; 6
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <StackTop_op>:
char StackTop_op(operations* op ){
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	00 d0       	rcall	.+0      	; 0x3358 <StackTop_op+0x6>
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01

return op->entryy[op->top-1];
    3360:	e9 81       	ldd	r30, Y+1	; 0x01
    3362:	fa 81       	ldd	r31, Y+2	; 0x02
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	9c 01       	movw	r18, r24
    336a:	21 50       	subi	r18, 0x01	; 1
    336c:	30 40       	sbci	r19, 0x00	; 0
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	82 0f       	add	r24, r18
    3374:	93 1f       	adc	r25, r19
    3376:	fc 01       	movw	r30, r24
    3378:	32 96       	adiw	r30, 0x02	; 2
    337a:	80 81       	ld	r24, Z
}
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <IsDigit>:



int IsDigit(char c){
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <IsDigit+0x6>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	89 83       	std	Y+1, r24	; 0x01
   return(c>='0' && c<='9');
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	80 33       	cpi	r24, 0x30	; 48
    3398:	40 f0       	brcs	.+16     	; 0x33aa <IsDigit+0x24>
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	8a 33       	cpi	r24, 0x3A	; 58
    339e:	28 f4       	brcc	.+10     	; 0x33aa <IsDigit+0x24>
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9b 83       	std	Y+3, r25	; 0x03
    33a6:	8a 83       	std	Y+2, r24	; 0x02
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <IsDigit+0x28>
    33aa:	1b 82       	std	Y+3, r1	; 0x03
    33ac:	1a 82       	std	Y+2, r1	; 0x02
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <IsOp>:
int IsOp(char c){
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <IsOp+0x6>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	89 83       	std	Y+1, r24	; 0x01
   return(c=='/' || c=='x'||c=='+'||c=='-');
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	8f 32       	cpi	r24, 0x2F	; 47
    33d0:	49 f0       	breq	.+18     	; 0x33e4 <IsOp+0x26>
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	88 37       	cpi	r24, 0x78	; 120
    33d6:	31 f0       	breq	.+12     	; 0x33e4 <IsOp+0x26>
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	8b 32       	cpi	r24, 0x2B	; 43
    33dc:	19 f0       	breq	.+6      	; 0x33e4 <IsOp+0x26>
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	8d 32       	cpi	r24, 0x2D	; 45
    33e2:	29 f4       	brne	.+10     	; 0x33ee <IsOp+0x30>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9b 83       	std	Y+3, r25	; 0x03
    33ea:	8a 83       	std	Y+2, r24	; 0x02
    33ec:	02 c0       	rjmp	.+4      	; 0x33f2 <IsOp+0x34>
    33ee:	1b 82       	std	Y+3, r1	; 0x03
    33f0:	1a 82       	std	Y+2, r1	; 0x02
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	cf 91       	pop	r28
    33fe:	df 91       	pop	r29
    3400:	08 95       	ret

00003402 <__mulsi3>:
    3402:	62 9f       	mul	r22, r18
    3404:	d0 01       	movw	r26, r0
    3406:	73 9f       	mul	r23, r19
    3408:	f0 01       	movw	r30, r0
    340a:	82 9f       	mul	r24, r18
    340c:	e0 0d       	add	r30, r0
    340e:	f1 1d       	adc	r31, r1
    3410:	64 9f       	mul	r22, r20
    3412:	e0 0d       	add	r30, r0
    3414:	f1 1d       	adc	r31, r1
    3416:	92 9f       	mul	r25, r18
    3418:	f0 0d       	add	r31, r0
    341a:	83 9f       	mul	r24, r19
    341c:	f0 0d       	add	r31, r0
    341e:	74 9f       	mul	r23, r20
    3420:	f0 0d       	add	r31, r0
    3422:	65 9f       	mul	r22, r21
    3424:	f0 0d       	add	r31, r0
    3426:	99 27       	eor	r25, r25
    3428:	72 9f       	mul	r23, r18
    342a:	b0 0d       	add	r27, r0
    342c:	e1 1d       	adc	r30, r1
    342e:	f9 1f       	adc	r31, r25
    3430:	63 9f       	mul	r22, r19
    3432:	b0 0d       	add	r27, r0
    3434:	e1 1d       	adc	r30, r1
    3436:	f9 1f       	adc	r31, r25
    3438:	bd 01       	movw	r22, r26
    343a:	cf 01       	movw	r24, r30
    343c:	11 24       	eor	r1, r1
    343e:	08 95       	ret

00003440 <__divmodsi4>:
    3440:	97 fb       	bst	r25, 7
    3442:	09 2e       	mov	r0, r25
    3444:	05 26       	eor	r0, r21
    3446:	0e d0       	rcall	.+28     	; 0x3464 <__divmodsi4_neg1>
    3448:	57 fd       	sbrc	r21, 7
    344a:	04 d0       	rcall	.+8      	; 0x3454 <__divmodsi4_neg2>
    344c:	14 d0       	rcall	.+40     	; 0x3476 <__udivmodsi4>
    344e:	0a d0       	rcall	.+20     	; 0x3464 <__divmodsi4_neg1>
    3450:	00 1c       	adc	r0, r0
    3452:	38 f4       	brcc	.+14     	; 0x3462 <__divmodsi4_exit>

00003454 <__divmodsi4_neg2>:
    3454:	50 95       	com	r21
    3456:	40 95       	com	r20
    3458:	30 95       	com	r19
    345a:	21 95       	neg	r18
    345c:	3f 4f       	sbci	r19, 0xFF	; 255
    345e:	4f 4f       	sbci	r20, 0xFF	; 255
    3460:	5f 4f       	sbci	r21, 0xFF	; 255

00003462 <__divmodsi4_exit>:
    3462:	08 95       	ret

00003464 <__divmodsi4_neg1>:
    3464:	f6 f7       	brtc	.-4      	; 0x3462 <__divmodsi4_exit>
    3466:	90 95       	com	r25
    3468:	80 95       	com	r24
    346a:	70 95       	com	r23
    346c:	61 95       	neg	r22
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	8f 4f       	sbci	r24, 0xFF	; 255
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	08 95       	ret

00003476 <__udivmodsi4>:
    3476:	a1 e2       	ldi	r26, 0x21	; 33
    3478:	1a 2e       	mov	r1, r26
    347a:	aa 1b       	sub	r26, r26
    347c:	bb 1b       	sub	r27, r27
    347e:	fd 01       	movw	r30, r26
    3480:	0d c0       	rjmp	.+26     	; 0x349c <__udivmodsi4_ep>

00003482 <__udivmodsi4_loop>:
    3482:	aa 1f       	adc	r26, r26
    3484:	bb 1f       	adc	r27, r27
    3486:	ee 1f       	adc	r30, r30
    3488:	ff 1f       	adc	r31, r31
    348a:	a2 17       	cp	r26, r18
    348c:	b3 07       	cpc	r27, r19
    348e:	e4 07       	cpc	r30, r20
    3490:	f5 07       	cpc	r31, r21
    3492:	20 f0       	brcs	.+8      	; 0x349c <__udivmodsi4_ep>
    3494:	a2 1b       	sub	r26, r18
    3496:	b3 0b       	sbc	r27, r19
    3498:	e4 0b       	sbc	r30, r20
    349a:	f5 0b       	sbc	r31, r21

0000349c <__udivmodsi4_ep>:
    349c:	66 1f       	adc	r22, r22
    349e:	77 1f       	adc	r23, r23
    34a0:	88 1f       	adc	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	1a 94       	dec	r1
    34a6:	69 f7       	brne	.-38     	; 0x3482 <__udivmodsi4_loop>
    34a8:	60 95       	com	r22
    34aa:	70 95       	com	r23
    34ac:	80 95       	com	r24
    34ae:	90 95       	com	r25
    34b0:	9b 01       	movw	r18, r22
    34b2:	ac 01       	movw	r20, r24
    34b4:	bd 01       	movw	r22, r26
    34b6:	cf 01       	movw	r24, r30
    34b8:	08 95       	ret

000034ba <__prologue_saves__>:
    34ba:	2f 92       	push	r2
    34bc:	3f 92       	push	r3
    34be:	4f 92       	push	r4
    34c0:	5f 92       	push	r5
    34c2:	6f 92       	push	r6
    34c4:	7f 92       	push	r7
    34c6:	8f 92       	push	r8
    34c8:	9f 92       	push	r9
    34ca:	af 92       	push	r10
    34cc:	bf 92       	push	r11
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	ca 1b       	sub	r28, r26
    34e4:	db 0b       	sbc	r29, r27
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	09 94       	ijmp

000034f2 <__epilogue_restores__>:
    34f2:	2a 88       	ldd	r2, Y+18	; 0x12
    34f4:	39 88       	ldd	r3, Y+17	; 0x11
    34f6:	48 88       	ldd	r4, Y+16	; 0x10
    34f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    34fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    34fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    34fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3500:	9b 84       	ldd	r9, Y+11	; 0x0b
    3502:	aa 84       	ldd	r10, Y+10	; 0x0a
    3504:	b9 84       	ldd	r11, Y+9	; 0x09
    3506:	c8 84       	ldd	r12, Y+8	; 0x08
    3508:	df 80       	ldd	r13, Y+7	; 0x07
    350a:	ee 80       	ldd	r14, Y+6	; 0x06
    350c:	fd 80       	ldd	r15, Y+5	; 0x05
    350e:	0c 81       	ldd	r16, Y+4	; 0x04
    3510:	1b 81       	ldd	r17, Y+3	; 0x03
    3512:	aa 81       	ldd	r26, Y+2	; 0x02
    3514:	b9 81       	ldd	r27, Y+1	; 0x01
    3516:	ce 0f       	add	r28, r30
    3518:	d1 1d       	adc	r29, r1
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	ed 01       	movw	r28, r26
    3526:	08 95       	ret

00003528 <_exit>:
    3528:	f8 94       	cli

0000352a <__stop_program>:
    352a:	ff cf       	rjmp	.-2      	; 0x352a <__stop_program>
