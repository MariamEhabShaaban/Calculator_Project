
CAL_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000034de  00003572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000596  00800082  00800082  00003594  2**0
                  ALLOC
  3 .stab         000031ec  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f0  00000000  00000000  00006780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009969  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 02 18 	call	0x3004	; 0x3004 <main>
      8a:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 1a 	jmp	0x346c	; 0x346c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CAL_INIT>:
#include "util/delay.h"
u8 INPUT [MAXINPUT]={0},Error[]="ERROR!!!!";
NUMS numbers,rev_numbers,remender;
operations op,rev_op;
s32 i=0;
void CAL_INIT(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	Keypad_enuInit();
     b4e:	0e 94 92 11 	call	0x2324	; 0x2324 <Keypad_enuInit>
	LCD_enuInit();
     b52:	0e 94 98 08 	call	0x1130	; 0x1130 <LCD_enuInit>
	CreateStack(&numbers);
     b56:	84 ef       	ldi	r24, 0xF4	; 244
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 0b 18 	call	0x3016	; 0x3016 <CreateStack>
	CreateStack(&rev_numbers);
     b5e:	82 e6       	ldi	r24, 0x62	; 98
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 0b 18 	call	0x3016	; 0x3016 <CreateStack>
	CreateStack_op(&op);
     b66:	8c ef       	ldi	r24, 0xFC	; 252
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 1b 18 	call	0x3036	; 0x3036 <CreateStack_op>
	CreateStack_op(&rev_op);
     b6e:	86 e9       	ldi	r24, 0x96	; 150
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 1b 18 	call	0x3036	; 0x3036 <CreateStack_op>



}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <CAL_INPUT>:
void CAL_INPUT(){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62

	u8 press;

	do{

Keypad_enuGetPressedKey(&press);
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Keypad_enuGetPressedKey>


	}while(press==0xff);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	8f 3f       	cpi	r24, 0xFF	; 255
     b92:	c9 f3       	breq	.-14     	; 0xb86 <CAL_INPUT+0xa>
	    if(press=='='){
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	8d 33       	cpi	r24, 0x3D	; 61
     b98:	e9 f4       	brne	.+58     	; 0xbd4 <CAL_INPUT+0x58>
		     LCD_enuDisplayChar(press);
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <LCD_enuDisplayChar>
			 INPUT[i++]='\0';
     ba0:	80 91 92 00 	lds	r24, 0x0092
     ba4:	90 91 93 00 	lds	r25, 0x0093
     ba8:	a0 91 94 00 	lds	r26, 0x0094
     bac:	b0 91 95 00 	lds	r27, 0x0095
     bb0:	fc 01       	movw	r30, r24
     bb2:	ee 57       	subi	r30, 0x7E	; 126
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	10 82       	st	Z, r1
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	a1 1d       	adc	r26, r1
     bbc:	b1 1d       	adc	r27, r1
     bbe:	80 93 92 00 	sts	0x0092, r24
     bc2:	90 93 93 00 	sts	0x0093, r25
     bc6:	a0 93 94 00 	sts	0x0094, r26
     bca:	b0 93 95 00 	sts	0x0095, r27
			 CAL_OPERATION();
     bce:	0e 94 18 06 	call	0xc30	; 0xc30 <CAL_OPERATION>
     bd2:	2a c0       	rjmp	.+84     	; 0xc28 <CAL_INPUT+0xac>
		}
		else if(press=='c'){
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	83 36       	cpi	r24, 0x63	; 99
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <CAL_INPUT+0x64>
			Clear_CAL();
     bda:	0e 94 77 08 	call	0x10ee	; 0x10ee <Clear_CAL>
     bde:	24 c0       	rjmp	.+72     	; 0xc28 <CAL_INPUT+0xac>
		}

		else if(press!='c'&&press!='='&&press!=0xff){
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	83 36       	cpi	r24, 0x63	; 99
     be4:	09 f1       	breq	.+66     	; 0xc28 <CAL_INPUT+0xac>
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	8d 33       	cpi	r24, 0x3D	; 61
     bea:	f1 f0       	breq	.+60     	; 0xc28 <CAL_INPUT+0xac>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	8f 3f       	cpi	r24, 0xFF	; 255
     bf0:	d9 f0       	breq	.+54     	; 0xc28 <CAL_INPUT+0xac>
		    LCD_enuDisplayChar(press);
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <LCD_enuDisplayChar>
		    INPUT[i++]=press;
     bf8:	80 91 92 00 	lds	r24, 0x0092
     bfc:	90 91 93 00 	lds	r25, 0x0093
     c00:	a0 91 94 00 	lds	r26, 0x0094
     c04:	b0 91 95 00 	lds	r27, 0x0095
     c08:	29 81       	ldd	r18, Y+1	; 0x01
     c0a:	fc 01       	movw	r30, r24
     c0c:	ee 57       	subi	r30, 0x7E	; 126
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	20 83       	st	Z, r18
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	80 93 92 00 	sts	0x0092, r24
     c1c:	90 93 93 00 	sts	0x0093, r25
     c20:	a0 93 94 00 	sts	0x0094, r26
     c24:	b0 93 95 00 	sts	0x0095, r27
	    }
}
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <CAL_OPERATION>:


void CAL_OPERATION(){
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	ae 97       	sbiw	r28, 0x2e	; 46
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	s32 num=0;
     c44:	1c 8a       	std	Y+20, r1	; 0x14
     c46:	1d 8a       	std	Y+21, r1	; 0x15
     c48:	1e 8a       	std	Y+22, r1	; 0x16
     c4a:	1f 8a       	std	Y+23, r1	; 0x17

	 for(int j=0;INPUT[j]!='\0';j++){
     c4c:	1b 8a       	std	Y+19, r1	; 0x13
     c4e:	1a 8a       	std	Y+18, r1	; 0x12
     c50:	e2 c0       	rjmp	.+452    	; 0xe16 <CAL_OPERATION+0x1e6>




	        if(IsDigit(INPUT[j])){
     c52:	8a 89       	ldd	r24, Y+18	; 0x12
     c54:	9b 89       	ldd	r25, Y+19	; 0x13
     c56:	fc 01       	movw	r30, r24
     c58:	ee 57       	subi	r30, 0x7E	; 126
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	0e 94 9c 19 	call	0x3338	; 0x3338 <IsDigit>
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	21 f1       	breq	.+72     	; 0xcae <CAL_OPERATION+0x7e>
	        num=num*10+(INPUT[j]-'0');
     c66:	8c 89       	ldd	r24, Y+20	; 0x14
     c68:	9d 89       	ldd	r25, Y+21	; 0x15
     c6a:	ae 89       	ldd	r26, Y+22	; 0x16
     c6c:	bf 89       	ldd	r27, Y+23	; 0x17
     c6e:	2a e0       	ldi	r18, 0x0A	; 10
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__mulsi3>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	8a 89       	ldd	r24, Y+18	; 0x12
     c84:	9b 89       	ldd	r25, Y+19	; 0x13
     c86:	fc 01       	movw	r30, r24
     c88:	ee 57       	subi	r30, 0x7E	; 126
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	c0 97       	sbiw	r24, 0x30	; 48
     c94:	aa 27       	eor	r26, r26
     c96:	97 fd       	sbrc	r25, 7
     c98:	a0 95       	com	r26
     c9a:	ba 2f       	mov	r27, r26
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	a4 1f       	adc	r26, r20
     ca2:	b5 1f       	adc	r27, r21
     ca4:	8c 8b       	std	Y+20, r24	; 0x14
     ca6:	9d 8b       	std	Y+21, r25	; 0x15
     ca8:	ae 8b       	std	Y+22, r26	; 0x16
     caa:	bf 8b       	std	Y+23, r27	; 0x17
     cac:	af c0       	rjmp	.+350    	; 0xe0c <CAL_OPERATION+0x1dc>
	        }

	        else if(IsOp(INPUT[j])){
     cae:	8a 89       	ldd	r24, Y+18	; 0x12
     cb0:	9b 89       	ldd	r25, Y+19	; 0x13
     cb2:	fc 01       	movw	r30, r24
     cb4:	ee 57       	subi	r30, 0x7E	; 126
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	80 81       	ld	r24, Z
     cba:	0e 94 b8 19 	call	0x3370	; 0x3370 <IsOp>
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <CAL_OPERATION+0x94>
     cc2:	a4 c0       	rjmp	.+328    	; 0xe0c <CAL_OPERATION+0x1dc>

	             Push(num,&numbers);
     cc4:	8c 89       	ldd	r24, Y+20	; 0x14
     cc6:	9d 89       	ldd	r25, Y+21	; 0x15
     cc8:	ae 89       	ldd	r26, Y+22	; 0x16
     cca:	bf 89       	ldd	r27, Y+23	; 0x17
     ccc:	24 ef       	ldi	r18, 0xF4	; 244
     cce:	32 e0       	ldi	r19, 0x02	; 2
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	a9 01       	movw	r20, r18
     cd6:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>
	             if(StackSize(&numbers)>=2){
     cda:	84 ef       	ldi	r24, 0xF4	; 244
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	0e 94 17 19 	call	0x322e	; 0x322e <StackSize>
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	91 05       	cpc	r25, r1
     ce6:	0c f4       	brge	.+2      	; 0xcea <CAL_OPERATION+0xba>
     ce8:	82 c0       	rjmp	.+260    	; 0xdee <CAL_OPERATION+0x1be>

	            s32 num2,num1,res;
	            u8 oper=StackTop_op(&op),pp;
     cea:	8c ef       	ldi	r24, 0xFC	; 252
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 82 19 	call	0x3304	; 0x3304 <StackTop_op>
     cf2:	8d 87       	std	Y+13, r24	; 0x0d

	            if(oper=='x'||oper=='/'){
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	88 37       	cpi	r24, 0x78	; 120
     cf8:	21 f0       	breq	.+8      	; 0xd02 <CAL_OPERATION+0xd2>
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	8f 32       	cpi	r24, 0x2F	; 47
     cfe:	09 f0       	breq	.+2      	; 0xd02 <CAL_OPERATION+0xd2>
     d00:	76 c0       	rjmp	.+236    	; 0xdee <CAL_OPERATION+0x1be>
	             Pop(&num2,&numbers);
     d02:	ce 01       	movw	r24, r28
     d04:	49 96       	adiw	r24, 0x19	; 25
     d06:	24 ef       	ldi	r18, 0xF4	; 244
     d08:	32 e0       	ldi	r19, 0x02	; 2
     d0a:	b9 01       	movw	r22, r18
     d0c:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	             Pop(&num1,&numbers);
     d10:	ce 01       	movw	r24, r28
     d12:	4d 96       	adiw	r24, 0x1d	; 29
     d14:	24 ef       	ldi	r18, 0xF4	; 244
     d16:	32 e0       	ldi	r19, 0x02	; 2
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	             if(oper=='x'){
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	88 37       	cpi	r24, 0x78	; 120
     d22:	d1 f4       	brne	.+52     	; 0xd58 <CAL_OPERATION+0x128>
	                   Pop_op(&pp,&op);
     d24:	ce 01       	movw	r24, r28
     d26:	81 96       	adiw	r24, 0x21	; 33
     d28:	2c ef       	ldi	r18, 0xFC	; 252
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	b9 01       	movw	r22, r18
     d2e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <Pop_op>
	                 res=num1*num2;
     d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d36:	af 8d       	ldd	r26, Y+31	; 0x1f
     d38:	b8 a1       	ldd	r27, Y+32	; 0x20
     d3a:	29 8d       	ldd	r18, Y+25	; 0x19
     d3c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d3e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d40:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d42:	bc 01       	movw	r22, r24
     d44:	cd 01       	movw	r24, r26
     d46:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__mulsi3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8e 87       	std	Y+14, r24	; 0x0e
     d50:	9f 87       	std	Y+15, r25	; 0x0f
     d52:	a8 8b       	std	Y+16, r26	; 0x10
     d54:	b9 8b       	std	Y+17, r27	; 0x11
     d56:	40 c0       	rjmp	.+128    	; 0xdd8 <CAL_OPERATION+0x1a8>
	             }
	             else if(oper=='/'){
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	8f 32       	cpi	r24, 0x2F	; 47
     d5c:	e9 f5       	brne	.+122    	; 0xdd8 <CAL_OPERATION+0x1a8>
	                  Pop_op(&pp,&op);
     d5e:	ce 01       	movw	r24, r28
     d60:	81 96       	adiw	r24, 0x21	; 33
     d62:	2c ef       	ldi	r18, 0xFC	; 252
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	b9 01       	movw	r22, r18
     d68:	0e 94 7f 18 	call	0x30fe	; 0x30fe <Pop_op>
	                  if(num2==0){
     d6c:	89 8d       	ldd	r24, Y+25	; 0x19
     d6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d70:	ab 8d       	ldd	r26, Y+27	; 0x1b
     d72:	bc 8d       	ldd	r27, Y+28	; 0x1c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	e1 f4       	brne	.+56     	; 0xdb4 <CAL_OPERATION+0x184>
	                	  LCD_enuSendCommand(0xc0);//////GO TO SECOND LINE IN LCD
     d7c:	80 ec       	ldi	r24, 0xC0	; 192
     d7e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_enuSendCommand>
	                	  for(s32 it=0;Error[it]!='\0';it++){
     d82:	19 86       	std	Y+9, r1	; 0x09
     d84:	1a 86       	std	Y+10, r1	; 0x0a
     d86:	1b 86       	std	Y+11, r1	; 0x0b
     d88:	1c 86       	std	Y+12, r1	; 0x0c
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	ab 85       	ldd	r26, Y+11	; 0x0b
     d90:	bc 85       	ldd	r27, Y+12	; 0x0c
     d92:	fc 01       	movw	r30, r24
     d94:	e8 59       	subi	r30, 0x98	; 152
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	80 81       	ld	r24, Z
     d9a:	88 23       	and	r24, r24
     d9c:	59 f0       	breq	.+22     	; 0xdb4 <CAL_OPERATION+0x184>
	                		  LCD_enuDisplayChar(Error[it]);
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	ab 85       	ldd	r26, Y+11	; 0x0b
     da4:	bc 85       	ldd	r27, Y+12	; 0x0c
     da6:	fc 01       	movw	r30, r24
     da8:	e8 59       	subi	r30, 0x98	; 152
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	80 81       	ld	r24, Z
     dae:	0e 94 a4 0a 	call	0x1548	; 0x1548 <LCD_enuDisplayChar>
     db2:	fb c0       	rjmp	.+502    	; 0xfaa <CAL_OPERATION+0x37a>
	                		  return;
	                	  }
	                  }
	                 res=num1/num2;
     db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db8:	af 8d       	ldd	r26, Y+31	; 0x1f
     dba:	b8 a1       	ldd	r27, Y+32	; 0x20
     dbc:	29 8d       	ldd	r18, Y+25	; 0x19
     dbe:	3a 8d       	ldd	r19, Y+26	; 0x1a
     dc0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     dc2:	5c 8d       	ldd	r21, Y+28	; 0x1c
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
     dcc:	da 01       	movw	r26, r20
     dce:	c9 01       	movw	r24, r18
     dd0:	8e 87       	std	Y+14, r24	; 0x0e
     dd2:	9f 87       	std	Y+15, r25	; 0x0f
     dd4:	a8 8b       	std	Y+16, r26	; 0x10
     dd6:	b9 8b       	std	Y+17, r27	; 0x11
	             }

	             Push(res,&numbers);
     dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
     dda:	9f 85       	ldd	r25, Y+15	; 0x0f
     ddc:	a8 89       	ldd	r26, Y+16	; 0x10
     dde:	b9 89       	ldd	r27, Y+17	; 0x11
     de0:	24 ef       	ldi	r18, 0xF4	; 244
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	a9 01       	movw	r20, r18
     dea:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>
	            }

	        }


	    Push_op(INPUT[j],&op);
     dee:	8a 89       	ldd	r24, Y+18	; 0x12
     df0:	9b 89       	ldd	r25, Y+19	; 0x13
     df2:	fc 01       	movw	r30, r24
     df4:	ee 57       	subi	r30, 0x7E	; 126
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	80 81       	ld	r24, Z
     dfa:	2c ef       	ldi	r18, 0xFC	; 252
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	0e 94 5e 18 	call	0x30bc	; 0x30bc <Push_op>
	     num=0;
     e04:	1c 8a       	std	Y+20, r1	; 0x14
     e06:	1d 8a       	std	Y+21, r1	; 0x15
     e08:	1e 8a       	std	Y+22, r1	; 0x16
     e0a:	1f 8a       	std	Y+23, r1	; 0x17


void CAL_OPERATION(){
	s32 num=0;

	 for(int j=0;INPUT[j]!='\0';j++){
     e0c:	8a 89       	ldd	r24, Y+18	; 0x12
     e0e:	9b 89       	ldd	r25, Y+19	; 0x13
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	9b 8b       	std	Y+19, r25	; 0x13
     e14:	8a 8b       	std	Y+18, r24	; 0x12
     e16:	8a 89       	ldd	r24, Y+18	; 0x12
     e18:	9b 89       	ldd	r25, Y+19	; 0x13
     e1a:	fc 01       	movw	r30, r24
     e1c:	ee 57       	subi	r30, 0x7E	; 126
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	80 81       	ld	r24, Z
     e22:	88 23       	and	r24, r24
     e24:	09 f0       	breq	.+2      	; 0xe28 <CAL_OPERATION+0x1f8>
     e26:	15 cf       	rjmp	.-470    	; 0xc52 <CAL_OPERATION+0x22>
	     num=0;
	}


	        }
	 Push(num,&numbers);
     e28:	8c 89       	ldd	r24, Y+20	; 0x14
     e2a:	9d 89       	ldd	r25, Y+21	; 0x15
     e2c:	ae 89       	ldd	r26, Y+22	; 0x16
     e2e:	bf 89       	ldd	r27, Y+23	; 0x17
     e30:	24 ef       	ldi	r18, 0xF4	; 244
     e32:	32 e0       	ldi	r19, 0x02	; 2
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	a9 01       	movw	r20, r18
     e3a:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>
	 u8 P=StackTop_op(&op);
     e3e:	8c ef       	ldi	r24, 0xFC	; 252
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 82 19 	call	0x3304	; 0x3304 <StackTop_op>
     e46:	88 8f       	std	Y+24, r24	; 0x18

	 if(P=='x'||P=='/'){
     e48:	88 8d       	ldd	r24, Y+24	; 0x18
     e4a:	88 37       	cpi	r24, 0x78	; 120
     e4c:	21 f0       	breq	.+8      	; 0xe56 <CAL_OPERATION+0x226>
     e4e:	88 8d       	ldd	r24, Y+24	; 0x18
     e50:	8f 32       	cpi	r24, 0x2F	; 47
     e52:	09 f0       	breq	.+2      	; 0xe56 <CAL_OPERATION+0x226>
     e54:	8e c0       	rjmp	.+284    	; 0xf72 <CAL_OPERATION+0x342>
	     s32 num1,num2,res;
	      Pop(&num2,&numbers);
     e56:	ce 01       	movw	r24, r28
     e58:	86 96       	adiw	r24, 0x26	; 38
     e5a:	24 ef       	ldi	r18, 0xF4	; 244
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	b9 01       	movw	r22, r18
     e60:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	       Pop(&num1,&numbers);
     e64:	ce 01       	movw	r24, r28
     e66:	82 96       	adiw	r24, 0x22	; 34
     e68:	24 ef       	ldi	r18, 0xF4	; 244
     e6a:	32 e0       	ldi	r19, 0x02	; 2
     e6c:	b9 01       	movw	r22, r18
     e6e:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	       if(P=='x')
     e72:	88 8d       	ldd	r24, Y+24	; 0x18
     e74:	88 37       	cpi	r24, 0x78	; 120
     e76:	91 f4       	brne	.+36     	; 0xe9c <CAL_OPERATION+0x26c>
	       res=num1*num2;
     e78:	8a a1       	ldd	r24, Y+34	; 0x22
     e7a:	9b a1       	ldd	r25, Y+35	; 0x23
     e7c:	ac a1       	ldd	r26, Y+36	; 0x24
     e7e:	bd a1       	ldd	r27, Y+37	; 0x25
     e80:	2e a1       	ldd	r18, Y+38	; 0x26
     e82:	3f a1       	ldd	r19, Y+39	; 0x27
     e84:	48 a5       	ldd	r20, Y+40	; 0x28
     e86:	59 a5       	ldd	r21, Y+41	; 0x29
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__mulsi3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	af 83       	std	Y+7, r26	; 0x07
     e9a:	b8 87       	std	Y+8, r27	; 0x08
	        if(P=='/'){
     e9c:	88 8d       	ldd	r24, Y+24	; 0x18
     e9e:	8f 32       	cpi	r24, 0x2F	; 47
     ea0:	09 f0       	breq	.+2      	; 0xea4 <CAL_OPERATION+0x274>
     ea2:	42 c0       	rjmp	.+132    	; 0xf28 <CAL_OPERATION+0x2f8>
	           res=num1/num2;
     ea4:	8a a1       	ldd	r24, Y+34	; 0x22
     ea6:	9b a1       	ldd	r25, Y+35	; 0x23
     ea8:	ac a1       	ldd	r26, Y+36	; 0x24
     eaa:	bd a1       	ldd	r27, Y+37	; 0x25
     eac:	2e a1       	ldd	r18, Y+38	; 0x26
     eae:	3f a1       	ldd	r19, Y+39	; 0x27
     eb0:	48 a5       	ldd	r20, Y+40	; 0x28
     eb2:	59 a5       	ldd	r21, Y+41	; 0x29
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
     ebc:	da 01       	movw	r26, r20
     ebe:	c9 01       	movw	r24, r18
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	af 83       	std	Y+7, r26	; 0x07
     ec6:	b8 87       	std	Y+8, r27	; 0x08
	           if(num2==0){
     ec8:	8e a1       	ldd	r24, Y+38	; 0x26
     eca:	9f a1       	ldd	r25, Y+39	; 0x27
     ecc:	a8 a5       	ldd	r26, Y+40	; 0x28
     ece:	b9 a5       	ldd	r27, Y+41	; 0x29
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	41 f5       	brne	.+80     	; 0xf28 <CAL_OPERATION+0x2f8>
	        	   LCD_enuSendCommand(0xc0);
     ed8:	80 ec       	ldi	r24, 0xC0	; 192
     eda:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_enuSendCommand>
	        for(s32 it=0;Error[it]!='\0';it++){
     ede:	19 82       	std	Y+1, r1	; 0x01
     ee0:	1a 82       	std	Y+2, r1	; 0x02
     ee2:	1b 82       	std	Y+3, r1	; 0x03
     ee4:	1c 82       	std	Y+4, r1	; 0x04
     ee6:	15 c0       	rjmp	.+42     	; 0xf12 <CAL_OPERATION+0x2e2>

	       	       LCD_enuDisplayChar(Error[it]);
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	ab 81       	ldd	r26, Y+3	; 0x03
     eee:	bc 81       	ldd	r27, Y+4	; 0x04
     ef0:	fc 01       	movw	r30, r24
     ef2:	e8 59       	subi	r30, 0x98	; 152
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	80 81       	ld	r24, Z
     ef8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <LCD_enuDisplayChar>
	       res=num1*num2;
	        if(P=='/'){
	           res=num1/num2;
	           if(num2==0){
	        	   LCD_enuSendCommand(0xc0);
	        for(s32 it=0;Error[it]!='\0';it++){
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	ab 81       	ldd	r26, Y+3	; 0x03
     f02:	bc 81       	ldd	r27, Y+4	; 0x04
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	a1 1d       	adc	r26, r1
     f08:	b1 1d       	adc	r27, r1
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	ab 83       	std	Y+3, r26	; 0x03
     f10:	bc 83       	std	Y+4, r27	; 0x04
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	fc 01       	movw	r30, r24
     f1c:	e8 59       	subi	r30, 0x98	; 152
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 81       	ld	r24, Z
     f22:	88 23       	and	r24, r24
     f24:	09 f7       	brne	.-62     	; 0xee8 <CAL_OPERATION+0x2b8>
     f26:	41 c0       	rjmp	.+130    	; 0xfaa <CAL_OPERATION+0x37a>
	       	                	  }
	        return;
	        }

	        }
	       Push(res,&numbers);
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	af 81       	ldd	r26, Y+7	; 0x07
     f2e:	b8 85       	ldd	r27, Y+8	; 0x08
     f30:	24 ef       	ldi	r18, 0xF4	; 244
     f32:	32 e0       	ldi	r19, 0x02	; 2
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	a9 01       	movw	r20, r18
     f3a:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>

	        Pop_op(&P,&op);
     f3e:	ce 01       	movw	r24, r28
     f40:	48 96       	adiw	r24, 0x18	; 24
     f42:	2c ef       	ldi	r18, 0xFC	; 252
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	b9 01       	movw	r22, r18
     f48:	0e 94 7f 18 	call	0x30fe	; 0x30fe <Pop_op>
     f4c:	12 c0       	rjmp	.+36     	; 0xf72 <CAL_OPERATION+0x342>

	 }
	 /////REVERSE THE INPUT
	 while(StackEmpty(&numbers)){
	 	s32 s1_top;
	 	Pop(&s1_top,&numbers);
     f4e:	ce 01       	movw	r24, r28
     f50:	8a 96       	adiw	r24, 0x2a	; 42
     f52:	24 ef       	ldi	r18, 0xF4	; 244
     f54:	32 e0       	ldi	r19, 0x02	; 2
     f56:	b9 01       	movw	r22, r18
     f58:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	 	Push(s1_top,&rev_numbers);
     f5c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f5e:	9b a5       	ldd	r25, Y+43	; 0x2b
     f60:	ac a5       	ldd	r26, Y+44	; 0x2c
     f62:	bd a5       	ldd	r27, Y+45	; 0x2d
     f64:	22 e6       	ldi	r18, 0x62	; 98
     f66:	31 e0       	ldi	r19, 0x01	; 1
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	a9 01       	movw	r20, r18
     f6e:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>

	        Pop_op(&P,&op);

	 }
	 /////REVERSE THE INPUT
	 while(StackEmpty(&numbers)){
     f72:	84 ef       	ldi	r24, 0xF4	; 244
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 07 19 	call	0x320e	; 0x320e <StackEmpty>
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	41 f7       	brne	.-48     	; 0xf4e <CAL_OPERATION+0x31e>
     f7e:	0d c0       	rjmp	.+26     	; 0xf9a <CAL_OPERATION+0x36a>
	 	Push(s1_top,&rev_numbers);

	 }
	 while(StackEmpty_op(&op)){
	 		u8 p1_top;
	 		Pop_op(&p1_top,&op);
     f80:	ce 01       	movw	r24, r28
     f82:	8e 96       	adiw	r24, 0x2e	; 46
     f84:	2c ef       	ldi	r18, 0xFC	; 252
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	b9 01       	movw	r22, r18
     f8a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <Pop_op>
	 		Push_op(p1_top,&rev_op);
     f8e:	8e a5       	ldd	r24, Y+46	; 0x2e
     f90:	26 e9       	ldi	r18, 0x96	; 150
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	b9 01       	movw	r22, r18
     f96:	0e 94 5e 18 	call	0x30bc	; 0x30bc <Push_op>
	 	s32 s1_top;
	 	Pop(&s1_top,&numbers);
	 	Push(s1_top,&rev_numbers);

	 }
	 while(StackEmpty_op(&op)){
     f9a:	8c ef       	ldi	r24, 0xFC	; 252
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <StackEmpty_op>
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <CAL_OPERATION+0x350>


	 	}


	  CAL_OUTPUT();
     fa6:	0e 94 de 07 	call	0xfbc	; 0xfbc <CAL_OUTPUT>

}
     faa:	ae 96       	adiw	r28, 0x2e	; 46
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <CAL_OUTPUT>:


void CAL_OUTPUT(){
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	63 97       	sbiw	r28, 0x13	; 19
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	64 c0       	rjmp	.+200    	; 0x10a2 <CAL_OUTPUT+0xe6>
	s32 result;

	 while(StackEmpty_op(&rev_op)){

	           s32 res=0;
     fda:	19 82       	std	Y+1, r1	; 0x01
     fdc:	1a 82       	std	Y+2, r1	; 0x02
     fde:	1b 82       	std	Y+3, r1	; 0x03
     fe0:	1c 82       	std	Y+4, r1	; 0x04
	       s32 top_num1;
	       Pop(&top_num1,&rev_numbers);
     fe2:	ce 01       	movw	r24, r28
     fe4:	09 96       	adiw	r24, 0x09	; 9
     fe6:	22 e6       	ldi	r18, 0x62	; 98
     fe8:	31 e0       	ldi	r19, 0x01	; 1
     fea:	b9 01       	movw	r22, r18
     fec:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	        s32 top_num2;
	       Pop(&top_num2,&rev_numbers);
     ff0:	ce 01       	movw	r24, r28
     ff2:	0d 96       	adiw	r24, 0x0d	; 13
     ff4:	22 e6       	ldi	r18, 0x62	; 98
     ff6:	31 e0       	ldi	r19, 0x01	; 1
     ff8:	b9 01       	movw	r22, r18
     ffa:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	        u8 opre;
	        Pop_op(&opre,&rev_op);
     ffe:	ce 01       	movw	r24, r28
    1000:	41 96       	adiw	r24, 0x11	; 17
    1002:	26 e9       	ldi	r18, 0x96	; 150
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	b9 01       	movw	r22, r18
    1008:	0e 94 7f 18 	call	0x30fe	; 0x30fe <Pop_op>
	        switch(opre){
    100c:	89 89       	ldd	r24, Y+17	; 0x11
    100e:	e8 2e       	mov	r14, r24
    1010:	ff 24       	eor	r15, r15
    1012:	fb 8a       	std	Y+19, r15	; 0x13
    1014:	ea 8a       	std	Y+18, r14	; 0x12
    1016:	0a 89       	ldd	r16, Y+18	; 0x12
    1018:	1b 89       	ldd	r17, Y+19	; 0x13
    101a:	0b 32       	cpi	r16, 0x2B	; 43
    101c:	11 05       	cpc	r17, r1
    101e:	31 f0       	breq	.+12     	; 0x102c <CAL_OUTPUT+0x70>
    1020:	2a 89       	ldd	r18, Y+18	; 0x12
    1022:	3b 89       	ldd	r19, Y+19	; 0x13
    1024:	2d 32       	cpi	r18, 0x2D	; 45
    1026:	31 05       	cpc	r19, r1
    1028:	e9 f0       	breq	.+58     	; 0x1064 <CAL_OUTPUT+0xa8>
    102a:	3b c0       	rjmp	.+118    	; 0x10a2 <CAL_OUTPUT+0xe6>

	        case'+':

	        res=top_num1+top_num2;
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	4b 85       	ldd	r20, Y+11	; 0x0b
    1032:	5c 85       	ldd	r21, Y+12	; 0x0c
    1034:	8d 85       	ldd	r24, Y+13	; 0x0d
    1036:	9e 85       	ldd	r25, Y+14	; 0x0e
    1038:	af 85       	ldd	r26, Y+15	; 0x0f
    103a:	b8 89       	ldd	r27, Y+16	; 0x10
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	a4 1f       	adc	r26, r20
    1042:	b5 1f       	adc	r27, r21
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	ab 83       	std	Y+3, r26	; 0x03
    104a:	bc 83       	std	Y+4, r27	; 0x04
	        Push(res,&rev_numbers);
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	ab 81       	ldd	r26, Y+3	; 0x03
    1052:	bc 81       	ldd	r27, Y+4	; 0x04
    1054:	22 e6       	ldi	r18, 0x62	; 98
    1056:	31 e0       	ldi	r19, 0x01	; 1
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	a9 01       	movw	r20, r18
    105e:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>
    1062:	1f c0       	rjmp	.+62     	; 0x10a2 <CAL_OUTPUT+0xe6>
	        break;

	         case'-':
	        res=top_num1-top_num2;
    1064:	29 85       	ldd	r18, Y+9	; 0x09
    1066:	3a 85       	ldd	r19, Y+10	; 0x0a
    1068:	4b 85       	ldd	r20, Y+11	; 0x0b
    106a:	5c 85       	ldd	r21, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	af 85       	ldd	r26, Y+15	; 0x0f
    1072:	b8 89       	ldd	r27, Y+16	; 0x10
    1074:	79 01       	movw	r14, r18
    1076:	8a 01       	movw	r16, r20
    1078:	e8 1a       	sub	r14, r24
    107a:	f9 0a       	sbc	r15, r25
    107c:	0a 0b       	sbc	r16, r26
    107e:	1b 0b       	sbc	r17, r27
    1080:	d8 01       	movw	r26, r16
    1082:	c7 01       	movw	r24, r14
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	ab 83       	std	Y+3, r26	; 0x03
    108a:	bc 83       	std	Y+4, r27	; 0x04
	        Push(res,&rev_numbers);
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	ab 81       	ldd	r26, Y+3	; 0x03
    1092:	bc 81       	ldd	r27, Y+4	; 0x04
    1094:	22 e6       	ldi	r18, 0x62	; 98
    1096:	31 e0       	ldi	r19, 0x01	; 1
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	a9 01       	movw	r20, r18
    109e:	0e 94 2b 18 	call	0x3056	; 0x3056 <Push>


void CAL_OUTPUT(){
	s32 result;

	 while(StackEmpty_op(&rev_op)){
    10a2:	86 e9       	ldi	r24, 0x96	; 150
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <StackEmpty_op>
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <CAL_OUTPUT+0xf4>
    10ae:	95 cf       	rjmp	.-214    	; 0xfda <CAL_OUTPUT+0x1e>
	         case'-':
	        res=top_num1-top_num2;
	        Push(res,&rev_numbers);
	        }
	 }
	        Pop(&result, &rev_numbers );
    10b0:	ce 01       	movw	r24, r28
    10b2:	05 96       	adiw	r24, 0x05	; 5
    10b4:	22 e6       	ldi	r18, 0x62	; 98
    10b6:	31 e0       	ldi	r19, 0x01	; 1
    10b8:	b9 01       	movw	r22, r18
    10ba:	0e 94 a7 18 	call	0x314e	; 0x314e <Pop>
	        LCD_enuSendCommand(0xc0);/////GO TO SECOND LINE IN LCD
    10be:	80 ec       	ldi	r24, 0xC0	; 192
    10c0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_enuSendCommand>


	        LCD_enuDisplayIntegerNum(result);
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	af 81       	ldd	r26, Y+7	; 0x07
    10ca:	b8 85       	ldd	r27, Y+8	; 0x08
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_enuDisplayIntegerNum>



	        }
    10d4:	63 96       	adiw	r28, 0x13	; 19
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	08 95       	ret

000010ee <Clear_CAL>:




void Clear_CAL(){
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	 LCD_Clear();
    10f6:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_Clear>
	 ClearStack(&numbers);
    10fa:	84 ef       	ldi	r24, 0xF4	; 244
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	0e 94 27 19 	call	0x324e	; 0x324e <ClearStack>
	 ClearStack(&numbers);
    1102:	84 ef       	ldi	r24, 0xF4	; 244
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 27 19 	call	0x324e	; 0x324e <ClearStack>
	 ClearStack_op(&op);
    110a:	8c ef       	ldi	r24, 0xFC	; 252
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 37 19 	call	0x326e	; 0x326e <ClearStack_op>
	 ClearStack_op(&rev_op);
    1112:	86 e9       	ldi	r24, 0x96	; 150
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 37 19 	call	0x326e	; 0x326e <ClearStack_op>
i=0;
    111a:	10 92 92 00 	sts	0x0092, r1
    111e:	10 92 93 00 	sts	0x0093, r1
    1122:	10 92 94 00 	sts	0x0094, r1
    1126:	10 92 95 00 	sts	0x0095, r1

}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	e9 97       	sbiw	r28, 0x39	; 57
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1144:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	62 e0       	ldi	r22, 0x02	; 2
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	67 e0       	ldi	r22, 0x07	; 7
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	66 e0       	ldi	r22, 0x06	; 6
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	65 e0       	ldi	r22, 0x05	; 5
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	64 e0       	ldi	r22, 0x04	; 4
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	ac e0       	ldi	r26, 0x0C	; 12
    1192:	b2 e4       	ldi	r27, 0x42	; 66
    1194:	8d ab       	std	Y+53, r24	; 0x35
    1196:	9e ab       	std	Y+54, r25	; 0x36
    1198:	af ab       	std	Y+55, r26	; 0x37
    119a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119c:	6d a9       	ldd	r22, Y+53	; 0x35
    119e:	7e a9       	ldd	r23, Y+54	; 0x36
    11a0:	8f a9       	ldd	r24, Y+55	; 0x37
    11a2:	98 ad       	ldd	r25, Y+56	; 0x38
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a e7       	ldi	r20, 0x7A	; 122
    11aa:	53 e4       	ldi	r21, 0x43	; 67
    11ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	89 ab       	std	Y+49, r24	; 0x31
    11b6:	9a ab       	std	Y+50, r25	; 0x32
    11b8:	ab ab       	std	Y+51, r26	; 0x33
    11ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	2c f4       	brge	.+10     	; 0x11de <LCD_enuInit+0xae>
		__ticks = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	98 ab       	std	Y+48, r25	; 0x30
    11da:	8f a7       	std	Y+47, r24	; 0x2f
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    11de:	69 a9       	ldd	r22, Y+49	; 0x31
    11e0:	7a a9       	ldd	r23, Y+50	; 0x32
    11e2:	8b a9       	ldd	r24, Y+51	; 0x33
    11e4:	9c a9       	ldd	r25, Y+52	; 0x34
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	4c f5       	brge	.+82     	; 0x1248 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f6:	6d a9       	ldd	r22, Y+53	; 0x35
    11f8:	7e a9       	ldd	r23, Y+54	; 0x36
    11fa:	8f a9       	ldd	r24, Y+55	; 0x37
    11fc:	98 ad       	ldd	r25, Y+56	; 0x38
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	98 ab       	std	Y+48, r25	; 0x30
    121c:	8f a7       	std	Y+47, r24	; 0x2f
    121e:	0f c0       	rjmp	.+30     	; 0x123e <LCD_enuInit+0x10e>
    1220:	89 e1       	ldi	r24, 0x19	; 25
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e a7       	std	Y+46, r25	; 0x2e
    1226:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1228:	8d a5       	ldd	r24, Y+45	; 0x2d
    122a:	9e a5       	ldd	r25, Y+46	; 0x2e
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <LCD_enuInit+0xfc>
    1230:	9e a7       	std	Y+46, r25	; 0x2e
    1232:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	8f a5       	ldd	r24, Y+47	; 0x2f
    1236:	98 a9       	ldd	r25, Y+48	; 0x30
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	98 ab       	std	Y+48, r25	; 0x30
    123c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1240:	98 a9       	ldd	r25, Y+48	; 0x30
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <LCD_enuInit+0xf0>
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	69 a9       	ldd	r22, Y+49	; 0x31
    124a:	7a a9       	ldd	r23, Y+50	; 0x32
    124c:	8b a9       	ldd	r24, Y+51	; 0x33
    124e:	9c a9       	ldd	r25, Y+52	; 0x34
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	98 ab       	std	Y+48, r25	; 0x30
    125a:	8f a7       	std	Y+47, r24	; 0x2f
    125c:	8f a5       	ldd	r24, Y+47	; 0x2f
    125e:	98 a9       	ldd	r25, Y+48	; 0x30
    1260:	9c a7       	std	Y+44, r25	; 0x2c
    1262:	8b a7       	std	Y+43, r24	; 0x2b
    1264:	8b a5       	ldd	r24, Y+43	; 0x2b
    1266:	9c a5       	ldd	r25, Y+44	; 0x2c
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <LCD_enuInit+0x138>
    126c:	9c a7       	std	Y+44, r25	; 0x2c
    126e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
    1270:	88 e2       	ldi	r24, 0x28	; 40
    1272:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_invidSendCommend>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8f a3       	std	Y+39, r24	; 0x27
    1280:	98 a7       	std	Y+40, r25	; 0x28
    1282:	a9 a7       	std	Y+41, r26	; 0x29
    1284:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1286:	6f a1       	ldd	r22, Y+39	; 0x27
    1288:	78 a5       	ldd	r23, Y+40	; 0x28
    128a:	89 a5       	ldd	r24, Y+41	; 0x29
    128c:	9a a5       	ldd	r25, Y+42	; 0x2a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a e7       	ldi	r20, 0x7A	; 122
    1294:	53 e4       	ldi	r21, 0x43	; 67
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8b a3       	std	Y+35, r24	; 0x23
    12a0:	9c a3       	std	Y+36, r25	; 0x24
    12a2:	ad a3       	std	Y+37, r26	; 0x25
    12a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12a6:	6b a1       	ldd	r22, Y+35	; 0x23
    12a8:	7c a1       	ldd	r23, Y+36	; 0x24
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <LCD_enuInit+0x198>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9a a3       	std	Y+34, r25	; 0x22
    12c4:	89 a3       	std	Y+33, r24	; 0x21
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <LCD_enuInit+0x216>
	else if (__tmp > 65535)
    12c8:	6b a1       	ldd	r22, Y+35	; 0x23
    12ca:	7c a1       	ldd	r23, Y+36	; 0x24
    12cc:	8d a1       	ldd	r24, Y+37	; 0x25
    12ce:	9e a1       	ldd	r25, Y+38	; 0x26
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	4c f5       	brge	.+82     	; 0x1332 <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e0:	6f a1       	ldd	r22, Y+39	; 0x27
    12e2:	78 a5       	ldd	r23, Y+40	; 0x28
    12e4:	89 a5       	ldd	r24, Y+41	; 0x29
    12e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9a a3       	std	Y+34, r25	; 0x22
    1306:	89 a3       	std	Y+33, r24	; 0x21
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <LCD_enuInit+0x1f8>
    130a:	89 e1       	ldi	r24, 0x19	; 25
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	98 a3       	std	Y+32, r25	; 0x20
    1310:	8f 8f       	std	Y+31, r24	; 0x1f
    1312:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1314:	98 a1       	ldd	r25, Y+32	; 0x20
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_enuInit+0x1e6>
    131a:	98 a3       	std	Y+32, r25	; 0x20
    131c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	89 a1       	ldd	r24, Y+33	; 0x21
    1320:	9a a1       	ldd	r25, Y+34	; 0x22
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9a a3       	std	Y+34, r25	; 0x22
    1326:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	89 a1       	ldd	r24, Y+33	; 0x21
    132a:	9a a1       	ldd	r25, Y+34	; 0x22
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <LCD_enuInit+0x1da>
    1330:	14 c0       	rjmp	.+40     	; 0x135a <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	6b a1       	ldd	r22, Y+35	; 0x23
    1334:	7c a1       	ldd	r23, Y+36	; 0x24
    1336:	8d a1       	ldd	r24, Y+37	; 0x25
    1338:	9e a1       	ldd	r25, Y+38	; 0x26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	9e 8f       	std	Y+30, r25	; 0x1e
    134c:	8d 8f       	std	Y+29, r24	; 0x1d
    134e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_enuInit+0x222>
    1356:	9e 8f       	std	Y+30, r25	; 0x1e
    1358:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    135a:	8f e0       	ldi	r24, 0x0F	; 15
    135c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_invidSendCommend>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e8       	ldi	r26, 0x80	; 128
    1366:	bf e3       	ldi	r27, 0x3F	; 63
    1368:	89 8f       	std	Y+25, r24	; 0x19
    136a:	9a 8f       	std	Y+26, r25	; 0x1a
    136c:	ab 8f       	std	Y+27, r26	; 0x1b
    136e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1370:	69 8d       	ldd	r22, Y+25	; 0x19
    1372:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1374:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1376:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4a e7       	ldi	r20, 0x7A	; 122
    137e:	53 e4       	ldi	r21, 0x43	; 67
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8d 8b       	std	Y+21, r24	; 0x15
    138a:	9e 8b       	std	Y+22, r25	; 0x16
    138c:	af 8b       	std	Y+23, r26	; 0x17
    138e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e8       	ldi	r20, 0x80	; 128
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a4:	88 23       	and	r24, r24
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <LCD_enuInit+0x282>
		__ticks = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c 8b       	std	Y+20, r25	; 0x14
    13ae:	8b 8b       	std	Y+19, r24	; 0x13
    13b0:	3f c0       	rjmp	.+126    	; 0x1430 <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    13b2:	6d 89       	ldd	r22, Y+21	; 0x15
    13b4:	7e 89       	ldd	r23, Y+22	; 0x16
    13b6:	8f 89       	ldd	r24, Y+23	; 0x17
    13b8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
    13be:	4f e7       	ldi	r20, 0x7F	; 127
    13c0:	57 e4       	ldi	r21, 0x47	; 71
    13c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c6:	18 16       	cp	r1, r24
    13c8:	4c f5       	brge	.+82     	; 0x141c <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ca:	69 8d       	ldd	r22, Y+25	; 0x19
    13cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9c 8b       	std	Y+20, r25	; 0x14
    13f0:	8b 8b       	std	Y+19, r24	; 0x13
    13f2:	0f c0       	rjmp	.+30     	; 0x1412 <LCD_enuInit+0x2e2>
    13f4:	89 e1       	ldi	r24, 0x19	; 25
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9a 8b       	std	Y+18, r25	; 0x12
    13fa:	89 8b       	std	Y+17, r24	; 0x11
    13fc:	89 89       	ldd	r24, Y+17	; 0x11
    13fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <LCD_enuInit+0x2d0>
    1404:	9a 8b       	std	Y+18, r25	; 0x12
    1406:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	8b 89       	ldd	r24, Y+19	; 0x13
    1414:	9c 89       	ldd	r25, Y+20	; 0x14
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	69 f7       	brne	.-38     	; 0x13f4 <LCD_enuInit+0x2c4>
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	6d 89       	ldd	r22, Y+21	; 0x15
    141e:	7e 89       	ldd	r23, Y+22	; 0x16
    1420:	8f 89       	ldd	r24, Y+23	; 0x17
    1422:	98 8d       	ldd	r25, Y+24	; 0x18
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9c 8b       	std	Y+20, r25	; 0x14
    142e:	8b 8b       	std	Y+19, r24	; 0x13
    1430:	8b 89       	ldd	r24, Y+19	; 0x13
    1432:	9c 89       	ldd	r25, Y+20	; 0x14
    1434:	98 8b       	std	Y+16, r25	; 0x10
    1436:	8f 87       	std	Y+15, r24	; 0x0f
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	98 89       	ldd	r25, Y+16	; 0x10
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <LCD_enuInit+0x30c>
    1440:	98 8b       	std	Y+16, r25	; 0x10
    1442:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_invidSendCommend>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e4       	ldi	r27, 0x40	; 64
    1452:	8b 87       	std	Y+11, r24	; 0x0b
    1454:	9c 87       	std	Y+12, r25	; 0x0c
    1456:	ad 87       	std	Y+13, r26	; 0x0d
    1458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	6b 85       	ldd	r22, Y+11	; 0x0b
    145c:	7c 85       	ldd	r23, Y+12	; 0x0c
    145e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1460:	9e 85       	ldd	r25, Y+14	; 0x0e
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	4a e7       	ldi	r20, 0x7A	; 122
    1468:	53 e4       	ldi	r21, 0x43	; 67
    146a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8f 83       	std	Y+7, r24	; 0x07
    1474:	98 87       	std	Y+8, r25	; 0x08
    1476:	a9 87       	std	Y+9, r26	; 0x09
    1478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <LCD_enuInit+0x36c>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	3f c0       	rjmp	.+126    	; 0x151a <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	4c f5       	brge	.+82     	; 0x1506 <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <LCD_enuInit+0x3cc>
    14de:	89 e1       	ldi	r24, 0x19	; 25
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <LCD_enuInit+0x3ba>
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f7       	brne	.-38     	; 0x14de <LCD_enuInit+0x3ae>
    1504:	14 c0       	rjmp	.+40     	; 0x152e <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <LCD_enuInit+0x3f6>
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    152e:	86 e0       	ldi	r24, 0x06	; 6
    1530:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_invidSendCommend>

	return Local_enuErrorState;
    1534:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1536:	e9 96       	adiw	r28, 0x39	; 57
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <LCD_enuDisplayChar+0x6>
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1554:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_vidLatch>

	return Local_enuErrorState;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <LCD_enuSendCommand+0x6>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    157e:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_vidLatch>


	return Local_enuErrorState;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	2b 97       	sbiw	r28, 0x0b	; 11
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	68 87       	std	Y+8, r22	; 0x08
    15b2:	79 87       	std	Y+9, r23	; 0x09
    15b4:	8a 87       	std	Y+10, r24	; 0x0a
    15b6:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    15b8:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    15ba:	1b 82       	std	Y+3, r1	; 0x03
    15bc:	1c 82       	std	Y+4, r1	; 0x04
    15be:	1d 82       	std	Y+5, r1	; 0x05
    15c0:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    15c2:	1a 82       	std	Y+2, r1	; 0x02
    15c4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    15c6:	88 85       	ldd	r24, Y+8	; 0x08
    15c8:	99 85       	ldd	r25, Y+9	; 0x09
    15ca:	aa 85       	ldd	r26, Y+10	; 0x0a
    15cc:	bb 85       	ldd	r27, Y+11	; 0x0b
    15ce:	bb 23       	and	r27, r27
    15d0:	0c f0       	brlt	.+2      	; 0x15d4 <LCD_enuDisplayIntegerNum+0x38>
    15d2:	57 c0       	rjmp	.+174    	; 0x1682 <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    15de:	8d e2       	ldi	r24, 0x2D	; 45
    15e0:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    15e4:	88 85       	ldd	r24, Y+8	; 0x08
    15e6:	99 85       	ldd	r25, Y+9	; 0x09
    15e8:	aa 85       	ldd	r26, Y+10	; 0x0a
    15ea:	bb 85       	ldd	r27, Y+11	; 0x0b
    15ec:	b0 95       	com	r27
    15ee:	a0 95       	com	r26
    15f0:	90 95       	com	r25
    15f2:	81 95       	neg	r24
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	af 4f       	sbci	r26, 0xFF	; 255
    15f8:	bf 4f       	sbci	r27, 0xFF	; 255
    15fa:	88 87       	std	Y+8, r24	; 0x08
    15fc:	99 87       	std	Y+9, r25	; 0x09
    15fe:	aa 87       	std	Y+10, r26	; 0x0a
    1600:	bb 87       	std	Y+11, r27	; 0x0b
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    1604:	88 85       	ldd	r24, Y+8	; 0x08
    1606:	99 85       	ldd	r25, Y+9	; 0x09
    1608:	aa 85       	ldd	r26, Y+10	; 0x0a
    160a:	bb 85       	ldd	r27, Y+11	; 0x0b
    160c:	2a e0       	ldi	r18, 0x0A	; 10
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	ad 81       	ldd	r26, Y+5	; 0x05
    1628:	be 81       	ldd	r27, Y+6	; 0x06
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__mulsi3>
    163a:	9b 01       	movw	r18, r22
    163c:	ac 01       	movw	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	82 0f       	add	r24, r18
    164a:	93 1f       	adc	r25, r19
    164c:	a4 1f       	adc	r26, r20
    164e:	b5 1f       	adc	r27, r21
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	9c 83       	std	Y+4, r25	; 0x04
    1654:	ad 83       	std	Y+5, r26	; 0x05
    1656:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1658:	88 85       	ldd	r24, Y+8	; 0x08
    165a:	99 85       	ldd	r25, Y+9	; 0x09
    165c:	aa 85       	ldd	r26, Y+10	; 0x0a
    165e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1660:	2a e0       	ldi	r18, 0x0A	; 10
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    1670:	da 01       	movw	r26, r20
    1672:	c9 01       	movw	r24, r18
    1674:	88 87       	std	Y+8, r24	; 0x08
    1676:	99 87       	std	Y+9, r25	; 0x09
    1678:	aa 87       	std	Y+10, r26	; 0x0a
    167a:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	8f 5f       	subi	r24, 0xFF	; 255
    1680:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1682:	88 85       	ldd	r24, Y+8	; 0x08
    1684:	99 85       	ldd	r25, Y+9	; 0x09
    1686:	aa 85       	ldd	r26, Y+10	; 0x0a
    1688:	bb 85       	ldd	r27, Y+11	; 0x0b
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	a1 05       	cpc	r26, r1
    168e:	b1 05       	cpc	r27, r1
    1690:	09 f0       	breq	.+2      	; 0x1694 <LCD_enuDisplayIntegerNum+0xf8>
    1692:	b8 cf       	rjmp	.-144    	; 0x1604 <LCD_enuDisplayIntegerNum+0x68>
    1694:	2d c0       	rjmp	.+90     	; 0x16f0 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	ad 81       	ldd	r26, Y+5	; 0x05
    169c:	be 81       	ldd	r27, Y+6	; 0x06
    169e:	2a e0       	ldi	r18, 0x0A	; 10
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	80 5d       	subi	r24, 0xD0	; 208
    16c2:	0e 94 85 0b 	call	0x170a	; 0x170a <LCD_vidLatch>
		Local_s32Reverse /= 10;
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	ad 81       	ldd	r26, Y+5	; 0x05
    16cc:	be 81       	ldd	r27, Y+6	; 0x06
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    16de:	da 01       	movw	r26, r20
    16e0:	c9 01       	movw	r24, r18
    16e2:	8b 83       	std	Y+3, r24	; 0x03
    16e4:	9c 83       	std	Y+4, r25	; 0x04
    16e6:	ad 83       	std	Y+5, r26	; 0x05
    16e8:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	81 50       	subi	r24, 0x01	; 1
    16ee:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	88 23       	and	r24, r24
    16f4:	81 f6       	brne	.-96     	; 0x1696 <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    16f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    16f8:	2b 96       	adiw	r28, 0x0b	; 11
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	c5 55       	subi	r28, 0x55	; 85
    1718:	d0 40       	sbci	r29, 0x00	; 0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	fe 01       	movw	r30, r28
    1726:	eb 5a       	subi	r30, 0xAB	; 171
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1740:	fe 01       	movw	r30, r28
    1742:	eb 5a       	subi	r30, 0xAB	; 171
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	98 2f       	mov	r25, r24
    174a:	99 1f       	adc	r25, r25
    174c:	99 27       	eor	r25, r25
    174e:	99 1f       	adc	r25, r25
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	67 e0       	ldi	r22, 0x07	; 7
    1754:	49 2f       	mov	r20, r25
    1756:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    175a:	fe 01       	movw	r30, r28
    175c:	eb 5a       	subi	r30, 0xAB	; 171
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	82 95       	swap	r24
    1764:	86 95       	lsr	r24
    1766:	86 95       	lsr	r24
    1768:	83 70       	andi	r24, 0x03	; 3
    176a:	98 2f       	mov	r25, r24
    176c:	91 70       	andi	r25, 0x01	; 1
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	66 e0       	ldi	r22, 0x06	; 6
    1772:	49 2f       	mov	r20, r25
    1774:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1778:	fe 01       	movw	r30, r28
    177a:	eb 5a       	subi	r30, 0xAB	; 171
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	82 95       	swap	r24
    1782:	86 95       	lsr	r24
    1784:	87 70       	andi	r24, 0x07	; 7
    1786:	98 2f       	mov	r25, r24
    1788:	91 70       	andi	r25, 0x01	; 1
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	65 e0       	ldi	r22, 0x05	; 5
    178e:	49 2f       	mov	r20, r25
    1790:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1794:	fe 01       	movw	r30, r28
    1796:	eb 5a       	subi	r30, 0xAB	; 171
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 81       	ld	r24, Z
    179c:	82 95       	swap	r24
    179e:	8f 70       	andi	r24, 0x0F	; 15
    17a0:	98 2f       	mov	r25, r24
    17a2:	91 70       	andi	r25, 0x01	; 1
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	64 e0       	ldi	r22, 0x04	; 4
    17a8:	49 2f       	mov	r20, r25
    17aa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    17ae:	fe 01       	movw	r30, r28
    17b0:	eb 5a       	subi	r30, 0xAB	; 171
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 81       	ld	r24, Z
    17b6:	88 32       	cpi	r24, 0x28	; 40
    17b8:	09 f0       	breq	.+2      	; 0x17bc <LCD_vidLatch+0xb2>
    17ba:	79 c1       	rjmp	.+754    	; 0x1aae <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	62 e0       	ldi	r22, 0x02	; 2
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    17c6:	fe 01       	movw	r30, r28
    17c8:	ef 5a       	subi	r30, 0xAF	; 175
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e2       	ldi	r26, 0x20	; 32
    17d2:	b1 e4       	ldi	r27, 0x41	; 65
    17d4:	80 83       	st	Z, r24
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	a2 83       	std	Z+2, r26	; 0x02
    17da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	8e 01       	movw	r16, r28
    17de:	03 5b       	subi	r16, 0xB3	; 179
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	fe 01       	movw	r30, r28
    17e4:	ef 5a       	subi	r30, 0xAF	; 175
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a e7       	ldi	r20, 0x7A	; 122
    17f6:	53 e4       	ldi	r21, 0x43	; 67
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	f8 01       	movw	r30, r16
    1802:	80 83       	st	Z, r24
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	a2 83       	std	Z+2, r26	; 0x02
    1808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180a:	fe 01       	movw	r30, r28
    180c:	e3 5b       	subi	r30, 0xB3	; 179
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	44 f4       	brge	.+16     	; 0x1838 <LCD_vidLatch+0x12e>
		__ticks = 1;
    1828:	fe 01       	movw	r30, r28
    182a:	e5 5b       	subi	r30, 0xB5	; 181
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    1836:	64 c0       	rjmp	.+200    	; 0x1900 <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    1838:	fe 01       	movw	r30, r28
    183a:	e3 5b       	subi	r30, 0xB3	; 179
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	0c f0       	brlt	.+2      	; 0x1858 <LCD_vidLatch+0x14e>
    1856:	43 c0       	rjmp	.+134    	; 0x18de <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	fe 01       	movw	r30, r28
    185a:	ef 5a       	subi	r30, 0xAF	; 175
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e2       	ldi	r20, 0x20	; 32
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	8e 01       	movw	r16, r28
    1878:	05 5b       	subi	r16, 0xB5	; 181
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	f8 01       	movw	r30, r16
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	1f c0       	rjmp	.+62     	; 0x18ce <LCD_vidLatch+0x1c4>
    1890:	fe 01       	movw	r30, r28
    1892:	e7 5b       	subi	r30, 0xB7	; 183
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	89 e1       	ldi	r24, 0x19	; 25
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
    189e:	fe 01       	movw	r30, r28
    18a0:	e7 5b       	subi	r30, 0xB7	; 183
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_vidLatch+0x19e>
    18ac:	fe 01       	movw	r30, r28
    18ae:	e7 5b       	subi	r30, 0xB7	; 183
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	de 01       	movw	r26, r28
    18b8:	a5 5b       	subi	r26, 0xB5	; 181
    18ba:	bf 4f       	sbci	r27, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e5 5b       	subi	r30, 0xB5	; 181
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	11 96       	adiw	r26, 0x01	; 1
    18ca:	9c 93       	st	X, r25
    18cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	fe 01       	movw	r30, r28
    18d0:	e5 5b       	subi	r30, 0xB5	; 181
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	d1 f6       	brne	.-76     	; 0x1890 <LCD_vidLatch+0x186>
    18dc:	27 c0       	rjmp	.+78     	; 0x192c <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18de:	8e 01       	movw	r16, r28
    18e0:	05 5b       	subi	r16, 0xB5	; 181
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	fe 01       	movw	r30, r28
    18e6:	e3 5b       	subi	r30, 0xB3	; 179
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	f8 01       	movw	r30, r16
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	de 01       	movw	r26, r28
    1902:	a9 5b       	subi	r26, 0xB9	; 185
    1904:	bf 4f       	sbci	r27, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e5 5b       	subi	r30, 0xB5	; 181
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	8d 93       	st	X+, r24
    1912:	9c 93       	st	X, r25
    1914:	fe 01       	movw	r30, r28
    1916:	e9 5b       	subi	r30, 0xB9	; 185
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_vidLatch+0x214>
    1922:	fe 01       	movw	r30, r28
    1924:	e9 5b       	subi	r30, 0xB9	; 185
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	62 e0       	ldi	r22, 0x02	; 2
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    1936:	fe 01       	movw	r30, r28
    1938:	ed 5b       	subi	r30, 0xBD	; 189
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e2       	ldi	r26, 0x20	; 32
    1942:	b1 e4       	ldi	r27, 0x41	; 65
    1944:	80 83       	st	Z, r24
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	a2 83       	std	Z+2, r26	; 0x02
    194a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	8e 01       	movw	r16, r28
    194e:	01 5c       	subi	r16, 0xC1	; 193
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5b       	subi	r30, 0xBD	; 189
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a e7       	ldi	r20, 0x7A	; 122
    1966:	53 e4       	ldi	r21, 0x43	; 67
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	80 83       	st	Z, r24
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	a2 83       	std	Z+2, r26	; 0x02
    1978:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197a:	fe 01       	movw	r30, r28
    197c:	ff 96       	adiw	r30, 0x3f	; 63
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	2c f4       	brge	.+10     	; 0x19a0 <LCD_vidLatch+0x296>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9e af       	std	Y+62, r25	; 0x3e
    199c:	8d af       	std	Y+61, r24	; 0x3d
    199e:	46 c0       	rjmp	.+140    	; 0x1a2c <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    19a0:	fe 01       	movw	r30, r28
    19a2:	ff 96       	adiw	r30, 0x3f	; 63
    19a4:	60 81       	ld	r22, Z
    19a6:	71 81       	ldd	r23, Z+1	; 0x01
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	64 f5       	brge	.+88     	; 0x1a14 <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	fe 01       	movw	r30, r28
    19be:	ed 5b       	subi	r30, 0xBD	; 189
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e af       	std	Y+62, r25	; 0x3e
    19e8:	8d af       	std	Y+61, r24	; 0x3d
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_vidLatch+0x300>
    19ec:	89 e1       	ldi	r24, 0x19	; 25
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c af       	std	Y+60, r25	; 0x3c
    19f2:	8b af       	std	Y+59, r24	; 0x3b
    19f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    19f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_vidLatch+0x2ee>
    19fc:	9c af       	std	Y+60, r25	; 0x3c
    19fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9e af       	std	Y+62, r25	; 0x3e
    1a08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_vidLatch+0x2e2>
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	fe 01       	movw	r30, r28
    1a16:	ff 96       	adiw	r30, 0x3f	; 63
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e af       	std	Y+62, r25	; 0x3e
    1a2a:	8d af       	std	Y+61, r24	; 0x3d
    1a2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a30:	9a af       	std	Y+58, r25	; 0x3a
    1a32:	89 af       	std	Y+57, r24	; 0x39
    1a34:	89 ad       	ldd	r24, Y+57	; 0x39
    1a36:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_vidLatch+0x32e>
    1a3c:	9a af       	std	Y+58, r25	; 0x3a
    1a3e:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1a40:	fe 01       	movw	r30, r28
    1a42:	eb 5a       	subi	r30, 0xAB	; 171
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	98 2f       	mov	r25, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	99 27       	eor	r25, r25
    1a4e:	99 1f       	adc	r25, r25
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	67 e0       	ldi	r22, 0x07	; 7
    1a54:	49 2f       	mov	r20, r25
    1a56:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	eb 5a       	subi	r30, 0xAB	; 171
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	82 95       	swap	r24
    1a64:	86 95       	lsr	r24
    1a66:	86 95       	lsr	r24
    1a68:	83 70       	andi	r24, 0x03	; 3
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	91 70       	andi	r25, 0x01	; 1
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	66 e0       	ldi	r22, 0x06	; 6
    1a72:	49 2f       	mov	r20, r25
    1a74:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1a78:	fe 01       	movw	r30, r28
    1a7a:	eb 5a       	subi	r30, 0xAB	; 171
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	82 95       	swap	r24
    1a82:	86 95       	lsr	r24
    1a84:	87 70       	andi	r24, 0x07	; 7
    1a86:	98 2f       	mov	r25, r24
    1a88:	91 70       	andi	r25, 0x01	; 1
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	65 e0       	ldi	r22, 0x05	; 5
    1a8e:	49 2f       	mov	r20, r25
    1a90:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1a94:	fe 01       	movw	r30, r28
    1a96:	eb 5a       	subi	r30, 0xAB	; 171
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	82 95       	swap	r24
    1a9e:	8f 70       	andi	r24, 0x0F	; 15
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	91 70       	andi	r25, 0x01	; 1
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	49 2f       	mov	r20, r25
    1aaa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	62 e0       	ldi	r22, 0x02	; 2
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e2       	ldi	r26, 0x20	; 32
    1abe:	b1 e4       	ldi	r27, 0x41	; 65
    1ac0:	8d ab       	std	Y+53, r24	; 0x35
    1ac2:	9e ab       	std	Y+54, r25	; 0x36
    1ac4:	af ab       	std	Y+55, r26	; 0x37
    1ac6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aca:	7e a9       	ldd	r23, Y+54	; 0x36
    1acc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ace:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a e7       	ldi	r20, 0x7A	; 122
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	89 ab       	std	Y+49, r24	; 0x31
    1ae2:	9a ab       	std	Y+50, r25	; 0x32
    1ae4:	ab ab       	std	Y+51, r26	; 0x33
    1ae6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ae8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aea:	7a a9       	ldd	r23, Y+50	; 0x32
    1aec:	8b a9       	ldd	r24, Y+51	; 0x33
    1aee:	9c a9       	ldd	r25, Y+52	; 0x34
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <LCD_vidLatch+0x400>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	98 ab       	std	Y+48, r25	; 0x30
    1b06:	8f a7       	std	Y+47, r24	; 0x2f
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6d a9       	ldd	r22, Y+53	; 0x35
    1b24:	7e a9       	ldd	r23, Y+54	; 0x36
    1b26:	8f a9       	ldd	r24, Y+55	; 0x37
    1b28:	98 ad       	ldd	r25, Y+56	; 0x38
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	98 ab       	std	Y+48, r25	; 0x30
    1b48:	8f a7       	std	Y+47, r24	; 0x2f
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_vidLatch+0x460>
    1b4c:	89 e1       	ldi	r24, 0x19	; 25
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9e a7       	std	Y+46, r25	; 0x2e
    1b52:	8d a7       	std	Y+45, r24	; 0x2d
    1b54:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b56:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_vidLatch+0x44e>
    1b5c:	9e a7       	std	Y+46, r25	; 0x2e
    1b5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <LCD_vidLatch+0x442>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	69 a9       	ldd	r22, Y+49	; 0x31
    1b76:	7a a9       	ldd	r23, Y+50	; 0x32
    1b78:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	98 ab       	std	Y+48, r25	; 0x30
    1b86:	8f a7       	std	Y+47, r24	; 0x2f
    1b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8c:	9c a7       	std	Y+44, r25	; 0x2c
    1b8e:	8b a7       	std	Y+43, r24	; 0x2b
    1b90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_vidLatch+0x48a>
    1b98:	9c a7       	std	Y+44, r25	; 0x2c
    1b9a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e2       	ldi	r26, 0x20	; 32
    1bac:	b1 e4       	ldi	r27, 0x41	; 65
    1bae:	8f a3       	std	Y+39, r24	; 0x27
    1bb0:	98 a7       	std	Y+40, r25	; 0x28
    1bb2:	a9 a7       	std	Y+41, r26	; 0x29
    1bb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bba:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a e7       	ldi	r20, 0x7A	; 122
    1bc4:	53 e4       	ldi	r21, 0x43	; 67
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	8b a3       	std	Y+35, r24	; 0x23
    1bd0:	9c a3       	std	Y+36, r25	; 0x24
    1bd2:	ad a3       	std	Y+37, r26	; 0x25
    1bd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bda:	8d a1       	ldd	r24, Y+37	; 0x25
    1bdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <LCD_vidLatch+0x4ee>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9a a3       	std	Y+34, r25	; 0x22
    1bf4:	89 a3       	std	Y+33, r24	; 0x21
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    1bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6f a1       	ldd	r22, Y+39	; 0x27
    1c12:	78 a5       	ldd	r23, Y+40	; 0x28
    1c14:	89 a5       	ldd	r24, Y+41	; 0x29
    1c16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9a a3       	std	Y+34, r25	; 0x22
    1c36:	89 a3       	std	Y+33, r24	; 0x21
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <LCD_vidLatch+0x54e>
    1c3a:	89 e1       	ldi	r24, 0x19	; 25
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	98 a3       	std	Y+32, r25	; 0x20
    1c40:	8f 8f       	std	Y+31, r24	; 0x1f
    1c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c44:	98 a1       	ldd	r25, Y+32	; 0x20
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_vidLatch+0x53c>
    1c4a:	98 a3       	std	Y+32, r25	; 0x20
    1c4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	9a a3       	std	Y+34, r25	; 0x22
    1c56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <LCD_vidLatch+0x530>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	6b a1       	ldd	r22, Y+35	; 0x23
    1c64:	7c a1       	ldd	r23, Y+36	; 0x24
    1c66:	8d a1       	ldd	r24, Y+37	; 0x25
    1c68:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9a a3       	std	Y+34, r25	; 0x22
    1c74:	89 a3       	std	Y+33, r24	; 0x21
    1c76:	89 a1       	ldd	r24, Y+33	; 0x21
    1c78:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_vidLatch+0x578>
    1c86:	9e 8f       	std	Y+30, r25	; 0x1e
    1c88:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	eb 5a       	subi	r30, 0xAB	; 171
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	86 95       	lsr	r24
    1c94:	86 95       	lsr	r24
    1c96:	86 95       	lsr	r24
    1c98:	98 2f       	mov	r25, r24
    1c9a:	91 70       	andi	r25, 0x01	; 1
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	67 e0       	ldi	r22, 0x07	; 7
    1ca0:	49 2f       	mov	r20, r25
    1ca2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	eb 5a       	subi	r30, 0xAB	; 171
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	86 95       	lsr	r24
    1cb0:	86 95       	lsr	r24
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	91 70       	andi	r25, 0x01	; 1
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	66 e0       	ldi	r22, 0x06	; 6
    1cba:	49 2f       	mov	r20, r25
    1cbc:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	eb 5a       	subi	r30, 0xAB	; 171
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	86 95       	lsr	r24
    1cca:	98 2f       	mov	r25, r24
    1ccc:	91 70       	andi	r25, 0x01	; 1
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	65 e0       	ldi	r22, 0x05	; 5
    1cd2:	49 2f       	mov	r20, r25
    1cd4:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    1cd8:	fe 01       	movw	r30, r28
    1cda:	eb 5a       	subi	r30, 0xAB	; 171
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	98 2f       	mov	r25, r24
    1ce2:	91 70       	andi	r25, 0x01	; 1
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	64 e0       	ldi	r22, 0x04	; 4
    1ce8:	49 2f       	mov	r20, r25
    1cea:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e2       	ldi	r26, 0x20	; 32
    1cfe:	b1 e4       	ldi	r27, 0x41	; 65
    1d00:	89 8f       	std	Y+25, r24	; 0x19
    1d02:	9a 8f       	std	Y+26, r25	; 0x1a
    1d04:	ab 8f       	std	Y+27, r26	; 0x1b
    1d06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	53 e4       	ldi	r21, 0x43	; 67
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	8d 8b       	std	Y+21, r24	; 0x15
    1d22:	9e 8b       	std	Y+22, r25	; 0x16
    1d24:	af 8b       	std	Y+23, r26	; 0x17
    1d26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <LCD_vidLatch+0x640>
		__ticks = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    1d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d50:	98 8d       	ldd	r25, Y+24	; 0x18
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	4c f5       	brge	.+82     	; 0x1db4 <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	69 8d       	ldd	r22, Y+25	; 0x19
    1d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <LCD_vidLatch+0x6a0>
    1d8c:	89 e1       	ldi	r24, 0x19	; 25
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9a 8b       	std	Y+18, r25	; 0x12
    1d92:	89 8b       	std	Y+17, r24	; 0x11
    1d94:	89 89       	ldd	r24, Y+17	; 0x11
    1d96:	9a 89       	ldd	r25, Y+18	; 0x12
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_vidLatch+0x68e>
    1d9c:	9a 8b       	std	Y+18, r25	; 0x12
    1d9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	8b 89       	ldd	r24, Y+19	; 0x13
    1da2:	9c 89       	ldd	r25, Y+20	; 0x14
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dac:	9c 89       	ldd	r25, Y+20	; 0x14
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <LCD_vidLatch+0x682>
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	98 8b       	std	Y+16, r25	; 0x10
    1dce:	8f 87       	std	Y+15, r24	; 0x0f
    1dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd2:	98 89       	ldd	r25, Y+16	; 0x10
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_vidLatch+0x6ca>
    1dd8:	98 8b       	std	Y+16, r25	; 0x10
    1dda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e2       	ldi	r26, 0x20	; 32
    1dec:	b1 e4       	ldi	r27, 0x41	; 65
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
    1df0:	9c 87       	std	Y+12, r25	; 0x0c
    1df2:	ad 87       	std	Y+13, r26	; 0x0d
    1df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	53 e4       	ldi	r21, 0x43	; 67
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	a9 87       	std	Y+9, r26	; 0x09
    1e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_vidLatch+0x72e>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <LCD_vidLatch+0x78e>
    1e7a:	89 e1       	ldi	r24, 0x19	; 25
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_vidLatch+0x77c>
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <LCD_vidLatch+0x770>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_vidLatch+0x7b8>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    1eca:	cb 5a       	subi	r28, 0xAB	; 171
    1ecc:	df 4f       	sbci	r29, 0xFF	; 255
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	ab 97       	sbiw	r28, 0x2b	; 43
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1f0c:	83 e0       	ldi	r24, 0x03	; 3
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1f16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f18:	98 2f       	mov	r25, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	99 27       	eor	r25, r25
    1f1e:	99 1f       	adc	r25, r25
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	67 e0       	ldi	r22, 0x07	; 7
    1f24:	49 2f       	mov	r20, r25
    1f26:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2c:	82 95       	swap	r24
    1f2e:	86 95       	lsr	r24
    1f30:	86 95       	lsr	r24
    1f32:	83 70       	andi	r24, 0x03	; 3
    1f34:	98 2f       	mov	r25, r24
    1f36:	91 70       	andi	r25, 0x01	; 1
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	66 e0       	ldi	r22, 0x06	; 6
    1f3c:	49 2f       	mov	r20, r25
    1f3e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f44:	82 95       	swap	r24
    1f46:	86 95       	lsr	r24
    1f48:	87 70       	andi	r24, 0x07	; 7
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	91 70       	andi	r25, 0x01	; 1
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	65 e0       	ldi	r22, 0x05	; 5
    1f52:	49 2f       	mov	r20, r25
    1f54:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1f58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5a:	82 95       	swap	r24
    1f5c:	8f 70       	andi	r24, 0x0F	; 15
    1f5e:	98 2f       	mov	r25, r24
    1f60:	91 70       	andi	r25, 0x01	; 1
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	64 e0       	ldi	r22, 0x04	; 4
    1f66:	49 2f       	mov	r20, r25
    1f68:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    1f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6e:	88 32       	cpi	r24, 0x28	; 40
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <LCD_invidSendCommend+0x92>
    1f72:	a7 c0       	rjmp	.+334    	; 0x20c2 <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1f74:	83 e0       	ldi	r24, 0x03	; 3
    1f76:	62 e0       	ldi	r22, 0x02	; 2
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e2       	ldi	r26, 0x20	; 32
    1f84:	b1 e4       	ldi	r27, 0x41	; 65
    1f86:	8f a3       	std	Y+39, r24	; 0x27
    1f88:	98 a7       	std	Y+40, r25	; 0x28
    1f8a:	a9 a7       	std	Y+41, r26	; 0x29
    1f8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f90:	78 a5       	ldd	r23, Y+40	; 0x28
    1f92:	89 a5       	ldd	r24, Y+41	; 0x29
    1f94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	53 e4       	ldi	r21, 0x43	; 67
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8b a3       	std	Y+35, r24	; 0x23
    1fa8:	9c a3       	std	Y+36, r25	; 0x24
    1faa:	ad a3       	std	Y+37, r26	; 0x25
    1fac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fae:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <LCD_invidSendCommend+0xee>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9a a3       	std	Y+34, r25	; 0x22
    1fcc:	89 a3       	std	Y+33, r24	; 0x21
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    1fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fea:	78 a5       	ldd	r23, Y+40	; 0x28
    1fec:	89 a5       	ldd	r24, Y+41	; 0x29
    1fee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <LCD_invidSendCommend+0x14e>
    2012:	89 e1       	ldi	r24, 0x19	; 25
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 a3       	std	Y+32, r25	; 0x20
    2018:	8f 8f       	std	Y+31, r24	; 0x1f
    201a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    201c:	98 a1       	ldd	r25, Y+32	; 0x20
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_invidSendCommend+0x13c>
    2022:	98 a3       	std	Y+32, r25	; 0x20
    2024:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	89 a1       	ldd	r24, Y+33	; 0x21
    2028:	9a a1       	ldd	r25, Y+34	; 0x22
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	9a a3       	std	Y+34, r25	; 0x22
    202e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	89 a1       	ldd	r24, Y+33	; 0x21
    2032:	9a a1       	ldd	r25, Y+34	; 0x22
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <LCD_invidSendCommend+0x130>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	6b a1       	ldd	r22, Y+35	; 0x23
    203c:	7c a1       	ldd	r23, Y+36	; 0x24
    203e:	8d a1       	ldd	r24, Y+37	; 0x25
    2040:	9e a1       	ldd	r25, Y+38	; 0x26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9a a3       	std	Y+34, r25	; 0x22
    204c:	89 a3       	std	Y+33, r24	; 0x21
    204e:	89 a1       	ldd	r24, Y+33	; 0x21
    2050:	9a a1       	ldd	r25, Y+34	; 0x22
    2052:	9e 8f       	std	Y+30, r25	; 0x1e
    2054:	8d 8f       	std	Y+29, r24	; 0x1d
    2056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2058:	9e 8d       	ldd	r25, Y+30	; 0x1e
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_invidSendCommend+0x178>
    205e:	9e 8f       	std	Y+30, r25	; 0x1e
    2060:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    206c:	8b a5       	ldd	r24, Y+43	; 0x2b
    206e:	98 2f       	mov	r25, r24
    2070:	99 1f       	adc	r25, r25
    2072:	99 27       	eor	r25, r25
    2074:	99 1f       	adc	r25, r25
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	67 e0       	ldi	r22, 0x07	; 7
    207a:	49 2f       	mov	r20, r25
    207c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2080:	8b a5       	ldd	r24, Y+43	; 0x2b
    2082:	82 95       	swap	r24
    2084:	86 95       	lsr	r24
    2086:	86 95       	lsr	r24
    2088:	83 70       	andi	r24, 0x03	; 3
    208a:	98 2f       	mov	r25, r24
    208c:	91 70       	andi	r25, 0x01	; 1
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	66 e0       	ldi	r22, 0x06	; 6
    2092:	49 2f       	mov	r20, r25
    2094:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2098:	8b a5       	ldd	r24, Y+43	; 0x2b
    209a:	82 95       	swap	r24
    209c:	86 95       	lsr	r24
    209e:	87 70       	andi	r24, 0x07	; 7
    20a0:	98 2f       	mov	r25, r24
    20a2:	91 70       	andi	r25, 0x01	; 1
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	65 e0       	ldi	r22, 0x05	; 5
    20a8:	49 2f       	mov	r20, r25
    20aa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    20ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b0:	82 95       	swap	r24
    20b2:	8f 70       	andi	r24, 0x0F	; 15
    20b4:	98 2f       	mov	r25, r24
    20b6:	91 70       	andi	r25, 0x01	; 1
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	64 e0       	ldi	r22, 0x04	; 4
    20bc:	49 2f       	mov	r20, r25
    20be:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	62 e0       	ldi	r22, 0x02	; 2
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e2       	ldi	r26, 0x20	; 32
    20d2:	b1 e4       	ldi	r27, 0x41	; 65
    20d4:	89 8f       	std	Y+25, r24	; 0x19
    20d6:	9a 8f       	std	Y+26, r25	; 0x1a
    20d8:	ab 8f       	std	Y+27, r26	; 0x1b
    20da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	69 8d       	ldd	r22, Y+25	; 0x19
    20de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a e7       	ldi	r20, 0x7A	; 122
    20ea:	53 e4       	ldi	r21, 0x43	; 67
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8d 8b       	std	Y+21, r24	; 0x15
    20f6:	9e 8b       	std	Y+22, r25	; 0x16
    20f8:	af 8b       	std	Y+23, r26	; 0x17
    20fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20fc:	6d 89       	ldd	r22, Y+21	; 0x15
    20fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2100:	8f 89       	ldd	r24, Y+23	; 0x17
    2102:	98 8d       	ldd	r25, Y+24	; 0x18
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
    211c:	3f c0       	rjmp	.+126    	; 0x219c <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    211e:	6d 89       	ldd	r22, Y+21	; 0x15
    2120:	7e 89       	ldd	r23, Y+22	; 0x16
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9c 8b       	std	Y+20, r25	; 0x14
    215c:	8b 8b       	std	Y+19, r24	; 0x13
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_invidSendCommend+0x29c>
    2160:	89 e1       	ldi	r24, 0x19	; 25
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9a 8b       	std	Y+18, r25	; 0x12
    2166:	89 8b       	std	Y+17, r24	; 0x11
    2168:	89 89       	ldd	r24, Y+17	; 0x11
    216a:	9a 89       	ldd	r25, Y+18	; 0x12
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_invidSendCommend+0x28a>
    2170:	9a 8b       	std	Y+18, r25	; 0x12
    2172:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8b 89       	ldd	r24, Y+19	; 0x13
    2176:	9c 89       	ldd	r25, Y+20	; 0x14
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <LCD_invidSendCommend+0x27e>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6d 89       	ldd	r22, Y+21	; 0x15
    218a:	7e 89       	ldd	r23, Y+22	; 0x16
    218c:	8f 89       	ldd	r24, Y+23	; 0x17
    218e:	98 8d       	ldd	r25, Y+24	; 0x18
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	98 8b       	std	Y+16, r25	; 0x10
    21a2:	8f 87       	std	Y+15, r24	; 0x0f
    21a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a6:	98 89       	ldd	r25, Y+16	; 0x10
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_invidSendCommend+0x2c6>
    21ac:	98 8b       	std	Y+16, r25	; 0x10
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    21ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    21bc:	86 95       	lsr	r24
    21be:	86 95       	lsr	r24
    21c0:	86 95       	lsr	r24
    21c2:	98 2f       	mov	r25, r24
    21c4:	91 70       	andi	r25, 0x01	; 1
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	67 e0       	ldi	r22, 0x07	; 7
    21ca:	49 2f       	mov	r20, r25
    21cc:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    21d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d2:	86 95       	lsr	r24
    21d4:	86 95       	lsr	r24
    21d6:	98 2f       	mov	r25, r24
    21d8:	91 70       	andi	r25, 0x01	; 1
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	66 e0       	ldi	r22, 0x06	; 6
    21de:	49 2f       	mov	r20, r25
    21e0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    21e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e6:	86 95       	lsr	r24
    21e8:	98 2f       	mov	r25, r24
    21ea:	91 70       	andi	r25, 0x01	; 1
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	65 e0       	ldi	r22, 0x05	; 5
    21f0:	49 2f       	mov	r20, r25
    21f2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    21f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f8:	98 2f       	mov	r25, r24
    21fa:	91 70       	andi	r25, 0x01	; 1
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	64 e0       	ldi	r22, 0x04	; 4
    2200:	49 2f       	mov	r20, r25
    2202:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e2       	ldi	r26, 0x20	; 32
    2216:	b1 e4       	ldi	r27, 0x41	; 65
    2218:	8b 87       	std	Y+11, r24	; 0x0b
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	ad 87       	std	Y+13, r26	; 0x0d
    221e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a e7       	ldi	r20, 0x7A	; 122
    222e:	53 e4       	ldi	r21, 0x43	; 67
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8f 83       	std	Y+7, r24	; 0x07
    223a:	98 87       	std	Y+8, r25	; 0x08
    223c:	a9 87       	std	Y+9, r26	; 0x09
    223e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_invidSendCommend+0x380>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_invidSendCommend+0x3e0>
    22a4:	89 e1       	ldi	r24, 0x19	; 25
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_invidSendCommend+0x3ce>
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_invidSendCommend+0x3c2>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_invidSendCommend+0x40a>
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    22f4:	83 e0       	ldi	r24, 0x03	; 3
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
}
    22fe:	ab 96       	adiw	r28, 0x2b	; 43
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <LCD_Clear>:
void LCD_Clear(){
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62

	LCD_enuSendCommand(LCD_CLEAR);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_enuSendCommand>



}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <Keypad_enuInit>:
#include "KPD_priv.h"

#include <util/delay.h>


ES_t Keypad_enuInit(void){
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    232e:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorstate =   DIO_enuSetPinDirection(C1_PORT,C1_PIN, DIO_u8OUTPUT);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    233a:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C2_PORT,C2_PIN, DIO_u8OUTPUT);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    2346:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C3_PORT,C3_PIN, DIO_u8OUTPUT);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	62 e0       	ldi	r22, 0x02	; 2
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    2352:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C4_PORT,C4_PIN, DIO_u8OUTPUT);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	63 e0       	ldi	r22, 0x03	; 3
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    235e:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinDirection(R1_PORT,R1_PIN, DIO_u8INPUT);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	64 e0       	ldi	r22, 0x04	; 4
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    236a:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R2_PORT,R2_PIN, DIO_u8INPUT);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	65 e0       	ldi	r22, 0x05	; 5
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    2376:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R3_PORT,R3_PIN, DIO_u8INPUT);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	66 e0       	ldi	r22, 0x06	; 6
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    2382:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R4_PORT,R4_PIN, DIO_u8INPUT);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	67 e0       	ldi	r22, 0x07	; 7
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <DIO_enuSetPinDirection>
    238e:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinValue(C1_PORT,C1_PIN, DIO_u8HIGH);
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    239a:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C2_PORT,C2_PIN, DIO_u8HIGH);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23a6:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C3_PORT,C3_PIN, DIO_u8HIGH);
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	62 e0       	ldi	r22, 0x02	; 2
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23b2:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C4_PORT,C4_PIN, DIO_u8HIGH);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	63 e0       	ldi	r22, 0x03	; 3
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23be:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinValue(R1_PORT,R1_PIN, DIO_u8PULL_UP);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23ca:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R2_PORT,R2_PIN, DIO_u8PULL_UP);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	65 e0       	ldi	r22, 0x05	; 5
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23d6:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R3_PORT,R3_PIN, DIO_u8PULL_UP);
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	66 e0       	ldi	r22, 0x06	; 6
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23e2:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R4_PORT,R4_PIN, DIO_u8PULL_UP);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	67 e0       	ldi	r22, 0x07	; 7
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
    23ee:	89 83       	std	Y+1, r24	; 0x01

	 Local_enuErrorstate  =ES_OK;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	89 83       	std	Y+1, r24	; 0x01


		return Local_enuErrorstate;
    23f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue){
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	ea 97       	sbiw	r28, 0x3a	; 58
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	9c ab       	std	Y+52, r25	; 0x34
    2414:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorstate=ES_NOK;
    2416:	19 8a       	std	Y+17, r1	; 0x11
			if( Copy_pu8KeyValue!=NULL){
    2418:	8b a9       	ldd	r24, Y+51	; 0x33
    241a:	9c a9       	ldd	r25, Y+52	; 0x34
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	09 f4       	brne	.+2      	; 0x2422 <Keypad_enuGetPressedKey+0x24>
    2420:	64 c1       	rjmp	.+712    	; 0x26ea <Keypad_enuGetPressedKey+0x2ec>
				    u8 Local_Au8RowPins [ROWS_NUM] = { R1_PIN , R2_PIN , R3_PIN , R4_PIN };
    2422:	84 e0       	ldi	r24, 0x04	; 4
    2424:	8a 8b       	std	Y+18, r24	; 0x12
    2426:	85 e0       	ldi	r24, 0x05	; 5
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	86 e0       	ldi	r24, 0x06	; 6
    242c:	8c 8b       	std	Y+20, r24	; 0x14
    242e:	87 e0       	ldi	r24, 0x07	; 7
    2430:	8d 8b       	std	Y+21, r24	; 0x15
				    u8 Local_Au8ColPins [COLS_NUM] = { C1_PIN , C2_PIN , C3_PIN , C4_PIN };
    2432:	1e 8a       	std	Y+22, r1	; 0x16
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	8f 8b       	std	Y+23, r24	; 0x17
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	88 8f       	std	Y+24, r24	; 0x18
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	89 8f       	std	Y+25, r24	; 0x19
				    u8 Local_Au8RowPorts[ROWS_NUM] = { R1_PORT , R2_PORT , R3_PORT , R4_PORT };
    2440:	1a 8e       	std	Y+26, r1	; 0x1a
    2442:	1b 8e       	std	Y+27, r1	; 0x1b
    2444:	1c 8e       	std	Y+28, r1	; 0x1c
    2446:	1d 8e       	std	Y+29, r1	; 0x1d
				    u8 Local_Au8ColPorts[COLS_NUM] = { C1_PORT , C2_PORT , C3_PORT , C4_PORT };
    2448:	1e 8e       	std	Y+30, r1	; 0x1e
    244a:	1f 8e       	std	Y+31, r1	; 0x1f
    244c:	18 a2       	std	Y+32, r1	; 0x20
    244e:	19 a2       	std	Y+33, r1	; 0x21

						*Copy_pu8KeyValue = KEY_NOT_PRESS;
    2450:	eb a9       	ldd	r30, Y+51	; 0x33
    2452:	fc a9       	ldd	r31, Y+52	; 0x34
    2454:	8f ef       	ldi	r24, 0xFF	; 255
    2456:	80 83       	st	Z, r24
						u8 Local_u8PinValue = 0xff;
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	8a a3       	std	Y+34, r24	; 0x22

				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    245c:	ce 01       	movw	r24, r28
    245e:	83 96       	adiw	r24, 0x23	; 35
    2460:	9f ab       	std	Y+55, r25	; 0x37
    2462:	8e ab       	std	Y+54, r24	; 0x36
    2464:	e2 e7       	ldi	r30, 0x72	; 114
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	f9 af       	std	Y+57, r31	; 0x39
    246a:	e8 af       	std	Y+56, r30	; 0x38
    246c:	f0 e1       	ldi	r31, 0x10	; 16
    246e:	fa af       	std	Y+58, r31	; 0x3a
    2470:	e8 ad       	ldd	r30, Y+56	; 0x38
    2472:	f9 ad       	ldd	r31, Y+57	; 0x39
    2474:	00 80       	ld	r0, Z
    2476:	88 ad       	ldd	r24, Y+56	; 0x38
    2478:	99 ad       	ldd	r25, Y+57	; 0x39
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	99 af       	std	Y+57, r25	; 0x39
    247e:	88 af       	std	Y+56, r24	; 0x38
    2480:	ee a9       	ldd	r30, Y+54	; 0x36
    2482:	ff a9       	ldd	r31, Y+55	; 0x37
    2484:	00 82       	st	Z, r0
    2486:	8e a9       	ldd	r24, Y+54	; 0x36
    2488:	9f a9       	ldd	r25, Y+55	; 0x37
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	9f ab       	std	Y+55, r25	; 0x37
    248e:	8e ab       	std	Y+54, r24	; 0x36
    2490:	9a ad       	ldd	r25, Y+58	; 0x3a
    2492:	91 50       	subi	r25, 0x01	; 1
    2494:	9a af       	std	Y+58, r25	; 0x3a
    2496:	ea ad       	ldd	r30, Y+58	; 0x3a
    2498:	ee 23       	and	r30, r30
    249a:	51 f7       	brne	.-44     	; 0x2470 <Keypad_enuGetPressedKey+0x72>
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
    249c:	18 8a       	std	Y+16, r1	; 0x10
    249e:	20 c1       	rjmp	.+576    	; 0x26e0 <Keypad_enuGetPressedKey+0x2e2>
					  //active col
					   DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it],Local_Au8ColPins[Local_col_it],DIO_u8LOW);
    24a0:	88 89       	ldd	r24, Y+16	; 0x10
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	ce 01       	movw	r24, r28
    24a8:	4e 96       	adiw	r24, 0x1e	; 30
    24aa:	fc 01       	movw	r30, r24
    24ac:	e2 0f       	add	r30, r18
    24ae:	f3 1f       	adc	r31, r19
    24b0:	40 81       	ld	r20, Z
    24b2:	88 89       	ldd	r24, Y+16	; 0x10
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	ce 01       	movw	r24, r28
    24ba:	46 96       	adiw	r24, 0x16	; 22
    24bc:	fc 01       	movw	r30, r24
    24be:	e2 0f       	add	r30, r18
    24c0:	f3 1f       	adc	r31, r19
    24c2:	90 81       	ld	r25, Z
    24c4:	84 2f       	mov	r24, r20
    24c6:	69 2f       	mov	r22, r25
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
					   for(Local_row_it=0;Local_row_it<ROWS_NUM;Local_row_it++){
    24ce:	1f 86       	std	Y+15, r1	; 0x0f
    24d0:	e9 c0       	rjmp	.+466    	; 0x26a4 <Keypad_enuGetPressedKey+0x2a6>
						   DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    24d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	ce 01       	movw	r24, r28
    24da:	4a 96       	adiw	r24, 0x1a	; 26
    24dc:	fc 01       	movw	r30, r24
    24de:	e2 0f       	add	r30, r18
    24e0:	f3 1f       	adc	r31, r19
    24e2:	40 81       	ld	r20, Z
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	ce 01       	movw	r24, r28
    24ec:	42 96       	adiw	r24, 0x12	; 18
    24ee:	fc 01       	movw	r30, r24
    24f0:	e2 0f       	add	r30, r18
    24f2:	f3 1f       	adc	r31, r19
    24f4:	90 81       	ld	r25, Z
    24f6:	9e 01       	movw	r18, r28
    24f8:	2e 5d       	subi	r18, 0xDE	; 222
    24fa:	3f 4f       	sbci	r19, 0xFF	; 255
    24fc:	84 2f       	mov	r24, r20
    24fe:	69 2f       	mov	r22, r25
    2500:	a9 01       	movw	r20, r18
    2502:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <DIO_enuGetPinValue>
						   if (! Local_u8PinValue)
    2506:	8a a1       	ldd	r24, Y+34	; 0x22
    2508:	88 23       	and	r24, r24
    250a:	09 f0       	breq	.+2      	; 0x250e <Keypad_enuGetPressedKey+0x110>
    250c:	c8 c0       	rjmp	.+400    	; 0x269e <Keypad_enuGetPressedKey+0x2a0>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e2       	ldi	r26, 0x20	; 32
    2514:	b1 e4       	ldi	r27, 0x41	; 65
    2516:	8b 87       	std	Y+11, r24	; 0x0b
    2518:	9c 87       	std	Y+12, r25	; 0x0c
    251a:	ad 87       	std	Y+13, r26	; 0x0d
    251c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2520:	7c 85       	ldd	r23, Y+12	; 0x0c
    2522:	8d 85       	ldd	r24, Y+13	; 0x0d
    2524:	9e 85       	ldd	r25, Y+14	; 0x0e
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a e7       	ldi	r20, 0x7A	; 122
    252c:	53 e4       	ldi	r21, 0x43	; 67
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8f 83       	std	Y+7, r24	; 0x07
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	a9 87       	std	Y+9, r26	; 0x09
    253c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <Keypad_enuGetPressedKey+0x162>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	3f c0       	rjmp	.+126    	; 0x25de <Keypad_enuGetPressedKey+0x1e0>
	else if (__tmp > 65535)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <Keypad_enuGetPressedKey+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6b 85       	ldd	r22, Y+11	; 0x0b
    257a:	7c 85       	ldd	r23, Y+12	; 0x0c
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <Keypad_enuGetPressedKey+0x1c2>
    25a2:	89 e1       	ldi	r24, 0x19	; 25
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <Keypad_enuGetPressedKey+0x1b0>
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <Keypad_enuGetPressedKey+0x1a4>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <Keypad_enuGetPressedKey+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <Keypad_enuGetPressedKey+0x1ec>
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
						   				{
						   					_delay_ms(10);
						   					DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    25f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	ce 01       	movw	r24, r28
    25fa:	4a 96       	adiw	r24, 0x1a	; 26
    25fc:	fc 01       	movw	r30, r24
    25fe:	e2 0f       	add	r30, r18
    2600:	f3 1f       	adc	r31, r19
    2602:	40 81       	ld	r20, Z
    2604:	8f 85       	ldd	r24, Y+15	; 0x0f
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	ce 01       	movw	r24, r28
    260c:	42 96       	adiw	r24, 0x12	; 18
    260e:	fc 01       	movw	r30, r24
    2610:	e2 0f       	add	r30, r18
    2612:	f3 1f       	adc	r31, r19
    2614:	90 81       	ld	r25, Z
    2616:	9e 01       	movw	r18, r28
    2618:	2e 5d       	subi	r18, 0xDE	; 222
    261a:	3f 4f       	sbci	r19, 0xFF	; 255
    261c:	84 2f       	mov	r24, r20
    261e:	69 2f       	mov	r22, r25
    2620:	a9 01       	movw	r20, r18
    2622:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <DIO_enuGetPinValue>
						   					if (! Local_u8PinValue)
    2626:	8a a1       	ldd	r24, Y+34	; 0x22
    2628:	88 23       	and	r24, r24
    262a:	c9 f5       	brne	.+114    	; 0x269e <Keypad_enuGetPressedKey+0x2a0>
    262c:	1a c0       	rjmp	.+52     	; 0x2662 <Keypad_enuGetPressedKey+0x264>
						   					{
						   						while (! Local_u8PinValue)
						   						{
						   							DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	ce 01       	movw	r24, r28
    2636:	4a 96       	adiw	r24, 0x1a	; 26
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	40 81       	ld	r20, Z
    2640:	8f 85       	ldd	r24, Y+15	; 0x0f
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	ce 01       	movw	r24, r28
    2648:	42 96       	adiw	r24, 0x12	; 18
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	90 81       	ld	r25, Z
    2652:	9e 01       	movw	r18, r28
    2654:	2e 5d       	subi	r18, 0xDE	; 222
    2656:	3f 4f       	sbci	r19, 0xFF	; 255
    2658:	84 2f       	mov	r24, r20
    265a:	69 2f       	mov	r22, r25
    265c:	a9 01       	movw	r20, r18
    265e:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <DIO_enuGetPinValue>
						   				{
						   					_delay_ms(10);
						   					DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
						   					if (! Local_u8PinValue)
						   					{
						   						while (! Local_u8PinValue)
    2662:	8a a1       	ldd	r24, Y+34	; 0x22
    2664:	88 23       	and	r24, r24
    2666:	19 f3       	breq	.-58     	; 0x262e <Keypad_enuGetPressedKey+0x230>
						   						{
						   							DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
						   						}

						   						*Copy_pu8KeyValue = Local_Au8KeyValues[Local_row_it][Local_col_it];
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	88 89       	ldd	r24, Y+16	; 0x10
    2670:	48 2f       	mov	r20, r24
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	22 0f       	add	r18, r18
    2676:	33 1f       	adc	r19, r19
    2678:	22 0f       	add	r18, r18
    267a:	33 1f       	adc	r19, r19
    267c:	ce 01       	movw	r24, r28
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	82 0f       	add	r24, r18
    2682:	93 1f       	adc	r25, r19
    2684:	84 0f       	add	r24, r20
    2686:	95 1f       	adc	r25, r21
    2688:	fc 01       	movw	r30, r24
    268a:	b2 96       	adiw	r30, 0x22	; 34
    268c:	80 81       	ld	r24, Z
    268e:	eb a9       	ldd	r30, Y+51	; 0x33
    2690:	fc a9       	ldd	r31, Y+52	; 0x34
    2692:	80 83       	st	Z, r24

						   						return Local_enuErrorstate=ES_OK;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	89 8b       	std	Y+17, r24	; 0x11
    2698:	f9 89       	ldd	r31, Y+17	; 0x11
    269a:	fd ab       	std	Y+53, r31	; 0x35
    269c:	2a c0       	rjmp	.+84     	; 0x26f2 <Keypad_enuGetPressedKey+0x2f4>
				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
					  //active col
					   DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it],Local_Au8ColPins[Local_col_it],DIO_u8LOW);
					   for(Local_row_it=0;Local_row_it<ROWS_NUM;Local_row_it++){
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8f 87       	std	Y+15, r24	; 0x0f
    26a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a6:	84 30       	cpi	r24, 0x04	; 4
    26a8:	08 f4       	brcc	.+2      	; 0x26ac <Keypad_enuGetPressedKey+0x2ae>
    26aa:	13 cf       	rjmp	.-474    	; 0x24d2 <Keypad_enuGetPressedKey+0xd4>
						   					}
						   				}
						   			}
					   //deactive

						   			DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it] , Local_Au8ColPins[Local_col_it] , DIO_u8HIGH);
    26ac:	88 89       	ldd	r24, Y+16	; 0x10
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	ce 01       	movw	r24, r28
    26b4:	4e 96       	adiw	r24, 0x1e	; 30
    26b6:	fc 01       	movw	r30, r24
    26b8:	e2 0f       	add	r30, r18
    26ba:	f3 1f       	adc	r31, r19
    26bc:	40 81       	ld	r20, Z
    26be:	88 89       	ldd	r24, Y+16	; 0x10
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	ce 01       	movw	r24, r28
    26c6:	46 96       	adiw	r24, 0x16	; 22
    26c8:	fc 01       	movw	r30, r24
    26ca:	e2 0f       	add	r30, r18
    26cc:	f3 1f       	adc	r31, r19
    26ce:	90 81       	ld	r25, Z
    26d0:	84 2f       	mov	r24, r20
    26d2:	69 2f       	mov	r22, r25
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DIO_enuSetPinValue>
						*Copy_pu8KeyValue = KEY_NOT_PRESS;
						u8 Local_u8PinValue = 0xff;

				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
    26da:	88 89       	ldd	r24, Y+16	; 0x10
    26dc:	8f 5f       	subi	r24, 0xFF	; 255
    26de:	88 8b       	std	Y+16, r24	; 0x10
    26e0:	88 89       	ldd	r24, Y+16	; 0x10
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	08 f4       	brcc	.+2      	; 0x26e8 <Keypad_enuGetPressedKey+0x2ea>
    26e6:	dc ce       	rjmp	.-584    	; 0x24a0 <Keypad_enuGetPressedKey+0xa2>
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <Keypad_enuGetPressedKey+0x2f0>




			else{
				 Local_enuErrorstate=ES_NULL_POINTER;
    26ea:	82 e0       	ldi	r24, 0x02	; 2
    26ec:	89 8b       	std	Y+17, r24	; 0x11
			}


			return Local_enuErrorstate;
    26ee:	89 89       	ldd	r24, Y+17	; 0x11
    26f0:	8d ab       	std	Y+53, r24	; 0x35
    26f2:	8d a9       	ldd	r24, Y+53	; 0x35

}
    26f4:	ea 96       	adiw	r28, 0x3a	; 58
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	0f 92       	push	r0
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2710:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    2712:	ea e3       	ldi	r30, 0x3A	; 58
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	8f ef       	ldi	r24, 0xFF	; 255
    2718:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    271a:	e7 e3       	ldi	r30, 0x37	; 55
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 ef       	ldi	r24, 0xF0	; 240
    2720:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    2722:	e4 e3       	ldi	r30, 0x34	; 52
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    272a:	e1 e3       	ldi	r30, 0x31	; 49
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	8f ed       	ldi	r24, 0xDF	; 223
    2730:	80 83       	st	Z, r24

	    PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    2732:	eb e3       	ldi	r30, 0x3B	; 59
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	10 82       	st	Z, r1
		PORTB =CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    2738:	e8 e3       	ldi	r30, 0x38	; 56
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	8f ef       	ldi	r24, 0xFF	; 255
    273e:	80 83       	st	Z, r24
		PORTC =CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    2740:	e5 e3       	ldi	r30, 0x35	; 53
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	10 82       	st	Z, r1
		PORTD =CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    2746:	e2 e3       	ldi	r30, 0x32	; 50
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	88 e5       	ldi	r24, 0x58	; 88
    274c:	80 83       	st	Z, r24

	Local_enuErrorstate = ES_OK;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
}
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <DIO_enuSetPortDirection+0x6>
    2762:	00 d0       	rcall	.+0      	; 0x2764 <DIO_enuSetPortDirection+0x8>
    2764:	0f 92       	push	r0
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	8a 83       	std	Y+2, r24	; 0x02
    276c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    276e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	84 30       	cpi	r24, 0x04	; 4
    2774:	a8 f5       	brcc	.+106    	; 0x27e0 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3d 83       	std	Y+5, r19	; 0x05
    277e:	2c 83       	std	Y+4, r18	; 0x04
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	91 05       	cpc	r25, r1
    2788:	d1 f0       	breq	.+52     	; 0x27be <DIO_enuSetPortDirection+0x62>
    278a:	2c 81       	ldd	r18, Y+4	; 0x04
    278c:	3d 81       	ldd	r19, Y+5	; 0x05
    278e:	22 30       	cpi	r18, 0x02	; 2
    2790:	31 05       	cpc	r19, r1
    2792:	2c f4       	brge	.+10     	; 0x279e <DIO_enuSetPortDirection+0x42>
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	61 f0       	breq	.+24     	; 0x27b4 <DIO_enuSetPortDirection+0x58>
    279c:	1e c0       	rjmp	.+60     	; 0x27da <DIO_enuSetPortDirection+0x7e>
    279e:	2c 81       	ldd	r18, Y+4	; 0x04
    27a0:	3d 81       	ldd	r19, Y+5	; 0x05
    27a2:	22 30       	cpi	r18, 0x02	; 2
    27a4:	31 05       	cpc	r19, r1
    27a6:	81 f0       	breq	.+32     	; 0x27c8 <DIO_enuSetPortDirection+0x6c>
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	9d 81       	ldd	r25, Y+5	; 0x05
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	91 05       	cpc	r25, r1
    27b0:	81 f0       	breq	.+32     	; 0x27d2 <DIO_enuSetPortDirection+0x76>
    27b2:	13 c0       	rjmp	.+38     	; 0x27da <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    27b4:	ea e3       	ldi	r30, 0x3A	; 58
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	80 83       	st	Z, r24
    27bc:	0e c0       	rjmp	.+28     	; 0x27da <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    27be:	e7 e3       	ldi	r30, 0x37	; 55
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	80 83       	st	Z, r24
    27c6:	09 c0       	rjmp	.+18     	; 0x27da <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    27c8:	e4 e3       	ldi	r30, 0x34	; 52
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	80 83       	st	Z, r24
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    27d2:	e1 e3       	ldi	r30, 0x31	; 49
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <DIO_enuSetPortValue+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <DIO_enuSetPortValue+0x8>
    27fe:	0f 92       	push	r0
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	8a 83       	std	Y+2, r24	; 0x02
    2806:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2808:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	a8 f5       	brcc	.+106    	; 0x287a <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	3d 83       	std	Y+5, r19	; 0x05
    2818:	2c 83       	std	Y+4, r18	; 0x04
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	9d 81       	ldd	r25, Y+5	; 0x05
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	91 05       	cpc	r25, r1
    2822:	d1 f0       	breq	.+52     	; 0x2858 <DIO_enuSetPortValue+0x62>
    2824:	2c 81       	ldd	r18, Y+4	; 0x04
    2826:	3d 81       	ldd	r19, Y+5	; 0x05
    2828:	22 30       	cpi	r18, 0x02	; 2
    282a:	31 05       	cpc	r19, r1
    282c:	2c f4       	brge	.+10     	; 0x2838 <DIO_enuSetPortValue+0x42>
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
    2830:	9d 81       	ldd	r25, Y+5	; 0x05
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	61 f0       	breq	.+24     	; 0x284e <DIO_enuSetPortValue+0x58>
    2836:	1e c0       	rjmp	.+60     	; 0x2874 <DIO_enuSetPortValue+0x7e>
    2838:	2c 81       	ldd	r18, Y+4	; 0x04
    283a:	3d 81       	ldd	r19, Y+5	; 0x05
    283c:	22 30       	cpi	r18, 0x02	; 2
    283e:	31 05       	cpc	r19, r1
    2840:	81 f0       	breq	.+32     	; 0x2862 <DIO_enuSetPortValue+0x6c>
    2842:	8c 81       	ldd	r24, Y+4	; 0x04
    2844:	9d 81       	ldd	r25, Y+5	; 0x05
    2846:	83 30       	cpi	r24, 0x03	; 3
    2848:	91 05       	cpc	r25, r1
    284a:	81 f0       	breq	.+32     	; 0x286c <DIO_enuSetPortValue+0x76>
    284c:	13 c0       	rjmp	.+38     	; 0x2874 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    284e:	eb e3       	ldi	r30, 0x3B	; 59
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	80 83       	st	Z, r24
    2856:	0e c0       	rjmp	.+28     	; 0x2874 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    2858:	e8 e3       	ldi	r30, 0x38	; 56
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	80 83       	st	Z, r24
    2860:	09 c0       	rjmp	.+18     	; 0x2874 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    2862:	e5 e3       	ldi	r30, 0x35	; 53
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	80 83       	st	Z, r24
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    286c:	e2 e3       	ldi	r30, 0x32	; 50
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	02 c0       	rjmp	.+4      	; 0x287e <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    287a:	83 e0       	ldi	r24, 0x03	; 3
    287c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    287e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	00 d0       	rcall	.+0      	; 0x2896 <DIO_enuTogPortValue+0x6>
    2896:	00 d0       	rcall	.+0      	; 0x2898 <DIO_enuTogPortValue+0x8>
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    289e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	08 f0       	brcs	.+2      	; 0x28a8 <DIO_enuTogPortValue+0x18>
    28a6:	41 c0       	rjmp	.+130    	; 0x292a <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	3c 83       	std	Y+4, r19	; 0x04
    28b0:	2b 83       	std	Y+3, r18	; 0x03
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	91 05       	cpc	r25, r1
    28ba:	e9 f0       	breq	.+58     	; 0x28f6 <DIO_enuTogPortValue+0x66>
    28bc:	2b 81       	ldd	r18, Y+3	; 0x03
    28be:	3c 81       	ldd	r19, Y+4	; 0x04
    28c0:	22 30       	cpi	r18, 0x02	; 2
    28c2:	31 05       	cpc	r19, r1
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <DIO_enuTogPortValue+0x40>
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	61 f0       	breq	.+24     	; 0x28e6 <DIO_enuTogPortValue+0x56>
    28ce:	2a c0       	rjmp	.+84     	; 0x2924 <DIO_enuTogPortValue+0x94>
    28d0:	2b 81       	ldd	r18, Y+3	; 0x03
    28d2:	3c 81       	ldd	r19, Y+4	; 0x04
    28d4:	22 30       	cpi	r18, 0x02	; 2
    28d6:	31 05       	cpc	r19, r1
    28d8:	b1 f0       	breq	.+44     	; 0x2906 <DIO_enuTogPortValue+0x76>
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	83 30       	cpi	r24, 0x03	; 3
    28e0:	91 05       	cpc	r25, r1
    28e2:	c9 f0       	breq	.+50     	; 0x2916 <DIO_enuTogPortValue+0x86>
    28e4:	1f c0       	rjmp	.+62     	; 0x2924 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    28e6:	ab e3       	ldi	r26, 0x3B	; 59
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	eb e3       	ldi	r30, 0x3B	; 59
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	80 95       	com	r24
    28f2:	8c 93       	st	X, r24
    28f4:	17 c0       	rjmp	.+46     	; 0x2924 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    28f6:	a8 e3       	ldi	r26, 0x38	; 56
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e8 e3       	ldi	r30, 0x38	; 56
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	80 95       	com	r24
    2902:	8c 93       	st	X, r24
    2904:	0f c0       	rjmp	.+30     	; 0x2924 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    2906:	a5 e3       	ldi	r26, 0x35	; 53
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e5 e3       	ldi	r30, 0x35	; 53
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	80 95       	com	r24
    2912:	8c 93       	st	X, r24
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    2916:	a2 e3       	ldi	r26, 0x32	; 50
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e2 e3       	ldi	r30, 0x32	; 50
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	80 95       	com	r24
    2922:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	02 c0       	rjmp	.+4      	; 0x292e <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <DIO_enuGetPortValue+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <DIO_enuGetPortValue+0x8>
    2946:	00 d0       	rcall	.+0      	; 0x2948 <DIO_enuGetPortValue+0xa>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	8a 83       	std	Y+2, r24	; 0x02
    294e:	7c 83       	std	Y+4, r23	; 0x04
    2950:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2952:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	09 f4       	brne	.+2      	; 0x295e <DIO_enuGetPortValue+0x20>
    295c:	43 c0       	rjmp	.+134    	; 0x29e4 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	84 30       	cpi	r24, 0x04	; 4
    2962:	e8 f5       	brcc	.+122    	; 0x29de <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3e 83       	std	Y+6, r19	; 0x06
    296c:	2d 83       	std	Y+5, r18	; 0x05
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	91 05       	cpc	r25, r1
    2976:	e1 f0       	breq	.+56     	; 0x29b0 <DIO_enuGetPortValue+0x72>
    2978:	2d 81       	ldd	r18, Y+5	; 0x05
    297a:	3e 81       	ldd	r19, Y+6	; 0x06
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	31 05       	cpc	r19, r1
    2980:	2c f4       	brge	.+10     	; 0x298c <DIO_enuGetPortValue+0x4e>
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	61 f0       	breq	.+24     	; 0x29a2 <DIO_enuGetPortValue+0x64>
    298a:	26 c0       	rjmp	.+76     	; 0x29d8 <DIO_enuGetPortValue+0x9a>
    298c:	2d 81       	ldd	r18, Y+5	; 0x05
    298e:	3e 81       	ldd	r19, Y+6	; 0x06
    2990:	22 30       	cpi	r18, 0x02	; 2
    2992:	31 05       	cpc	r19, r1
    2994:	a1 f0       	breq	.+40     	; 0x29be <DIO_enuGetPortValue+0x80>
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	83 30       	cpi	r24, 0x03	; 3
    299c:	91 05       	cpc	r25, r1
    299e:	b1 f0       	breq	.+44     	; 0x29cc <DIO_enuGetPortValue+0x8e>
    29a0:	1b c0       	rjmp	.+54     	; 0x29d8 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    29a2:	e9 e3       	ldi	r30, 0x39	; 57
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	eb 81       	ldd	r30, Y+3	; 0x03
    29aa:	fc 81       	ldd	r31, Y+4	; 0x04
    29ac:	80 83       	st	Z, r24
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    29b0:	e6 e3       	ldi	r30, 0x36	; 54
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	eb 81       	ldd	r30, Y+3	; 0x03
    29b8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ba:	80 83       	st	Z, r24
    29bc:	0d c0       	rjmp	.+26     	; 0x29d8 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    29be:	e3 e3       	ldi	r30, 0x33	; 51
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	eb 81       	ldd	r30, Y+3	; 0x03
    29c6:	fc 81       	ldd	r31, Y+4	; 0x04
    29c8:	80 83       	st	Z, r24
    29ca:	06 c0       	rjmp	.+12     	; 0x29d8 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    29cc:	e0 e3       	ldi	r30, 0x30	; 48
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	eb 81       	ldd	r30, Y+3	; 0x03
    29d4:	fc 81       	ldd	r31, Y+4	; 0x04
    29d6:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	05 c0       	rjmp	.+10     	; 0x29e8 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ea:	26 96       	adiw	r28, 0x06	; 6
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <DIO_enuSetPinDirection+0x6>
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <DIO_enuSetPinDirection+0x8>
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <DIO_enuSetPinDirection+0xa>
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
    2a0c:	6b 83       	std	Y+3, r22	; 0x03
    2a0e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2a10:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	84 30       	cpi	r24, 0x04	; 4
    2a16:	08 f0       	brcs	.+2      	; 0x2a1a <DIO_enuSetPinDirection+0x1e>
    2a18:	d1 c0       	rjmp	.+418    	; 0x2bbc <DIO_enuSetPinDirection+0x1c0>
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	88 30       	cpi	r24, 0x08	; 8
    2a1e:	08 f0       	brcs	.+2      	; 0x2a22 <DIO_enuSetPinDirection+0x26>
    2a20:	cd c0       	rjmp	.+410    	; 0x2bbc <DIO_enuSetPinDirection+0x1c0>
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	82 30       	cpi	r24, 0x02	; 2
    2a26:	08 f0       	brcs	.+2      	; 0x2a2a <DIO_enuSetPinDirection+0x2e>
    2a28:	c9 c0       	rjmp	.+402    	; 0x2bbc <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	3e 83       	std	Y+6, r19	; 0x06
    2a32:	2d 83       	std	Y+5, r18	; 0x05
    2a34:	6d 81       	ldd	r22, Y+5	; 0x05
    2a36:	7e 81       	ldd	r23, Y+6	; 0x06
    2a38:	61 30       	cpi	r22, 0x01	; 1
    2a3a:	71 05       	cpc	r23, r1
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <DIO_enuSetPinDirection+0x44>
    2a3e:	41 c0       	rjmp	.+130    	; 0x2ac2 <DIO_enuSetPinDirection+0xc6>
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	82 30       	cpi	r24, 0x02	; 2
    2a46:	91 05       	cpc	r25, r1
    2a48:	34 f4       	brge	.+12     	; 0x2a56 <DIO_enuSetPinDirection+0x5a>
    2a4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a4c:	3e 81       	ldd	r19, Y+6	; 0x06
    2a4e:	21 15       	cp	r18, r1
    2a50:	31 05       	cpc	r19, r1
    2a52:	71 f0       	breq	.+28     	; 0x2a70 <DIO_enuSetPinDirection+0x74>
    2a54:	b0 c0       	rjmp	.+352    	; 0x2bb6 <DIO_enuSetPinDirection+0x1ba>
    2a56:	6d 81       	ldd	r22, Y+5	; 0x05
    2a58:	7e 81       	ldd	r23, Y+6	; 0x06
    2a5a:	62 30       	cpi	r22, 0x02	; 2
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <DIO_enuSetPinDirection+0x66>
    2a60:	59 c0       	rjmp	.+178    	; 0x2b14 <DIO_enuSetPinDirection+0x118>
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	83 30       	cpi	r24, 0x03	; 3
    2a68:	91 05       	cpc	r25, r1
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <DIO_enuSetPinDirection+0x72>
    2a6c:	7c c0       	rjmp	.+248    	; 0x2b66 <DIO_enuSetPinDirection+0x16a>
    2a6e:	a3 c0       	rjmp	.+326    	; 0x2bb6 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2a70:	aa e3       	ldi	r26, 0x3A	; 58
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	ea e3       	ldi	r30, 0x3A	; 58
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	48 2f       	mov	r20, r24
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <DIO_enuSetPinDirection+0x90>
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	2a 95       	dec	r18
    2a8e:	e2 f7       	brpl	.-8      	; 0x2a88 <DIO_enuSetPinDirection+0x8c>
    2a90:	80 95       	com	r24
    2a92:	84 23       	and	r24, r20
    2a94:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2a96:	aa e3       	ldi	r26, 0x3A	; 58
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	ea e3       	ldi	r30, 0x3A	; 58
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	48 2f       	mov	r20, r24
    2aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	b9 01       	movw	r22, r18
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <DIO_enuSetPinDirection+0xba>
    2ab2:	66 0f       	add	r22, r22
    2ab4:	77 1f       	adc	r23, r23
    2ab6:	8a 95       	dec	r24
    2ab8:	e2 f7       	brpl	.-8      	; 0x2ab2 <DIO_enuSetPinDirection+0xb6>
    2aba:	cb 01       	movw	r24, r22
    2abc:	84 2b       	or	r24, r20
    2abe:	8c 93       	st	X, r24
    2ac0:	7a c0       	rjmp	.+244    	; 0x2bb6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2ac2:	a7 e3       	ldi	r26, 0x37	; 55
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e7 e3       	ldi	r30, 0x37	; 55
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	48 2f       	mov	r20, r24
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <DIO_enuSetPinDirection+0xe2>
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	2a 95       	dec	r18
    2ae0:	e2 f7       	brpl	.-8      	; 0x2ada <DIO_enuSetPinDirection+0xde>
    2ae2:	80 95       	com	r24
    2ae4:	84 23       	and	r24, r20
    2ae6:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    2ae8:	a7 e3       	ldi	r26, 0x37	; 55
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e7 e3       	ldi	r30, 0x37	; 55
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	48 2f       	mov	r20, r24
    2af4:	8c 81       	ldd	r24, Y+4	; 0x04
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	88 2f       	mov	r24, r24
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	b9 01       	movw	r22, r18
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <DIO_enuSetPinDirection+0x10c>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	8a 95       	dec	r24
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <DIO_enuSetPinDirection+0x108>
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	84 2b       	or	r24, r20
    2b10:	8c 93       	st	X, r24
    2b12:	51 c0       	rjmp	.+162    	; 0x2bb6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2b14:	a4 e3       	ldi	r26, 0x34	; 52
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e4 e3       	ldi	r30, 0x34	; 52
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	48 2f       	mov	r20, r24
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <DIO_enuSetPinDirection+0x134>
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	2a 95       	dec	r18
    2b32:	e2 f7       	brpl	.-8      	; 0x2b2c <DIO_enuSetPinDirection+0x130>
    2b34:	80 95       	com	r24
    2b36:	84 23       	and	r24, r20
    2b38:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    2b3a:	a4 e3       	ldi	r26, 0x34	; 52
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e4 e3       	ldi	r30, 0x34	; 52
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	48 2f       	mov	r20, r24
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	b9 01       	movw	r22, r18
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <DIO_enuSetPinDirection+0x15e>
    2b56:	66 0f       	add	r22, r22
    2b58:	77 1f       	adc	r23, r23
    2b5a:	8a 95       	dec	r24
    2b5c:	e2 f7       	brpl	.-8      	; 0x2b56 <DIO_enuSetPinDirection+0x15a>
    2b5e:	cb 01       	movw	r24, r22
    2b60:	84 2b       	or	r24, r20
    2b62:	8c 93       	st	X, r24
    2b64:	28 c0       	rjmp	.+80     	; 0x2bb6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2b66:	a1 e3       	ldi	r26, 0x31	; 49
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e1 e3       	ldi	r30, 0x31	; 49
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	48 2f       	mov	r20, r24
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <DIO_enuSetPinDirection+0x186>
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	2a 95       	dec	r18
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <DIO_enuSetPinDirection+0x182>
    2b86:	80 95       	com	r24
    2b88:	84 23       	and	r24, r20
    2b8a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    2b8c:	a1 e3       	ldi	r26, 0x31	; 49
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e1 e3       	ldi	r30, 0x31	; 49
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	48 2f       	mov	r20, r24
    2b98:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b9 01       	movw	r22, r18
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <DIO_enuSetPinDirection+0x1b0>
    2ba8:	66 0f       	add	r22, r22
    2baa:	77 1f       	adc	r23, r23
    2bac:	8a 95       	dec	r24
    2bae:	e2 f7       	brpl	.-8      	; 0x2ba8 <DIO_enuSetPinDirection+0x1ac>
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	84 2b       	or	r24, r20
    2bb4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc2:	26 96       	adiw	r28, 0x06	; 6
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <DIO_enuSetPinValue+0x6>
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <DIO_enuSetPinValue+0x8>
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <DIO_enuSetPinValue+0xa>
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	8a 83       	std	Y+2, r24	; 0x02
    2be4:	6b 83       	std	Y+3, r22	; 0x03
    2be6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2be8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	84 30       	cpi	r24, 0x04	; 4
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <DIO_enuSetPinValue+0x1e>
    2bf0:	d1 c0       	rjmp	.+418    	; 0x2d94 <DIO_enuSetPinValue+0x1c0>
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	88 30       	cpi	r24, 0x08	; 8
    2bf6:	08 f0       	brcs	.+2      	; 0x2bfa <DIO_enuSetPinValue+0x26>
    2bf8:	cd c0       	rjmp	.+410    	; 0x2d94 <DIO_enuSetPinValue+0x1c0>
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	82 30       	cpi	r24, 0x02	; 2
    2bfe:	08 f0       	brcs	.+2      	; 0x2c02 <DIO_enuSetPinValue+0x2e>
    2c00:	c9 c0       	rjmp	.+402    	; 0x2d94 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	3e 83       	std	Y+6, r19	; 0x06
    2c0a:	2d 83       	std	Y+5, r18	; 0x05
    2c0c:	6d 81       	ldd	r22, Y+5	; 0x05
    2c0e:	7e 81       	ldd	r23, Y+6	; 0x06
    2c10:	61 30       	cpi	r22, 0x01	; 1
    2c12:	71 05       	cpc	r23, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <DIO_enuSetPinValue+0x44>
    2c16:	41 c0       	rjmp	.+130    	; 0x2c9a <DIO_enuSetPinValue+0xc6>
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	82 30       	cpi	r24, 0x02	; 2
    2c1e:	91 05       	cpc	r25, r1
    2c20:	34 f4       	brge	.+12     	; 0x2c2e <DIO_enuSetPinValue+0x5a>
    2c22:	2d 81       	ldd	r18, Y+5	; 0x05
    2c24:	3e 81       	ldd	r19, Y+6	; 0x06
    2c26:	21 15       	cp	r18, r1
    2c28:	31 05       	cpc	r19, r1
    2c2a:	71 f0       	breq	.+28     	; 0x2c48 <DIO_enuSetPinValue+0x74>
    2c2c:	b0 c0       	rjmp	.+352    	; 0x2d8e <DIO_enuSetPinValue+0x1ba>
    2c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c30:	7e 81       	ldd	r23, Y+6	; 0x06
    2c32:	62 30       	cpi	r22, 0x02	; 2
    2c34:	71 05       	cpc	r23, r1
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <DIO_enuSetPinValue+0x66>
    2c38:	59 c0       	rjmp	.+178    	; 0x2cec <DIO_enuSetPinValue+0x118>
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	83 30       	cpi	r24, 0x03	; 3
    2c40:	91 05       	cpc	r25, r1
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <DIO_enuSetPinValue+0x72>
    2c44:	7c c0       	rjmp	.+248    	; 0x2d3e <DIO_enuSetPinValue+0x16a>
    2c46:	a3 c0       	rjmp	.+326    	; 0x2d8e <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2c48:	ab e3       	ldi	r26, 0x3B	; 59
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	eb e3       	ldi	r30, 0x3B	; 59
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	48 2f       	mov	r20, r24
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <DIO_enuSetPinValue+0x90>
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	2a 95       	dec	r18
    2c66:	e2 f7       	brpl	.-8      	; 0x2c60 <DIO_enuSetPinValue+0x8c>
    2c68:	80 95       	com	r24
    2c6a:	84 23       	and	r24, r20
    2c6c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    2c6e:	ab e3       	ldi	r26, 0x3B	; 59
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	eb e3       	ldi	r30, 0x3B	; 59
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	48 2f       	mov	r20, r24
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	88 2f       	mov	r24, r24
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	b9 01       	movw	r22, r18
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <DIO_enuSetPinValue+0xba>
    2c8a:	66 0f       	add	r22, r22
    2c8c:	77 1f       	adc	r23, r23
    2c8e:	8a 95       	dec	r24
    2c90:	e2 f7       	brpl	.-8      	; 0x2c8a <DIO_enuSetPinValue+0xb6>
    2c92:	cb 01       	movw	r24, r22
    2c94:	84 2b       	or	r24, r20
    2c96:	8c 93       	st	X, r24
    2c98:	7a c0       	rjmp	.+244    	; 0x2d8e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2c9a:	a8 e3       	ldi	r26, 0x38	; 56
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e8 e3       	ldi	r30, 0x38	; 56
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	48 2f       	mov	r20, r24
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <DIO_enuSetPinValue+0xe2>
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	2a 95       	dec	r18
    2cb8:	e2 f7       	brpl	.-8      	; 0x2cb2 <DIO_enuSetPinValue+0xde>
    2cba:	80 95       	com	r24
    2cbc:	84 23       	and	r24, r20
    2cbe:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    2cc0:	a8 e3       	ldi	r26, 0x38	; 56
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e8 e3       	ldi	r30, 0x38	; 56
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	48 2f       	mov	r20, r24
    2ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cce:	28 2f       	mov	r18, r24
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	b9 01       	movw	r22, r18
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <DIO_enuSetPinValue+0x10c>
    2cdc:	66 0f       	add	r22, r22
    2cde:	77 1f       	adc	r23, r23
    2ce0:	8a 95       	dec	r24
    2ce2:	e2 f7       	brpl	.-8      	; 0x2cdc <DIO_enuSetPinValue+0x108>
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	84 2b       	or	r24, r20
    2ce8:	8c 93       	st	X, r24
    2cea:	51 c0       	rjmp	.+162    	; 0x2d8e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2cec:	a5 e3       	ldi	r26, 0x35	; 53
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e5 e3       	ldi	r30, 0x35	; 53
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	48 2f       	mov	r20, r24
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <DIO_enuSetPinValue+0x134>
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	2a 95       	dec	r18
    2d0a:	e2 f7       	brpl	.-8      	; 0x2d04 <DIO_enuSetPinValue+0x130>
    2d0c:	80 95       	com	r24
    2d0e:	84 23       	and	r24, r20
    2d10:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    2d12:	a5 e3       	ldi	r26, 0x35	; 53
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e5 e3       	ldi	r30, 0x35	; 53
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	48 2f       	mov	r20, r24
    2d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	b9 01       	movw	r22, r18
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <DIO_enuSetPinValue+0x15e>
    2d2e:	66 0f       	add	r22, r22
    2d30:	77 1f       	adc	r23, r23
    2d32:	8a 95       	dec	r24
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <DIO_enuSetPinValue+0x15a>
    2d36:	cb 01       	movw	r24, r22
    2d38:	84 2b       	or	r24, r20
    2d3a:	8c 93       	st	X, r24
    2d3c:	28 c0       	rjmp	.+80     	; 0x2d8e <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2d3e:	a2 e3       	ldi	r26, 0x32	; 50
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e2 e3       	ldi	r30, 0x32	; 50
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	48 2f       	mov	r20, r24
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <DIO_enuSetPinValue+0x186>
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	2a 95       	dec	r18
    2d5c:	e2 f7       	brpl	.-8      	; 0x2d56 <DIO_enuSetPinValue+0x182>
    2d5e:	80 95       	com	r24
    2d60:	84 23       	and	r24, r20
    2d62:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    2d64:	a2 e3       	ldi	r26, 0x32	; 50
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e2 e3       	ldi	r30, 0x32	; 50
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	48 2f       	mov	r20, r24
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	b9 01       	movw	r22, r18
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <DIO_enuSetPinValue+0x1b0>
    2d80:	66 0f       	add	r22, r22
    2d82:	77 1f       	adc	r23, r23
    2d84:	8a 95       	dec	r24
    2d86:	e2 f7       	brpl	.-8      	; 0x2d80 <DIO_enuSetPinValue+0x1ac>
    2d88:	cb 01       	movw	r24, r22
    2d8a:	84 2b       	or	r24, r20
    2d8c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2d94:	83 e0       	ldi	r24, 0x03	; 3
    2d96:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d9a:	26 96       	adiw	r28, 0x06	; 6
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	00 d0       	rcall	.+0      	; 0x2db2 <DIO_enuTogPin+0x6>
    2db2:	00 d0       	rcall	.+0      	; 0x2db4 <DIO_enuTogPin+0x8>
    2db4:	0f 92       	push	r0
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	8a 83       	std	Y+2, r24	; 0x02
    2dbc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2dbe:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	84 30       	cpi	r24, 0x04	; 4
    2dc4:	08 f0       	brcs	.+2      	; 0x2dc8 <DIO_enuTogPin+0x1c>
    2dc6:	75 c0       	rjmp	.+234    	; 0x2eb2 <DIO_enuTogPin+0x106>
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	88 30       	cpi	r24, 0x08	; 8
    2dcc:	08 f0       	brcs	.+2      	; 0x2dd0 <DIO_enuTogPin+0x24>
    2dce:	71 c0       	rjmp	.+226    	; 0x2eb2 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	3d 83       	std	Y+5, r19	; 0x05
    2dd8:	2c 83       	std	Y+4, r18	; 0x04
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	91 05       	cpc	r25, r1
    2de2:	49 f1       	breq	.+82     	; 0x2e36 <DIO_enuTogPin+0x8a>
    2de4:	2c 81       	ldd	r18, Y+4	; 0x04
    2de6:	3d 81       	ldd	r19, Y+5	; 0x05
    2de8:	22 30       	cpi	r18, 0x02	; 2
    2dea:	31 05       	cpc	r19, r1
    2dec:	2c f4       	brge	.+10     	; 0x2df8 <DIO_enuTogPin+0x4c>
    2dee:	8c 81       	ldd	r24, Y+4	; 0x04
    2df0:	9d 81       	ldd	r25, Y+5	; 0x05
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	61 f0       	breq	.+24     	; 0x2e0e <DIO_enuTogPin+0x62>
    2df6:	5a c0       	rjmp	.+180    	; 0x2eac <DIO_enuTogPin+0x100>
    2df8:	2c 81       	ldd	r18, Y+4	; 0x04
    2dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    2dfc:	22 30       	cpi	r18, 0x02	; 2
    2dfe:	31 05       	cpc	r19, r1
    2e00:	71 f1       	breq	.+92     	; 0x2e5e <DIO_enuTogPin+0xb2>
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	9d 81       	ldd	r25, Y+5	; 0x05
    2e06:	83 30       	cpi	r24, 0x03	; 3
    2e08:	91 05       	cpc	r25, r1
    2e0a:	e9 f1       	breq	.+122    	; 0x2e86 <DIO_enuTogPin+0xda>
    2e0c:	4f c0       	rjmp	.+158    	; 0x2eac <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e0e:	ab e3       	ldi	r26, 0x3B	; 59
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	eb e3       	ldi	r30, 0x3B	; 59
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	48 2f       	mov	r20, r24
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 2e       	mov	r0, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <DIO_enuTogPin+0x80>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	0a 94       	dec	r0
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <DIO_enuTogPin+0x7c>
    2e30:	84 27       	eor	r24, r20
    2e32:	8c 93       	st	X, r24
    2e34:	3b c0       	rjmp	.+118    	; 0x2eac <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e36:	a8 e3       	ldi	r26, 0x38	; 56
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e8 e3       	ldi	r30, 0x38	; 56
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	48 2f       	mov	r20, r24
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 2e       	mov	r0, r18
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <DIO_enuTogPin+0xa8>
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	0a 94       	dec	r0
    2e56:	e2 f7       	brpl	.-8      	; 0x2e50 <DIO_enuTogPin+0xa4>
    2e58:	84 27       	eor	r24, r20
    2e5a:	8c 93       	st	X, r24
    2e5c:	27 c0       	rjmp	.+78     	; 0x2eac <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e5e:	a5 e3       	ldi	r26, 0x35	; 53
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e5 e3       	ldi	r30, 0x35	; 53
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	48 2f       	mov	r20, r24
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	02 2e       	mov	r0, r18
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <DIO_enuTogPin+0xd0>
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	0a 94       	dec	r0
    2e7e:	e2 f7       	brpl	.-8      	; 0x2e78 <DIO_enuTogPin+0xcc>
    2e80:	84 27       	eor	r24, r20
    2e82:	8c 93       	st	X, r24
    2e84:	13 c0       	rjmp	.+38     	; 0x2eac <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2e86:	a2 e3       	ldi	r26, 0x32	; 50
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e2 e3       	ldi	r30, 0x32	; 50
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	48 2f       	mov	r20, r24
    2e92:	8b 81       	ldd	r24, Y+3	; 0x03
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	02 2e       	mov	r0, r18
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <DIO_enuTogPin+0xf8>
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	0a 94       	dec	r0
    2ea6:	e2 f7       	brpl	.-8      	; 0x2ea0 <DIO_enuTogPin+0xf4>
    2ea8:	84 27       	eor	r24, r20
    2eaa:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	27 97       	sbiw	r28, 0x07	; 7
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	8a 83       	std	Y+2, r24	; 0x02
    2ede:	6b 83       	std	Y+3, r22	; 0x03
    2ee0:	5d 83       	std	Y+5, r21	; 0x05
    2ee2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2ee4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <DIO_enuGetPinValue+0x28>
    2eee:	7e c0       	rjmp	.+252    	; 0x2fec <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	84 30       	cpi	r24, 0x04	; 4
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <DIO_enuGetPinValue+0x30>
    2ef6:	77 c0       	rjmp	.+238    	; 0x2fe6 <DIO_enuGetPinValue+0x11e>
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	88 30       	cpi	r24, 0x08	; 8
    2efc:	08 f0       	brcs	.+2      	; 0x2f00 <DIO_enuGetPinValue+0x38>
    2efe:	73 c0       	rjmp	.+230    	; 0x2fe6 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    2f00:	8a 81       	ldd	r24, Y+2	; 0x02
    2f02:	28 2f       	mov	r18, r24
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	3f 83       	std	Y+7, r19	; 0x07
    2f08:	2e 83       	std	Y+6, r18	; 0x06
    2f0a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f0c:	5f 81       	ldd	r21, Y+7	; 0x07
    2f0e:	41 30       	cpi	r20, 0x01	; 1
    2f10:	51 05       	cpc	r21, r1
    2f12:	59 f1       	breq	.+86     	; 0x2f6a <DIO_enuGetPinValue+0xa2>
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	9f 81       	ldd	r25, Y+7	; 0x07
    2f18:	82 30       	cpi	r24, 0x02	; 2
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	34 f4       	brge	.+12     	; 0x2f2a <DIO_enuGetPinValue+0x62>
    2f1e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f20:	3f 81       	ldd	r19, Y+7	; 0x07
    2f22:	21 15       	cp	r18, r1
    2f24:	31 05       	cpc	r19, r1
    2f26:	69 f0       	breq	.+26     	; 0x2f42 <DIO_enuGetPinValue+0x7a>
    2f28:	5b c0       	rjmp	.+182    	; 0x2fe0 <DIO_enuGetPinValue+0x118>
    2f2a:	4e 81       	ldd	r20, Y+6	; 0x06
    2f2c:	5f 81       	ldd	r21, Y+7	; 0x07
    2f2e:	42 30       	cpi	r20, 0x02	; 2
    2f30:	51 05       	cpc	r21, r1
    2f32:	79 f1       	breq	.+94     	; 0x2f92 <DIO_enuGetPinValue+0xca>
    2f34:	8e 81       	ldd	r24, Y+6	; 0x06
    2f36:	9f 81       	ldd	r25, Y+7	; 0x07
    2f38:	83 30       	cpi	r24, 0x03	; 3
    2f3a:	91 05       	cpc	r25, r1
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <DIO_enuGetPinValue+0x78>
    2f3e:	3d c0       	rjmp	.+122    	; 0x2fba <DIO_enuGetPinValue+0xf2>
    2f40:	4f c0       	rjmp	.+158    	; 0x2fe0 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    2f42:	e9 e3       	ldi	r30, 0x39	; 57
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a9 01       	movw	r20, r18
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <DIO_enuGetPinValue+0x92>
    2f56:	55 95       	asr	r21
    2f58:	47 95       	ror	r20
    2f5a:	8a 95       	dec	r24
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <DIO_enuGetPinValue+0x8e>
    2f5e:	ca 01       	movw	r24, r20
    2f60:	81 70       	andi	r24, 0x01	; 1
    2f62:	ec 81       	ldd	r30, Y+4	; 0x04
    2f64:	fd 81       	ldd	r31, Y+5	; 0x05
    2f66:	80 83       	st	Z, r24
    2f68:	3b c0       	rjmp	.+118    	; 0x2fe0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    2f6a:	e6 e3       	ldi	r30, 0x36	; 54
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	88 2f       	mov	r24, r24
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	a9 01       	movw	r20, r18
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <DIO_enuGetPinValue+0xba>
    2f7e:	55 95       	asr	r21
    2f80:	47 95       	ror	r20
    2f82:	8a 95       	dec	r24
    2f84:	e2 f7       	brpl	.-8      	; 0x2f7e <DIO_enuGetPinValue+0xb6>
    2f86:	ca 01       	movw	r24, r20
    2f88:	81 70       	andi	r24, 0x01	; 1
    2f8a:	ec 81       	ldd	r30, Y+4	; 0x04
    2f8c:	fd 81       	ldd	r31, Y+5	; 0x05
    2f8e:	80 83       	st	Z, r24
    2f90:	27 c0       	rjmp	.+78     	; 0x2fe0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    2f92:	e3 e3       	ldi	r30, 0x33	; 51
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a9 01       	movw	r20, r18
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <DIO_enuGetPinValue+0xe2>
    2fa6:	55 95       	asr	r21
    2fa8:	47 95       	ror	r20
    2faa:	8a 95       	dec	r24
    2fac:	e2 f7       	brpl	.-8      	; 0x2fa6 <DIO_enuGetPinValue+0xde>
    2fae:	ca 01       	movw	r24, r20
    2fb0:	81 70       	andi	r24, 0x01	; 1
    2fb2:	ec 81       	ldd	r30, Y+4	; 0x04
    2fb4:	fd 81       	ldd	r31, Y+5	; 0x05
    2fb6:	80 83       	st	Z, r24
    2fb8:	13 c0       	rjmp	.+38     	; 0x2fe0 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    2fba:	e0 e3       	ldi	r30, 0x30	; 48
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	88 2f       	mov	r24, r24
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	a9 01       	movw	r20, r18
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <DIO_enuGetPinValue+0x10a>
    2fce:	55 95       	asr	r21
    2fd0:	47 95       	ror	r20
    2fd2:	8a 95       	dec	r24
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <DIO_enuGetPinValue+0x106>
    2fd6:	ca 01       	movw	r24, r20
    2fd8:	81 70       	andi	r24, 0x01	; 1
    2fda:	ec 81       	ldd	r30, Y+4	; 0x04
    2fdc:	fd 81       	ldd	r31, Y+5	; 0x05
    2fde:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	05 c0       	rjmp	.+10     	; 0x2ff0 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    2fe6:	83 e0       	ldi	r24, 0x03	; 3
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ff2:	27 96       	adiw	r28, 0x07	; 7
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <main>:
#include "util/delay.h"
#include "calculator/cal.h"


int main (void)
{
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62

	CAL_INIT();
    300c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CAL_INIT>

   while(1){
    CAL_INPUT();
    3010:	0e 94 be 05 	call	0xb7c	; 0xb7c <CAL_INPUT>
    3014:	fd cf       	rjmp	.-6      	; 0x3010 <main+0xc>

00003016 <CreateStack>:

#include "stack.h"

void CreateStack(NUMS *ps)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <CreateStack+0x6>
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    3024:	e9 81       	ldd	r30, Y+1	; 0x01
    3026:	fa 81       	ldd	r31, Y+2	; 0x02
    3028:	11 82       	std	Z+1, r1	; 0x01
    302a:	10 82       	st	Z, r1
}
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <CreateStack_op>:

void CreateStack_op(operations *ps)
{
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	00 d0       	rcall	.+0      	; 0x303c <CreateStack_op+0x6>
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    3044:	e9 81       	ldd	r30, Y+1	; 0x01
    3046:	fa 81       	ldd	r31, Y+2	; 0x02
    3048:	11 82       	std	Z+1, r1	; 0x01
    304a:	10 82       	st	Z, r1
}
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <Push>:
	}

}*/

void Push(stackentry e, NUMS *ps)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <Push+0x6>
    305c:	00 d0       	rcall	.+0      	; 0x305e <Push+0x8>
    305e:	00 d0       	rcall	.+0      	; 0x3060 <Push+0xa>
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	69 83       	std	Y+1, r22	; 0x01
    3066:	7a 83       	std	Y+2, r23	; 0x02
    3068:	8b 83       	std	Y+3, r24	; 0x03
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	5e 83       	std	Y+6, r21	; 0x06
    306e:	4d 83       	std	Y+5, r20	; 0x05
    ps->entry[ps->top++]=e;
    3070:	ed 81       	ldd	r30, Y+5	; 0x05
    3072:	fe 81       	ldd	r31, Y+6	; 0x06
    3074:	40 81       	ld	r20, Z
    3076:	51 81       	ldd	r21, Z+1	; 0x01
    3078:	2d 81       	ldd	r18, Y+5	; 0x05
    307a:	3e 81       	ldd	r19, Y+6	; 0x06
    307c:	ca 01       	movw	r24, r20
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	88 0f       	add	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	f9 01       	movw	r30, r18
    308a:	e8 0f       	add	r30, r24
    308c:	f9 1f       	adc	r31, r25
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	9a 81       	ldd	r25, Y+2	; 0x02
    3092:	ab 81       	ldd	r26, Y+3	; 0x03
    3094:	bc 81       	ldd	r27, Y+4	; 0x04
    3096:	80 83       	st	Z, r24
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	a2 83       	std	Z+2, r26	; 0x02
    309c:	b3 83       	std	Z+3, r27	; 0x03
    309e:	ca 01       	movw	r24, r20
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	ed 81       	ldd	r30, Y+5	; 0x05
    30a4:	fe 81       	ldd	r31, Y+6	; 0x06
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	80 83       	st	Z, r24
}
    30aa:	26 96       	adiw	r28, 0x06	; 6
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <Push_op>:
void Push_op(u8 e, operations *OP)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <Push_op+0x6>
    30c2:	0f 92       	push	r0
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	7b 83       	std	Y+3, r23	; 0x03
    30cc:	6a 83       	std	Y+2, r22	; 0x02
    OP->entryy[OP->top++]=e;
    30ce:	ea 81       	ldd	r30, Y+2	; 0x02
    30d0:	fb 81       	ldd	r31, Y+3	; 0x03
    30d2:	20 81       	ld	r18, Z
    30d4:	31 81       	ldd	r19, Z+1	; 0x01
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	9b 81       	ldd	r25, Y+3	; 0x03
    30da:	82 0f       	add	r24, r18
    30dc:	93 1f       	adc	r25, r19
    30de:	fc 01       	movw	r30, r24
    30e0:	32 96       	adiw	r30, 0x02	; 2
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	80 83       	st	Z, r24
    30e6:	c9 01       	movw	r24, r18
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	ea 81       	ldd	r30, Y+2	; 0x02
    30ec:	fb 81       	ldd	r31, Y+3	; 0x03
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <Pop_op>:

void Pop_op(u8 *pe, operations *OP)
{
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	00 d0       	rcall	.+0      	; 0x3104 <Pop_op+0x6>
    3104:	00 d0       	rcall	.+0      	; 0x3106 <Pop_op+0x8>
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	7c 83       	std	Y+4, r23	; 0x04
    3110:	6b 83       	std	Y+3, r22	; 0x03
    *pe=OP->entryy[--OP->top];
    3112:	eb 81       	ldd	r30, Y+3	; 0x03
    3114:	fc 81       	ldd	r31, Y+4	; 0x04
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	eb 81       	ldd	r30, Y+3	; 0x03
    311e:	fc 81       	ldd	r31, Y+4	; 0x04
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
    3124:	eb 81       	ldd	r30, Y+3	; 0x03
    3126:	fc 81       	ldd	r31, Y+4	; 0x04
    3128:	20 81       	ld	r18, Z
    312a:	31 81       	ldd	r19, Z+1	; 0x01
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	82 0f       	add	r24, r18
    3132:	93 1f       	adc	r25, r19
    3134:	fc 01       	movw	r30, r24
    3136:	32 96       	adiw	r30, 0x02	; 2
    3138:	80 81       	ld	r24, Z
    313a:	e9 81       	ldd	r30, Y+1	; 0x01
    313c:	fa 81       	ldd	r31, Y+2	; 0x02
    313e:	80 83       	st	Z, r24
}
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <Pop>:

void Pop(stackentry *pe, NUMS *ps)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <Pop+0x6>
    3154:	00 d0       	rcall	.+0      	; 0x3156 <Pop+0x8>
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	89 83       	std	Y+1, r24	; 0x01
    315e:	7c 83       	std	Y+4, r23	; 0x04
    3160:	6b 83       	std	Y+3, r22	; 0x03
    *pe=ps->entry[--ps->top];
    3162:	eb 81       	ldd	r30, Y+3	; 0x03
    3164:	fc 81       	ldd	r31, Y+4	; 0x04
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	eb 81       	ldd	r30, Y+3	; 0x03
    316e:	fc 81       	ldd	r31, Y+4	; 0x04
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	80 83       	st	Z, r24
    3174:	eb 81       	ldd	r30, Y+3	; 0x03
    3176:	fc 81       	ldd	r31, Y+4	; 0x04
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	2b 81       	ldd	r18, Y+3	; 0x03
    317e:	3c 81       	ldd	r19, Y+4	; 0x04
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	f9 01       	movw	r30, r18
    318c:	e8 0f       	add	r30, r24
    318e:	f9 1f       	adc	r31, r25
    3190:	80 81       	ld	r24, Z
    3192:	91 81       	ldd	r25, Z+1	; 0x01
    3194:	a2 81       	ldd	r26, Z+2	; 0x02
    3196:	b3 81       	ldd	r27, Z+3	; 0x03
    3198:	e9 81       	ldd	r30, Y+1	; 0x01
    319a:	fa 81       	ldd	r31, Y+2	; 0x02
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
}
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <StackFull>:


int StackFull(NUMS *ps)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <StackFull+0x6>
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <StackFull+0x8>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
    return (ps->top==maxstack);
    31c2:	e9 81       	ldd	r30, Y+1	; 0x01
    31c4:	fa 81       	ldd	r31, Y+2	; 0x02
    31c6:	80 81       	ld	r24, Z
    31c8:	91 81       	ldd	r25, Z+1	; 0x01
    31ca:	1c 82       	std	Y+4, r1	; 0x04
    31cc:	1b 82       	std	Y+3, r1	; 0x03
    31ce:	84 36       	cpi	r24, 0x64	; 100
    31d0:	91 05       	cpc	r25, r1
    31d2:	21 f4       	brne	.+8      	; 0x31dc <StackFull+0x2a>
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	9c 83       	std	Y+4, r25	; 0x04
    31da:	8b 83       	std	Y+3, r24	; 0x03
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
}
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <StackEmpty_op>:

int StackEmpty_op(operations *ps)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <StackEmpty_op+0x6>
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	9a 83       	std	Y+2, r25	; 0x02
    31fa:	89 83       	std	Y+1, r24	; 0x01
    return ps->top;
    31fc:	e9 81       	ldd	r30, Y+1	; 0x01
    31fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3200:	80 81       	ld	r24, Z
    3202:	91 81       	ldd	r25, Z+1	; 0x01
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <StackEmpty>:
int StackEmpty(NUMS *ps)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <StackEmpty+0x6>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
    return ps->top;
    321c:	e9 81       	ldd	r30, Y+1	; 0x01
    321e:	fa 81       	ldd	r31, Y+2	; 0x02
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
}
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <StackSize>:

    pe=ps->entry[ps->top-1];
}*/

int StackSize(NUMS *ps)
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	00 d0       	rcall	.+0      	; 0x3234 <StackSize+0x6>
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	89 83       	std	Y+1, r24	; 0x01

    return ps->top;
    323c:	e9 81       	ldd	r30, Y+1	; 0x01
    323e:	fa 81       	ldd	r31, Y+2	; 0x02
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
}
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <ClearStack>:
void ClearStack(NUMS *ps)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	00 d0       	rcall	.+0      	; 0x3254 <ClearStack+0x6>
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	9a 83       	std	Y+2, r25	; 0x02
    325a:	89 83       	std	Y+1, r24	; 0x01

    ps->top=0;
    325c:	e9 81       	ldd	r30, Y+1	; 0x01
    325e:	fa 81       	ldd	r31, Y+2	; 0x02
    3260:	11 82       	std	Z+1, r1	; 0x01
    3262:	10 82       	st	Z, r1
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <ClearStack_op>:
void ClearStack_op(operations* op){
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	00 d0       	rcall	.+0      	; 0x3274 <ClearStack_op+0x6>
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
	op->top=0;
    327c:	e9 81       	ldd	r30, Y+1	; 0x01
    327e:	fa 81       	ldd	r31, Y+2	; 0x02
    3280:	11 82       	std	Z+1, r1	; 0x01
    3282:	10 82       	st	Z, r1
}
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	08 95       	ret

0000328e <TraverseStack>:
void TraverseStack(NUMS *ps, void (*pf)(stackentry))
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	00 d0       	rcall	.+0      	; 0x3294 <TraverseStack+0x6>
    3294:	00 d0       	rcall	.+0      	; 0x3296 <TraverseStack+0x8>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <TraverseStack+0xa>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	9c 83       	std	Y+4, r25	; 0x04
    329e:	8b 83       	std	Y+3, r24	; 0x03
    32a0:	7e 83       	std	Y+6, r23	; 0x06
    32a2:	6d 83       	std	Y+5, r22	; 0x05
    for(int i=ps->top; i>0; i--)
    32a4:	eb 81       	ldd	r30, Y+3	; 0x03
    32a6:	fc 81       	ldd	r31, Y+4	; 0x04
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	1b c0       	rjmp	.+54     	; 0x32e8 <TraverseStack+0x5a>
        (*pf)(ps->entry[i-1]);
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	9a 81       	ldd	r25, Y+2	; 0x02
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	2b 81       	ldd	r18, Y+3	; 0x03
    32ba:	3c 81       	ldd	r19, Y+4	; 0x04
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	f9 01       	movw	r30, r18
    32c8:	e8 0f       	add	r30, r24
    32ca:	f9 1f       	adc	r31, r25
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	a2 81       	ldd	r26, Z+2	; 0x02
    32d2:	b3 81       	ldd	r27, Z+3	; 0x03
    32d4:	ed 81       	ldd	r30, Y+5	; 0x05
    32d6:	fe 81       	ldd	r31, Y+6	; 0x06
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	09 95       	icall
void ClearStack_op(operations* op){
	op->top=0;
}
void TraverseStack(NUMS *ps, void (*pf)(stackentry))
{
    for(int i=ps->top; i>0; i--)
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	9a 81       	ldd	r25, Y+2	; 0x02
    32ec:	18 16       	cp	r1, r24
    32ee:	19 06       	cpc	r1, r25
    32f0:	04 f3       	brlt	.-64     	; 0x32b2 <TraverseStack+0x24>
        (*pf)(ps->entry[i-1]);

}
    32f2:	26 96       	adiw	r28, 0x06	; 6
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <StackTop_op>:
char StackTop_op(operations* op ){
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	00 d0       	rcall	.+0      	; 0x330a <StackTop_op+0x6>
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	89 83       	std	Y+1, r24	; 0x01

return op->entryy[op->top-1];
    3312:	e9 81       	ldd	r30, Y+1	; 0x01
    3314:	fa 81       	ldd	r31, Y+2	; 0x02
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	9c 01       	movw	r18, r24
    331c:	21 50       	subi	r18, 0x01	; 1
    331e:	30 40       	sbci	r19, 0x00	; 0
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	9a 81       	ldd	r25, Y+2	; 0x02
    3324:	82 0f       	add	r24, r18
    3326:	93 1f       	adc	r25, r19
    3328:	fc 01       	movw	r30, r24
    332a:	32 96       	adiw	r30, 0x02	; 2
    332c:	80 81       	ld	r24, Z
}
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <IsDigit>:



int IsDigit(char c){
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	00 d0       	rcall	.+0      	; 0x333e <IsDigit+0x6>
    333e:	0f 92       	push	r0
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	89 83       	std	Y+1, r24	; 0x01
   return(c>='0' && c<='9');
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	80 33       	cpi	r24, 0x30	; 48
    334a:	40 f0       	brcs	.+16     	; 0x335c <IsDigit+0x24>
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	8a 33       	cpi	r24, 0x3A	; 58
    3350:	28 f4       	brcc	.+10     	; 0x335c <IsDigit+0x24>
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	9b 83       	std	Y+3, r25	; 0x03
    3358:	8a 83       	std	Y+2, r24	; 0x02
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <IsDigit+0x28>
    335c:	1b 82       	std	Y+3, r1	; 0x03
    335e:	1a 82       	std	Y+2, r1	; 0x02
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <IsOp>:
int IsOp(char c){
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	00 d0       	rcall	.+0      	; 0x3376 <IsOp+0x6>
    3376:	0f 92       	push	r0
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	89 83       	std	Y+1, r24	; 0x01
   return(c=='/' || c=='x'||c=='+'||c=='-');
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	8f 32       	cpi	r24, 0x2F	; 47
    3382:	49 f0       	breq	.+18     	; 0x3396 <IsOp+0x26>
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	88 37       	cpi	r24, 0x78	; 120
    3388:	31 f0       	breq	.+12     	; 0x3396 <IsOp+0x26>
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	8b 32       	cpi	r24, 0x2B	; 43
    338e:	19 f0       	breq	.+6      	; 0x3396 <IsOp+0x26>
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	8d 32       	cpi	r24, 0x2D	; 45
    3394:	29 f4       	brne	.+10     	; 0x33a0 <IsOp+0x30>
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	9b 83       	std	Y+3, r25	; 0x03
    339c:	8a 83       	std	Y+2, r24	; 0x02
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <IsOp+0x34>
    33a0:	1b 82       	std	Y+3, r1	; 0x03
    33a2:	1a 82       	std	Y+2, r1	; 0x02
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <__mulsi3>:
    33b4:	62 9f       	mul	r22, r18
    33b6:	d0 01       	movw	r26, r0
    33b8:	73 9f       	mul	r23, r19
    33ba:	f0 01       	movw	r30, r0
    33bc:	82 9f       	mul	r24, r18
    33be:	e0 0d       	add	r30, r0
    33c0:	f1 1d       	adc	r31, r1
    33c2:	64 9f       	mul	r22, r20
    33c4:	e0 0d       	add	r30, r0
    33c6:	f1 1d       	adc	r31, r1
    33c8:	92 9f       	mul	r25, r18
    33ca:	f0 0d       	add	r31, r0
    33cc:	83 9f       	mul	r24, r19
    33ce:	f0 0d       	add	r31, r0
    33d0:	74 9f       	mul	r23, r20
    33d2:	f0 0d       	add	r31, r0
    33d4:	65 9f       	mul	r22, r21
    33d6:	f0 0d       	add	r31, r0
    33d8:	99 27       	eor	r25, r25
    33da:	72 9f       	mul	r23, r18
    33dc:	b0 0d       	add	r27, r0
    33de:	e1 1d       	adc	r30, r1
    33e0:	f9 1f       	adc	r31, r25
    33e2:	63 9f       	mul	r22, r19
    33e4:	b0 0d       	add	r27, r0
    33e6:	e1 1d       	adc	r30, r1
    33e8:	f9 1f       	adc	r31, r25
    33ea:	bd 01       	movw	r22, r26
    33ec:	cf 01       	movw	r24, r30
    33ee:	11 24       	eor	r1, r1
    33f0:	08 95       	ret

000033f2 <__divmodsi4>:
    33f2:	97 fb       	bst	r25, 7
    33f4:	09 2e       	mov	r0, r25
    33f6:	05 26       	eor	r0, r21
    33f8:	0e d0       	rcall	.+28     	; 0x3416 <__divmodsi4_neg1>
    33fa:	57 fd       	sbrc	r21, 7
    33fc:	04 d0       	rcall	.+8      	; 0x3406 <__divmodsi4_neg2>
    33fe:	14 d0       	rcall	.+40     	; 0x3428 <__udivmodsi4>
    3400:	0a d0       	rcall	.+20     	; 0x3416 <__divmodsi4_neg1>
    3402:	00 1c       	adc	r0, r0
    3404:	38 f4       	brcc	.+14     	; 0x3414 <__divmodsi4_exit>

00003406 <__divmodsi4_neg2>:
    3406:	50 95       	com	r21
    3408:	40 95       	com	r20
    340a:	30 95       	com	r19
    340c:	21 95       	neg	r18
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	4f 4f       	sbci	r20, 0xFF	; 255
    3412:	5f 4f       	sbci	r21, 0xFF	; 255

00003414 <__divmodsi4_exit>:
    3414:	08 95       	ret

00003416 <__divmodsi4_neg1>:
    3416:	f6 f7       	brtc	.-4      	; 0x3414 <__divmodsi4_exit>
    3418:	90 95       	com	r25
    341a:	80 95       	com	r24
    341c:	70 95       	com	r23
    341e:	61 95       	neg	r22
    3420:	7f 4f       	sbci	r23, 0xFF	; 255
    3422:	8f 4f       	sbci	r24, 0xFF	; 255
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	08 95       	ret

00003428 <__udivmodsi4>:
    3428:	a1 e2       	ldi	r26, 0x21	; 33
    342a:	1a 2e       	mov	r1, r26
    342c:	aa 1b       	sub	r26, r26
    342e:	bb 1b       	sub	r27, r27
    3430:	fd 01       	movw	r30, r26
    3432:	0d c0       	rjmp	.+26     	; 0x344e <__udivmodsi4_ep>

00003434 <__udivmodsi4_loop>:
    3434:	aa 1f       	adc	r26, r26
    3436:	bb 1f       	adc	r27, r27
    3438:	ee 1f       	adc	r30, r30
    343a:	ff 1f       	adc	r31, r31
    343c:	a2 17       	cp	r26, r18
    343e:	b3 07       	cpc	r27, r19
    3440:	e4 07       	cpc	r30, r20
    3442:	f5 07       	cpc	r31, r21
    3444:	20 f0       	brcs	.+8      	; 0x344e <__udivmodsi4_ep>
    3446:	a2 1b       	sub	r26, r18
    3448:	b3 0b       	sbc	r27, r19
    344a:	e4 0b       	sbc	r30, r20
    344c:	f5 0b       	sbc	r31, r21

0000344e <__udivmodsi4_ep>:
    344e:	66 1f       	adc	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	1a 94       	dec	r1
    3458:	69 f7       	brne	.-38     	; 0x3434 <__udivmodsi4_loop>
    345a:	60 95       	com	r22
    345c:	70 95       	com	r23
    345e:	80 95       	com	r24
    3460:	90 95       	com	r25
    3462:	9b 01       	movw	r18, r22
    3464:	ac 01       	movw	r20, r24
    3466:	bd 01       	movw	r22, r26
    3468:	cf 01       	movw	r24, r30
    346a:	08 95       	ret

0000346c <__prologue_saves__>:
    346c:	2f 92       	push	r2
    346e:	3f 92       	push	r3
    3470:	4f 92       	push	r4
    3472:	5f 92       	push	r5
    3474:	6f 92       	push	r6
    3476:	7f 92       	push	r7
    3478:	8f 92       	push	r8
    347a:	9f 92       	push	r9
    347c:	af 92       	push	r10
    347e:	bf 92       	push	r11
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	ca 1b       	sub	r28, r26
    3496:	db 0b       	sbc	r29, r27
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	09 94       	ijmp

000034a4 <__epilogue_restores__>:
    34a4:	2a 88       	ldd	r2, Y+18	; 0x12
    34a6:	39 88       	ldd	r3, Y+17	; 0x11
    34a8:	48 88       	ldd	r4, Y+16	; 0x10
    34aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    34ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    34b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    34b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    34b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    34b6:	b9 84       	ldd	r11, Y+9	; 0x09
    34b8:	c8 84       	ldd	r12, Y+8	; 0x08
    34ba:	df 80       	ldd	r13, Y+7	; 0x07
    34bc:	ee 80       	ldd	r14, Y+6	; 0x06
    34be:	fd 80       	ldd	r15, Y+5	; 0x05
    34c0:	0c 81       	ldd	r16, Y+4	; 0x04
    34c2:	1b 81       	ldd	r17, Y+3	; 0x03
    34c4:	aa 81       	ldd	r26, Y+2	; 0x02
    34c6:	b9 81       	ldd	r27, Y+1	; 0x01
    34c8:	ce 0f       	add	r28, r30
    34ca:	d1 1d       	adc	r29, r1
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	ed 01       	movw	r28, r26
    34d8:	08 95       	ret

000034da <_exit>:
    34da:	f8 94       	cli

000034dc <__stop_program>:
    34dc:	ff cf       	rjmp	.-2      	; 0x34dc <__stop_program>
