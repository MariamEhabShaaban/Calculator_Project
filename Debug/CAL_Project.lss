
CAL_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000037c8  0000385c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000059e  00800086  00800086  00003882  2**0
                  ALLOC
  3 .stab         00003360  00000000  00000000  00003884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140c  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000add4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c73f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 19 	call	0x32ba	; 0x32ba <main>
      8a:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ERROR>:
NUMS numbers, rev_numbers, remender;
operations op, rev_op;
s32 i = 0;
s32 fraction = 0, res_mul1000 = 0;
s32 is_ok = OK;
void ERROR() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ERROR+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <ERROR+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	LCD_enuSendCommand(0xc0); //////GO TO SECOND LINE IN LCD
     b52:	80 ec       	ldi	r24, 0xC0	; 192
     b54:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_enuSendCommand>
	for (s32 it = 0; Error[it] != '\0'; it++) {
     b58:	19 82       	std	Y+1, r1	; 0x01
     b5a:	1a 82       	std	Y+2, r1	; 0x02
     b5c:	1b 82       	std	Y+3, r1	; 0x03
     b5e:	1c 82       	std	Y+4, r1	; 0x04
     b60:	15 c0       	rjmp	.+42     	; 0xb8c <ERROR+0x46>
		LCD_enuDisplayChar(Error[it]);
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	ab 81       	ldd	r26, Y+3	; 0x03
     b68:	bc 81       	ldd	r27, Y+4	; 0x04
     b6a:	fc 01       	movw	r30, r24
     b6c:	e8 59       	subi	r30, 0x98	; 152
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	80 81       	ld	r24, Z
     b72:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_enuDisplayChar>
s32 i = 0;
s32 fraction = 0, res_mul1000 = 0;
s32 is_ok = OK;
void ERROR() {
	LCD_enuSendCommand(0xc0); //////GO TO SECOND LINE IN LCD
	for (s32 it = 0; Error[it] != '\0'; it++) {
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	ab 81       	ldd	r26, Y+3	; 0x03
     b7c:	bc 81       	ldd	r27, Y+4	; 0x04
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	a1 1d       	adc	r26, r1
     b82:	b1 1d       	adc	r27, r1
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	ab 83       	std	Y+3, r26	; 0x03
     b8a:	bc 83       	std	Y+4, r27	; 0x04
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	ab 81       	ldd	r26, Y+3	; 0x03
     b92:	bc 81       	ldd	r27, Y+4	; 0x04
     b94:	fc 01       	movw	r30, r24
     b96:	e8 59       	subi	r30, 0x98	; 152
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	80 81       	ld	r24, Z
     b9c:	88 23       	and	r24, r24
     b9e:	09 f7       	brne	.-62     	; 0xb62 <ERROR+0x1c>
		LCD_enuDisplayChar(Error[it]);

	}
}
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <check_the_last_operation>:



s32 check_the_last_operation(u8 P, s32 *resu) {
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	2f 97       	sbiw	r28, 0x0f	; 15
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	89 87       	std	Y+9, r24	; 0x09
     bc4:	7b 87       	std	Y+11, r23	; 0x0b
     bc6:	6a 87       	std	Y+10, r22	; 0x0a

	if (P == 'x' || P == '/') {
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	88 37       	cpi	r24, 0x78	; 120
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <check_the_last_operation+0x28>
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	8f 32       	cpi	r24, 0x2F	; 47
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <check_the_last_operation+0x28>
     bd4:	a8 c0       	rjmp	.+336    	; 0xd26 <check_the_last_operation+0x178>
		s32 num1, num2;
		Pop(&num2, &numbers);
     bd6:	ce 01       	movw	r24, r28
     bd8:	05 96       	adiw	r24, 0x05	; 5
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	33 e0       	ldi	r19, 0x03	; 3
     bde:	b9 01       	movw	r22, r18
     be0:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		Pop(&num1, &numbers);
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	33 e0       	ldi	r19, 0x03	; 3
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	b9 01       	movw	r22, r18
     bee:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		if (P == 'x')
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	88 37       	cpi	r24, 0x78	; 120
     bf6:	a1 f4       	brne	.+40     	; 0xc20 <check_the_last_operation+0x72>
			*resu = num1 * num2;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	ab 81       	ldd	r26, Y+3	; 0x03
     bfe:	bc 81       	ldd	r27, Y+4	; 0x04
     c00:	2d 81       	ldd	r18, Y+5	; 0x05
     c02:	3e 81       	ldd	r19, Y+6	; 0x06
     c04:	4f 81       	ldd	r20, Y+7	; 0x07
     c06:	58 85       	ldd	r21, Y+8	; 0x08
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	ea 85       	ldd	r30, Y+10	; 0x0a
     c16:	fb 85       	ldd	r31, Y+11	; 0x0b
     c18:	80 83       	st	Z, r24
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	a2 83       	std	Z+2, r26	; 0x02
     c1e:	b3 83       	std	Z+3, r27	; 0x03
		if (P == '/') {
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	8f 32       	cpi	r24, 0x2F	; 47
     c24:	09 f0       	breq	.+2      	; 0xc28 <check_the_last_operation+0x7a>
     c26:	6b c0       	rjmp	.+214    	; 0xcfe <check_the_last_operation+0x150>
			*resu = num1 / num2;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	ab 81       	ldd	r26, Y+3	; 0x03
     c2e:	bc 81       	ldd	r27, Y+4	; 0x04
     c30:	2d 81       	ldd	r18, Y+5	; 0x05
     c32:	3e 81       	ldd	r19, Y+6	; 0x06
     c34:	4f 81       	ldd	r20, Y+7	; 0x07
     c36:	58 85       	ldd	r21, Y+8	; 0x08
     c38:	bc 01       	movw	r22, r24
     c3a:	cd 01       	movw	r24, r26
     c3c:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
     c40:	da 01       	movw	r26, r20
     c42:	c9 01       	movw	r24, r18
     c44:	ea 85       	ldd	r30, Y+10	; 0x0a
     c46:	fb 85       	ldd	r31, Y+11	; 0x0b
     c48:	80 83       	st	Z, r24
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	a2 83       	std	Z+2, r26	; 0x02
     c4e:	b3 83       	std	Z+3, r27	; 0x03
			res_mul1000 = (num1 * 1000) / num2;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	ab 81       	ldd	r26, Y+3	; 0x03
     c56:	bc 81       	ldd	r27, Y+4	; 0x04
     c58:	28 ee       	ldi	r18, 0xE8	; 232
     c5a:	33 e0       	ldi	r19, 0x03	; 3
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	2d 81       	ldd	r18, Y+5	; 0x05
     c6e:	3e 81       	ldd	r19, Y+6	; 0x06
     c70:	4f 81       	ldd	r20, Y+7	; 0x07
     c72:	58 85       	ldd	r21, Y+8	; 0x08
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
     c7c:	da 01       	movw	r26, r20
     c7e:	c9 01       	movw	r24, r18
     c80:	80 93 9e 00 	sts	0x009E, r24
     c84:	90 93 9f 00 	sts	0x009F, r25
     c88:	a0 93 a0 00 	sts	0x00A0, r26
     c8c:	b0 93 a1 00 	sts	0x00A1, r27
			fraction = res_mul1000 - (*resu * 1000);
     c90:	ea 85       	ldd	r30, Y+10	; 0x0a
     c92:	fb 85       	ldd	r31, Y+11	; 0x0b
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	a2 81       	ldd	r26, Z+2	; 0x02
     c9a:	b3 81       	ldd	r27, Z+3	; 0x03
     c9c:	28 e1       	ldi	r18, 0x18	; 24
     c9e:	3c ef       	ldi	r19, 0xFC	; 252
     ca0:	4f ef       	ldi	r20, 0xFF	; 255
     ca2:	5f ef       	ldi	r21, 0xFF	; 255
     ca4:	bc 01       	movw	r22, r24
     ca6:	cd 01       	movw	r24, r26
     ca8:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
     cb0:	80 91 9e 00 	lds	r24, 0x009E
     cb4:	90 91 9f 00 	lds	r25, 0x009F
     cb8:	a0 91 a0 00 	lds	r26, 0x00A0
     cbc:	b0 91 a1 00 	lds	r27, 0x00A1
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	a4 1f       	adc	r26, r20
     cc6:	b5 1f       	adc	r27, r21
     cc8:	80 93 9a 00 	sts	0x009A, r24
     ccc:	90 93 9b 00 	sts	0x009B, r25
     cd0:	a0 93 9c 00 	sts	0x009C, r26
     cd4:	b0 93 9d 00 	sts	0x009D, r27
			if (num2 == 0) {
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	af 81       	ldd	r26, Y+7	; 0x07
     cde:	b8 85       	ldd	r27, Y+8	; 0x08
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	a1 05       	cpc	r26, r1
     ce4:	b1 05       	cpc	r27, r1
     ce6:	59 f4       	brne	.+22     	; 0xcfe <check_the_last_operation+0x150>
				ERROR();
     ce8:	0e 94 a3 05 	call	0xb46	; 0xb46 <ERROR>
				return ERorr;
     cec:	81 e4       	ldi	r24, 0x41	; 65
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	8c 87       	std	Y+12, r24	; 0x0c
     cf6:	9d 87       	std	Y+13, r25	; 0x0d
     cf8:	ae 87       	std	Y+14, r26	; 0x0e
     cfa:	bf 87       	std	Y+15, r27	; 0x0f
     cfc:	1c c0       	rjmp	.+56     	; 0xd36 <check_the_last_operation+0x188>
			}

		}
		Push(*resu, &numbers);
     cfe:	ea 85       	ldd	r30, Y+10	; 0x0a
     d00:	fb 85       	ldd	r31, Y+11	; 0x0b
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	a2 81       	ldd	r26, Z+2	; 0x02
     d08:	b3 81       	ldd	r27, Z+3	; 0x03
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	a9 01       	movw	r20, r18
     d14:	0e 94 86 19 	call	0x330c	; 0x330c <Push>
		Pop_op(&P, &op);
     d18:	ce 01       	movw	r24, r28
     d1a:	09 96       	adiw	r24, 0x09	; 9
     d1c:	28 e0       	ldi	r18, 0x08	; 8
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Pop_op>
	}
	return OK;
     d26:	8e e4       	ldi	r24, 0x4E	; 78
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	8c 87       	std	Y+12, r24	; 0x0c
     d30:	9d 87       	std	Y+13, r25	; 0x0d
     d32:	ae 87       	std	Y+14, r26	; 0x0e
     d34:	bf 87       	std	Y+15, r27	; 0x0f
     d36:	8c 85       	ldd	r24, Y+12	; 0x0c
     d38:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3a:	ae 85       	ldd	r26, Y+14	; 0x0e
     d3c:	bf 85       	ldd	r27, Y+15	; 0x0f
}
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	2f 96       	adiw	r28, 0x0f	; 15
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <check_the_MulDiv_operation>:



s32 check_the_MulDiv_operation(u8 oper) {
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	62 97       	sbiw	r28, 0x12	; 18
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	8e 87       	std	Y+14, r24	; 0x0e

	s32 res, num2, num1;
	u8 pp;

	if (oper == 'x' || oper == '/') {
     d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6c:	88 37       	cpi	r24, 0x78	; 120
     d6e:	21 f0       	breq	.+8      	; 0xd78 <check_the_MulDiv_operation+0x24>
     d70:	8e 85       	ldd	r24, Y+14	; 0x0e
     d72:	8f 32       	cpi	r24, 0x2F	; 47
     d74:	09 f0       	breq	.+2      	; 0xd78 <check_the_MulDiv_operation+0x24>
     d76:	a8 c0       	rjmp	.+336    	; 0xec8 <check_the_MulDiv_operation+0x174>
		Pop(&num2, &numbers);
     d78:	ce 01       	movw	r24, r28
     d7a:	05 96       	adiw	r24, 0x05	; 5
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	33 e0       	ldi	r19, 0x03	; 3
     d80:	b9 01       	movw	r22, r18
     d82:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		Pop(&num1, &numbers);
     d86:	ce 01       	movw	r24, r28
     d88:	09 96       	adiw	r24, 0x09	; 9
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	33 e0       	ldi	r19, 0x03	; 3
     d8e:	b9 01       	movw	r22, r18
     d90:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		if (oper == 'x') {
     d94:	8e 85       	ldd	r24, Y+14	; 0x0e
     d96:	88 37       	cpi	r24, 0x78	; 120
     d98:	d1 f4       	brne	.+52     	; 0xdce <check_the_MulDiv_operation+0x7a>
			Pop_op(&pp, &op);
     d9a:	ce 01       	movw	r24, r28
     d9c:	0d 96       	adiw	r24, 0x0d	; 13
     d9e:	28 e0       	ldi	r18, 0x08	; 8
     da0:	31 e0       	ldi	r19, 0x01	; 1
     da2:	b9 01       	movw	r22, r18
     da4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Pop_op>
			res = num1 * num2;
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dac:	ab 85       	ldd	r26, Y+11	; 0x0b
     dae:	bc 85       	ldd	r27, Y+12	; 0x0c
     db0:	2d 81       	ldd	r18, Y+5	; 0x05
     db2:	3e 81       	ldd	r19, Y+6	; 0x06
     db4:	4f 81       	ldd	r20, Y+7	; 0x07
     db6:	58 85       	ldd	r21, Y+8	; 0x08
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	ab 83       	std	Y+3, r26	; 0x03
     dca:	bc 83       	std	Y+4, r27	; 0x04
     dcc:	72 c0       	rjmp	.+228    	; 0xeb2 <check_the_MulDiv_operation+0x15e>
		} else if (oper == '/') {
     dce:	8e 85       	ldd	r24, Y+14	; 0x0e
     dd0:	8f 32       	cpi	r24, 0x2F	; 47
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <check_the_MulDiv_operation+0x82>
     dd4:	6e c0       	rjmp	.+220    	; 0xeb2 <check_the_MulDiv_operation+0x15e>

			Pop_op(&pp, &op);
     dd6:	ce 01       	movw	r24, r28
     dd8:	0d 96       	adiw	r24, 0x0d	; 13
     dda:	28 e0       	ldi	r18, 0x08	; 8
     ddc:	31 e0       	ldi	r19, 0x01	; 1
     dde:	b9 01       	movw	r22, r18
     de0:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Pop_op>
			if (num2 == 0) {
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	af 81       	ldd	r26, Y+7	; 0x07
     dea:	b8 85       	ldd	r27, Y+8	; 0x08
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	a1 05       	cpc	r26, r1
     df0:	b1 05       	cpc	r27, r1
     df2:	59 f4       	brne	.+22     	; 0xe0a <check_the_MulDiv_operation+0xb6>
				ERROR();
     df4:	0e 94 a3 05 	call	0xb46	; 0xb46 <ERROR>
				return ERorr;
     df8:	81 e4       	ldi	r24, 0x41	; 65
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	8f 87       	std	Y+15, r24	; 0x0f
     e02:	98 8b       	std	Y+16, r25	; 0x10
     e04:	a9 8b       	std	Y+17, r26	; 0x11
     e06:	ba 8b       	std	Y+18, r27	; 0x12
     e08:	67 c0       	rjmp	.+206    	; 0xed8 <check_the_MulDiv_operation+0x184>
			}
			res_mul1000 = (num1 * 1000) / num2;
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	ab 85       	ldd	r26, Y+11	; 0x0b
     e10:	bc 85       	ldd	r27, Y+12	; 0x0c
     e12:	28 ee       	ldi	r18, 0xE8	; 232
     e14:	33 e0       	ldi	r19, 0x03	; 3
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	2d 81       	ldd	r18, Y+5	; 0x05
     e28:	3e 81       	ldd	r19, Y+6	; 0x06
     e2a:	4f 81       	ldd	r20, Y+7	; 0x07
     e2c:	58 85       	ldd	r21, Y+8	; 0x08
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
     e36:	da 01       	movw	r26, r20
     e38:	c9 01       	movw	r24, r18
     e3a:	80 93 9e 00 	sts	0x009E, r24
     e3e:	90 93 9f 00 	sts	0x009F, r25
     e42:	a0 93 a0 00 	sts	0x00A0, r26
     e46:	b0 93 a1 00 	sts	0x00A1, r27
			res = num1 / num2;
     e4a:	89 85       	ldd	r24, Y+9	; 0x09
     e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4e:	ab 85       	ldd	r26, Y+11	; 0x0b
     e50:	bc 85       	ldd	r27, Y+12	; 0x0c
     e52:	2d 81       	ldd	r18, Y+5	; 0x05
     e54:	3e 81       	ldd	r19, Y+6	; 0x06
     e56:	4f 81       	ldd	r20, Y+7	; 0x07
     e58:	58 85       	ldd	r21, Y+8	; 0x08
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
     e62:	da 01       	movw	r26, r20
     e64:	c9 01       	movw	r24, r18
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	ab 83       	std	Y+3, r26	; 0x03
     e6c:	bc 83       	std	Y+4, r27	; 0x04
			fraction = res_mul1000 - (res * 1000);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	ab 81       	ldd	r26, Y+3	; 0x03
     e74:	bc 81       	ldd	r27, Y+4	; 0x04
     e76:	28 e1       	ldi	r18, 0x18	; 24
     e78:	3c ef       	ldi	r19, 0xFC	; 252
     e7a:	4f ef       	ldi	r20, 0xFF	; 255
     e7c:	5f ef       	ldi	r21, 0xFF	; 255
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	80 91 9e 00 	lds	r24, 0x009E
     e8e:	90 91 9f 00 	lds	r25, 0x009F
     e92:	a0 91 a0 00 	lds	r26, 0x00A0
     e96:	b0 91 a1 00 	lds	r27, 0x00A1
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	a4 1f       	adc	r26, r20
     ea0:	b5 1f       	adc	r27, r21
     ea2:	80 93 9a 00 	sts	0x009A, r24
     ea6:	90 93 9b 00 	sts	0x009B, r25
     eaa:	a0 93 9c 00 	sts	0x009C, r26
     eae:	b0 93 9d 00 	sts	0x009D, r27
		}
		Push(res, &numbers);
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	ab 81       	ldd	r26, Y+3	; 0x03
     eb8:	bc 81       	ldd	r27, Y+4	; 0x04
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	33 e0       	ldi	r19, 0x03	; 3
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	a9 01       	movw	r20, r18
     ec4:	0e 94 86 19 	call	0x330c	; 0x330c <Push>
	}
	return OK;
     ec8:	8e e4       	ldi	r24, 0x4E	; 78
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	8f 87       	std	Y+15, r24	; 0x0f
     ed2:	98 8b       	std	Y+16, r25	; 0x10
     ed4:	a9 8b       	std	Y+17, r26	; 0x11
     ed6:	ba 8b       	std	Y+18, r27	; 0x12
     ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eda:	98 89       	ldd	r25, Y+16	; 0x10
     edc:	a9 89       	ldd	r26, Y+17	; 0x11
     ede:	ba 89       	ldd	r27, Y+18	; 0x12
}
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	62 96       	adiw	r28, 0x12	; 18
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <REVERSE_INPUT>:




void REVERSE_INPUT() {
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <REVERSE_INPUT+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <REVERSE_INPUT+0x8>
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	12 c0       	rjmp	.+36     	; 0xf2a <REVERSE_INPUT+0x34>

	while (!StackEmpty(&numbers)) {
		s32 s1_top;
		Pop(&s1_top, &numbers);
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	33 e0       	ldi	r19, 0x03	; 3
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	b9 01       	movw	r22, r18
     f10:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		Push(s1_top, &rev_numbers);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	ab 81       	ldd	r26, Y+3	; 0x03
     f1a:	bc 81       	ldd	r27, Y+4	; 0x04
     f1c:	2e e6       	ldi	r18, 0x6E	; 110
     f1e:	31 e0       	ldi	r19, 0x01	; 1
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	a9 01       	movw	r20, r18
     f26:	0e 94 86 19 	call	0x330c	; 0x330c <Push>



void REVERSE_INPUT() {

	while (!StackEmpty(&numbers)) {
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 6f 1a 	call	0x34de	; 0x34de <StackEmpty>
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	41 f3       	breq	.-48     	; 0xf06 <REVERSE_INPUT+0x10>
     f36:	0d c0       	rjmp	.+26     	; 0xf52 <REVERSE_INPUT+0x5c>

	}

	while (!StackEmpty_op(&op)) {
		u8 p1_top;
		Pop_op(&p1_top, &op);
     f38:	ce 01       	movw	r24, r28
     f3a:	05 96       	adiw	r24, 0x05	; 5
     f3c:	28 e0       	ldi	r18, 0x08	; 8
     f3e:	31 e0       	ldi	r19, 0x01	; 1
     f40:	b9 01       	movw	r22, r18
     f42:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Pop_op>
		Push_op(p1_top, &rev_op);
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	22 ea       	ldi	r18, 0xA2	; 162
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	b9 01       	movw	r22, r18
     f4e:	0e 94 b9 19 	call	0x3372	; 0x3372 <Push_op>
		Pop(&s1_top, &numbers);
		Push(s1_top, &rev_numbers);

	}

	while (!StackEmpty_op(&op)) {
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <StackEmpty_op>
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	69 f3       	breq	.-38     	; 0xf38 <REVERSE_INPUT+0x42>
		u8 p1_top;
		Pop_op(&p1_top, &op);
		Push_op(p1_top, &rev_op);

	}
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <CAL_INIT>:

void CAL_INIT() {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62

	Keypad_enuInit();
     f76:	0e 94 ed 12 	call	0x25da	; 0x25da <Keypad_enuInit>
	LCD_enuInit();
     f7a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <LCD_enuInit>
	CreateStack(&numbers);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	93 e0       	ldi	r25, 0x03	; 3
     f82:	0e 94 66 19 	call	0x32cc	; 0x32cc <CreateStack>
	CreateStack(&rev_numbers);
     f86:	8e e6       	ldi	r24, 0x6E	; 110
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 66 19 	call	0x32cc	; 0x32cc <CreateStack>
	CreateStack_op(&op);
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 76 19 	call	0x32ec	; 0x32ec <CreateStack_op>
	CreateStack_op(&rev_op);
     f96:	82 ea       	ldi	r24, 0xA2	; 162
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 76 19 	call	0x32ec	; 0x32ec <CreateStack_op>

}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <CAL_INPUT>:



void CAL_INPUT() {
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62

	u8 press;

	do {

		Keypad_enuGetPressedKey(&press);
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <Keypad_enuGetPressedKey>

	} while (press == 0xff);
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	8f 3f       	cpi	r24, 0xFF	; 255
     fba:	c9 f3       	breq	.-14     	; 0xfae <CAL_INPUT+0xa>
	if (press == '=') {
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8d 33       	cpi	r24, 0x3D	; 61
     fc0:	f9 f4       	brne	.+62     	; 0x1000 <CAL_INPUT+0x5c>
		LCD_enuDisplayChar(press);
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_enuDisplayChar>
		INPUT[i++] = '\0';
     fc8:	80 91 96 00 	lds	r24, 0x0096
     fcc:	90 91 97 00 	lds	r25, 0x0097
     fd0:	a0 91 98 00 	lds	r26, 0x0098
     fd4:	b0 91 99 00 	lds	r27, 0x0099
     fd8:	fc 01       	movw	r30, r24
     fda:	ea 57       	subi	r30, 0x7A	; 122
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	10 82       	st	Z, r1
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	a1 1d       	adc	r26, r1
     fe4:	b1 1d       	adc	r27, r1
     fe6:	80 93 96 00 	sts	0x0096, r24
     fea:	90 93 97 00 	sts	0x0097, r25
     fee:	a0 93 98 00 	sts	0x0098, r26
     ff2:	b0 93 99 00 	sts	0x0099, r27
		CAL_OPERATION();
     ff6:	0e 94 2e 08 	call	0x105c	; 0x105c <CAL_OPERATION>
		CAL_OUTPUT();
     ffa:	0e 94 00 09 	call	0x1200	; 0x1200 <CAL_OUTPUT>
     ffe:	2a c0       	rjmp	.+84     	; 0x1054 <CAL_INPUT+0xb0>
	} else if (press == 'c') {
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	83 36       	cpi	r24, 0x63	; 99
    1004:	19 f4       	brne	.+6      	; 0x100c <CAL_INPUT+0x68>
		Clear_CAL();
    1006:	0e 94 c2 09 	call	0x1384	; 0x1384 <Clear_CAL>
    100a:	24 c0       	rjmp	.+72     	; 0x1054 <CAL_INPUT+0xb0>

	}

	else if (press != 'c' && press != '=' && press != 0xff) {
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	83 36       	cpi	r24, 0x63	; 99
    1010:	09 f1       	breq	.+66     	; 0x1054 <CAL_INPUT+0xb0>
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	8d 33       	cpi	r24, 0x3D	; 61
    1016:	f1 f0       	breq	.+60     	; 0x1054 <CAL_INPUT+0xb0>
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	8f 3f       	cpi	r24, 0xFF	; 255
    101c:	d9 f0       	breq	.+54     	; 0x1054 <CAL_INPUT+0xb0>
		LCD_enuDisplayChar(press);
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_enuDisplayChar>
		INPUT[i++] = press;
    1024:	80 91 96 00 	lds	r24, 0x0096
    1028:	90 91 97 00 	lds	r25, 0x0097
    102c:	a0 91 98 00 	lds	r26, 0x0098
    1030:	b0 91 99 00 	lds	r27, 0x0099
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	fc 01       	movw	r30, r24
    1038:	ea 57       	subi	r30, 0x7A	; 122
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	20 83       	st	Z, r18
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	a1 1d       	adc	r26, r1
    1042:	b1 1d       	adc	r27, r1
    1044:	80 93 96 00 	sts	0x0096, r24
    1048:	90 93 97 00 	sts	0x0097, r25
    104c:	a0 93 98 00 	sts	0x0098, r26
    1050:	b0 93 99 00 	sts	0x0099, r27
	}
}
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <CAL_OPERATION>:




void CAL_OPERATION() {
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	2c 97       	sbiw	r28, 0x0c	; 12
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
	s32 num = 0;
    1070:	1d 82       	std	Y+5, r1	; 0x05
    1072:	1e 82       	std	Y+6, r1	; 0x06
    1074:	1f 82       	std	Y+7, r1	; 0x07
    1076:	18 86       	std	Y+8, r1	; 0x08

	for (int j = 0; INPUT[j] != '\0'; j++) {
    1078:	1b 82       	std	Y+3, r1	; 0x03
    107a:	1a 82       	std	Y+2, r1	; 0x02
    107c:	7f c0       	rjmp	.+254    	; 0x117c <CAL_OPERATION+0x120>
		if (IsDigit(INPUT[j])) {
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	fc 01       	movw	r30, r24
    1084:	ea 57       	subi	r30, 0x7A	; 122
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 81       	ld	r24, Z
    108a:	0e 94 11 1b 	call	0x3622	; 0x3622 <IsDigit>
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	21 f1       	breq	.+72     	; 0x10da <CAL_OPERATION+0x7e>
			num = num * 10 + (INPUT[j] - '0');
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	af 81       	ldd	r26, Y+7	; 0x07
    1098:	b8 85       	ldd	r27, Y+8	; 0x08
    109a:	2a e0       	ldi	r18, 0x0A	; 10
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	fc 01       	movw	r30, r24
    10b4:	ea 57       	subi	r30, 0x7A	; 122
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	c0 97       	sbiw	r24, 0x30	; 48
    10c0:	aa 27       	eor	r26, r26
    10c2:	97 fd       	sbrc	r25, 7
    10c4:	a0 95       	com	r26
    10c6:	ba 2f       	mov	r27, r26
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	a4 1f       	adc	r26, r20
    10ce:	b5 1f       	adc	r27, r21
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	af 83       	std	Y+7, r26	; 0x07
    10d6:	b8 87       	std	Y+8, r27	; 0x08
    10d8:	4c c0       	rjmp	.+152    	; 0x1172 <CAL_OPERATION+0x116>
		} else if (IsOp(INPUT[j])) {
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9b 81       	ldd	r25, Y+3	; 0x03
    10de:	fc 01       	movw	r30, r24
    10e0:	ea 57       	subi	r30, 0x7A	; 122
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	0e 94 2d 1b 	call	0x365a	; 0x365a <IsOp>
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <CAL_OPERATION+0x94>
    10ee:	41 c0       	rjmp	.+130    	; 0x1172 <CAL_OPERATION+0x116>
			Push(num, &numbers);
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	af 81       	ldd	r26, Y+7	; 0x07
    10f6:	b8 85       	ldd	r27, Y+8	; 0x08
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	33 e0       	ldi	r19, 0x03	; 3
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	a9 01       	movw	r20, r18
    1102:	0e 94 86 19 	call	0x330c	; 0x330c <Push>
			if (StackSize(&numbers) >= 2) {
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <StackSize>
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	91 05       	cpc	r25, r1
    1112:	04 f1       	brlt	.+64     	; 0x1154 <CAL_OPERATION+0xf8>

				u8 oper = StackTop_op(&op);
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <StackTop_op>
    111c:	89 83       	std	Y+1, r24	; 0x01
				is_ok = check_the_MulDiv_operation(oper);
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	0e 94 aa 06 	call	0xd54	; 0xd54 <check_the_MulDiv_operation>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	80 93 72 00 	sts	0x0072, r24
    112c:	90 93 73 00 	sts	0x0073, r25
    1130:	a0 93 74 00 	sts	0x0074, r26
    1134:	b0 93 75 00 	sts	0x0075, r27
				if (is_ok == ERorr)
    1138:	80 91 72 00 	lds	r24, 0x0072
    113c:	90 91 73 00 	lds	r25, 0x0073
    1140:	a0 91 74 00 	lds	r26, 0x0074
    1144:	b0 91 75 00 	lds	r27, 0x0075
    1148:	81 34       	cpi	r24, 0x41	; 65
    114a:	91 05       	cpc	r25, r1
    114c:	a1 05       	cpc	r26, r1
    114e:	b1 05       	cpc	r27, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <CAL_OPERATION+0xf8>
    1152:	4d c0       	rjmp	.+154    	; 0x11ee <CAL_OPERATION+0x192>
					return;

			}

			Push_op(INPUT[j], &op);
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	9b 81       	ldd	r25, Y+3	; 0x03
    1158:	fc 01       	movw	r30, r24
    115a:	ea 57       	subi	r30, 0x7A	; 122
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	28 e0       	ldi	r18, 0x08	; 8
    1162:	31 e0       	ldi	r19, 0x01	; 1
    1164:	b9 01       	movw	r22, r18
    1166:	0e 94 b9 19 	call	0x3372	; 0x3372 <Push_op>
			num = 0;
    116a:	1d 82       	std	Y+5, r1	; 0x05
    116c:	1e 82       	std	Y+6, r1	; 0x06
    116e:	1f 82       	std	Y+7, r1	; 0x07
    1170:	18 86       	std	Y+8, r1	; 0x08


void CAL_OPERATION() {
	s32 num = 0;

	for (int j = 0; INPUT[j] != '\0'; j++) {
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	9b 83       	std	Y+3, r25	; 0x03
    117a:	8a 83       	std	Y+2, r24	; 0x02
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	fc 01       	movw	r30, r24
    1182:	ea 57       	subi	r30, 0x7A	; 122
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	09 f0       	breq	.+2      	; 0x118e <CAL_OPERATION+0x132>
    118c:	78 cf       	rjmp	.-272    	; 0x107e <CAL_OPERATION+0x22>

			Push_op(INPUT[j], &op);
			num = 0;
		}
	}
	Push(num, &numbers);
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	af 81       	ldd	r26, Y+7	; 0x07
    1194:	b8 85       	ldd	r27, Y+8	; 0x08
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	33 e0       	ldi	r19, 0x03	; 3
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	a9 01       	movw	r20, r18
    11a0:	0e 94 86 19 	call	0x330c	; 0x330c <Push>
	u8 P = StackTop_op(&op);
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <StackTop_op>
    11ac:	8c 83       	std	Y+4, r24	; 0x04
	s32 res;
	is_ok = check_the_last_operation(P, &res);
    11ae:	9e 01       	movw	r18, r28
    11b0:	27 5f       	subi	r18, 0xF7	; 247
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	b9 01       	movw	r22, r18
    11b8:	0e 94 d7 05 	call	0xbae	; 0xbae <check_the_last_operation>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	80 93 72 00 	sts	0x0072, r24
    11c4:	90 93 73 00 	sts	0x0073, r25
    11c8:	a0 93 74 00 	sts	0x0074, r26
    11cc:	b0 93 75 00 	sts	0x0075, r27
	if (is_ok == ERorr)
    11d0:	80 91 72 00 	lds	r24, 0x0072
    11d4:	90 91 73 00 	lds	r25, 0x0073
    11d8:	a0 91 74 00 	lds	r26, 0x0074
    11dc:	b0 91 75 00 	lds	r27, 0x0075
    11e0:	81 34       	cpi	r24, 0x41	; 65
    11e2:	91 05       	cpc	r25, r1
    11e4:	a1 05       	cpc	r26, r1
    11e6:	b1 05       	cpc	r27, r1
    11e8:	11 f0       	breq	.+4      	; 0x11ee <CAL_OPERATION+0x192>
		return;
	/////REVERSE THE INPUT
	REVERSE_INPUT();
    11ea:	0e 94 7b 07 	call	0xef6	; 0xef6 <REVERSE_INPUT>
	//////final operation + -

}
    11ee:	2c 96       	adiw	r28, 0x0c	; 12
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <CAL_OUTPUT>:




void CAL_OUTPUT() {
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	63 97       	sbiw	r28, 0x13	; 19
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	64 c0       	rjmp	.+200    	; 0x12e6 <CAL_OUTPUT+0xe6>
	s32 result;

	while (!StackEmpty_op(&rev_op)) {

		s32 res = 0;
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	1b 82       	std	Y+3, r1	; 0x03
    1224:	1c 82       	std	Y+4, r1	; 0x04
		s32 top_num1;
		Pop(&top_num1, &rev_numbers);
    1226:	ce 01       	movw	r24, r28
    1228:	09 96       	adiw	r24, 0x09	; 9
    122a:	2e e6       	ldi	r18, 0x6E	; 110
    122c:	31 e0       	ldi	r19, 0x01	; 1
    122e:	b9 01       	movw	r22, r18
    1230:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		s32 top_num2;
		Pop(&top_num2, &rev_numbers);
    1234:	ce 01       	movw	r24, r28
    1236:	0d 96       	adiw	r24, 0x0d	; 13
    1238:	2e e6       	ldi	r18, 0x6E	; 110
    123a:	31 e0       	ldi	r19, 0x01	; 1
    123c:	b9 01       	movw	r22, r18
    123e:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>
		u8 opre;
		Pop_op(&opre, &rev_op);
    1242:	ce 01       	movw	r24, r28
    1244:	41 96       	adiw	r24, 0x11	; 17
    1246:	22 ea       	ldi	r18, 0xA2	; 162
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	b9 01       	movw	r22, r18
    124c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Pop_op>
		switch (opre) {
    1250:	89 89       	ldd	r24, Y+17	; 0x11
    1252:	e8 2e       	mov	r14, r24
    1254:	ff 24       	eor	r15, r15
    1256:	fb 8a       	std	Y+19, r15	; 0x13
    1258:	ea 8a       	std	Y+18, r14	; 0x12
    125a:	0a 89       	ldd	r16, Y+18	; 0x12
    125c:	1b 89       	ldd	r17, Y+19	; 0x13
    125e:	0b 32       	cpi	r16, 0x2B	; 43
    1260:	11 05       	cpc	r17, r1
    1262:	31 f0       	breq	.+12     	; 0x1270 <CAL_OUTPUT+0x70>
    1264:	2a 89       	ldd	r18, Y+18	; 0x12
    1266:	3b 89       	ldd	r19, Y+19	; 0x13
    1268:	2d 32       	cpi	r18, 0x2D	; 45
    126a:	31 05       	cpc	r19, r1
    126c:	e9 f0       	breq	.+58     	; 0x12a8 <CAL_OUTPUT+0xa8>
    126e:	3b c0       	rjmp	.+118    	; 0x12e6 <CAL_OUTPUT+0xe6>

		case '+':

			res = top_num1 + top_num2;
    1270:	29 85       	ldd	r18, Y+9	; 0x09
    1272:	3a 85       	ldd	r19, Y+10	; 0x0a
    1274:	4b 85       	ldd	r20, Y+11	; 0x0b
    1276:	5c 85       	ldd	r21, Y+12	; 0x0c
    1278:	8d 85       	ldd	r24, Y+13	; 0x0d
    127a:	9e 85       	ldd	r25, Y+14	; 0x0e
    127c:	af 85       	ldd	r26, Y+15	; 0x0f
    127e:	b8 89       	ldd	r27, Y+16	; 0x10
    1280:	82 0f       	add	r24, r18
    1282:	93 1f       	adc	r25, r19
    1284:	a4 1f       	adc	r26, r20
    1286:	b5 1f       	adc	r27, r21
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	ab 83       	std	Y+3, r26	; 0x03
    128e:	bc 83       	std	Y+4, r27	; 0x04
			Push(res, &rev_numbers);
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	ab 81       	ldd	r26, Y+3	; 0x03
    1296:	bc 81       	ldd	r27, Y+4	; 0x04
    1298:	2e e6       	ldi	r18, 0x6E	; 110
    129a:	31 e0       	ldi	r19, 0x01	; 1
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	a9 01       	movw	r20, r18
    12a2:	0e 94 86 19 	call	0x330c	; 0x330c <Push>
    12a6:	1f c0       	rjmp	.+62     	; 0x12e6 <CAL_OUTPUT+0xe6>
			break;

		case '-':
			res = top_num1 - top_num2;
    12a8:	29 85       	ldd	r18, Y+9	; 0x09
    12aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    12ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    12b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b4:	af 85       	ldd	r26, Y+15	; 0x0f
    12b6:	b8 89       	ldd	r27, Y+16	; 0x10
    12b8:	79 01       	movw	r14, r18
    12ba:	8a 01       	movw	r16, r20
    12bc:	e8 1a       	sub	r14, r24
    12be:	f9 0a       	sbc	r15, r25
    12c0:	0a 0b       	sbc	r16, r26
    12c2:	1b 0b       	sbc	r17, r27
    12c4:	d8 01       	movw	r26, r16
    12c6:	c7 01       	movw	r24, r14
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	ab 83       	std	Y+3, r26	; 0x03
    12ce:	bc 83       	std	Y+4, r27	; 0x04
			Push(res, &rev_numbers);
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	ab 81       	ldd	r26, Y+3	; 0x03
    12d6:	bc 81       	ldd	r27, Y+4	; 0x04
    12d8:	2e e6       	ldi	r18, 0x6E	; 110
    12da:	31 e0       	ldi	r19, 0x01	; 1
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	a9 01       	movw	r20, r18
    12e2:	0e 94 86 19 	call	0x330c	; 0x330c <Push>


void CAL_OUTPUT() {
	s32 result;

	while (!StackEmpty_op(&rev_op)) {
    12e6:	82 ea       	ldi	r24, 0xA2	; 162
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <StackEmpty_op>
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <CAL_OUTPUT+0xf4>
    12f2:	95 cf       	rjmp	.-214    	; 0x121e <CAL_OUTPUT+0x1e>
		case '-':
			res = top_num1 - top_num2;
			Push(res, &rev_numbers);
		}
	}
	Pop(&result, &rev_numbers);
    12f4:	ce 01       	movw	r24, r28
    12f6:	05 96       	adiw	r24, 0x05	; 5
    12f8:	2e e6       	ldi	r18, 0x6E	; 110
    12fa:	31 e0       	ldi	r19, 0x01	; 1
    12fc:	b9 01       	movw	r22, r18
    12fe:	0e 94 02 1a 	call	0x3404	; 0x3404 <Pop>


	if (is_ok == OK) {
    1302:	80 91 72 00 	lds	r24, 0x0072
    1306:	90 91 73 00 	lds	r25, 0x0073
    130a:	a0 91 74 00 	lds	r26, 0x0074
    130e:	b0 91 75 00 	lds	r27, 0x0075
    1312:	8e 34       	cpi	r24, 0x4E	; 78
    1314:	91 05       	cpc	r25, r1
    1316:	a1 05       	cpc	r26, r1
    1318:	b1 05       	cpc	r27, r1
    131a:	39 f5       	brne	.+78     	; 0x136a <CAL_OUTPUT+0x16a>
		LCD_enuSendCommand(0xc0);/////GO TO SECOND LINE IN LCD
    131c:	80 ec       	ldi	r24, 0xC0	; 192
    131e:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_enuSendCommand>
		LCD_enuDisplayIntegerNum(result);
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	af 81       	ldd	r26, Y+7	; 0x07
    1328:	b8 85       	ldd	r27, Y+8	; 0x08
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_enuDisplayIntegerNum>

		if (fraction > 0) {
    1332:	80 91 9a 00 	lds	r24, 0x009A
    1336:	90 91 9b 00 	lds	r25, 0x009B
    133a:	a0 91 9c 00 	lds	r26, 0x009C
    133e:	b0 91 9d 00 	lds	r27, 0x009D
    1342:	18 16       	cp	r1, r24
    1344:	19 06       	cpc	r1, r25
    1346:	1a 06       	cpc	r1, r26
    1348:	1b 06       	cpc	r1, r27
    134a:	7c f4       	brge	.+30     	; 0x136a <CAL_OUTPUT+0x16a>

			LCD_enuDisplayChar('.');
    134c:	8e e2       	ldi	r24, 0x2E	; 46
    134e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <LCD_enuDisplayChar>
			LCD_enuDisplayIntegerNum(fraction);
    1352:	80 91 9a 00 	lds	r24, 0x009A
    1356:	90 91 9b 00 	lds	r25, 0x009B
    135a:	a0 91 9c 00 	lds	r26, 0x009C
    135e:	b0 91 9d 00 	lds	r27, 0x009D
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_enuDisplayIntegerNum>
		}
	}
}
    136a:	63 96       	adiw	r28, 0x13	; 19
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	08 95       	ret

00001384 <Clear_CAL>:



void Clear_CAL() {
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    138c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_Clear>
	ClearStack(&numbers);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	93 e0       	ldi	r25, 0x03	; 3
    1394:	0e 94 9c 1a 	call	0x3538	; 0x3538 <ClearStack>
	ClearStack(&rev_numbers);
    1398:	8e e6       	ldi	r24, 0x6E	; 110
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <ClearStack>
	ClearStack_op(&op);
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <ClearStack_op>
	ClearStack_op(&rev_op);
    13a8:	82 ea       	ldi	r24, 0xA2	; 162
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 ac 1a 	call	0x3558	; 0x3558 <ClearStack_op>
	i = 0;
    13b0:	10 92 96 00 	sts	0x0096, r1
    13b4:	10 92 97 00 	sts	0x0097, r1
    13b8:	10 92 98 00 	sts	0x0098, r1
    13bc:	10 92 99 00 	sts	0x0099, r1
	fraction = 0;
    13c0:	10 92 9a 00 	sts	0x009A, r1
    13c4:	10 92 9b 00 	sts	0x009B, r1
    13c8:	10 92 9c 00 	sts	0x009C, r1
    13cc:	10 92 9d 00 	sts	0x009D, r1
	res_mul1000 = 0;
    13d0:	10 92 9e 00 	sts	0x009E, r1
    13d4:	10 92 9f 00 	sts	0x009F, r1
    13d8:	10 92 a0 00 	sts	0x00A0, r1
    13dc:	10 92 a1 00 	sts	0x00A1, r1

}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	e9 97       	sbiw	r28, 0x39	; 57
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    13fa:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	67 e0       	ldi	r22, 0x07	; 7
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	66 e0       	ldi	r22, 0x06	; 6
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	65 e0       	ldi	r22, 0x05	; 5
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	64 e0       	ldi	r22, 0x04	; 4
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	ac e0       	ldi	r26, 0x0C	; 12
    1448:	b2 e4       	ldi	r27, 0x42	; 66
    144a:	8d ab       	std	Y+53, r24	; 0x35
    144c:	9e ab       	std	Y+54, r25	; 0x36
    144e:	af ab       	std	Y+55, r26	; 0x37
    1450:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1452:	6d a9       	ldd	r22, Y+53	; 0x35
    1454:	7e a9       	ldd	r23, Y+54	; 0x36
    1456:	8f a9       	ldd	r24, Y+55	; 0x37
    1458:	98 ad       	ldd	r25, Y+56	; 0x38
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4a e7       	ldi	r20, 0x7A	; 122
    1460:	53 e4       	ldi	r21, 0x43	; 67
    1462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	89 ab       	std	Y+49, r24	; 0x31
    146c:	9a ab       	std	Y+50, r25	; 0x32
    146e:	ab ab       	std	Y+51, r26	; 0x33
    1470:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1472:	69 a9       	ldd	r22, Y+49	; 0x31
    1474:	7a a9       	ldd	r23, Y+50	; 0x32
    1476:	8b a9       	ldd	r24, Y+51	; 0x33
    1478:	9c a9       	ldd	r25, Y+52	; 0x34
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1486:	88 23       	and	r24, r24
    1488:	2c f4       	brge	.+10     	; 0x1494 <LCD_enuInit+0xae>
		__ticks = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	98 ab       	std	Y+48, r25	; 0x30
    1490:	8f a7       	std	Y+47, r24	; 0x2f
    1492:	3f c0       	rjmp	.+126    	; 0x1512 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1494:	69 a9       	ldd	r22, Y+49	; 0x31
    1496:	7a a9       	ldd	r23, Y+50	; 0x32
    1498:	8b a9       	ldd	r24, Y+51	; 0x33
    149a:	9c a9       	ldd	r25, Y+52	; 0x34
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	4c f5       	brge	.+82     	; 0x14fe <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ac:	6d a9       	ldd	r22, Y+53	; 0x35
    14ae:	7e a9       	ldd	r23, Y+54	; 0x36
    14b0:	8f a9       	ldd	r24, Y+55	; 0x37
    14b2:	98 ad       	ldd	r25, Y+56	; 0x38
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e2       	ldi	r20, 0x20	; 32
    14ba:	51 e4       	ldi	r21, 0x41	; 65
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	98 ab       	std	Y+48, r25	; 0x30
    14d2:	8f a7       	std	Y+47, r24	; 0x2f
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <LCD_enuInit+0x10e>
    14d6:	89 e1       	ldi	r24, 0x19	; 25
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9e a7       	std	Y+46, r25	; 0x2e
    14dc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14de:	8d a5       	ldd	r24, Y+45	; 0x2d
    14e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_enuInit+0xfc>
    14e6:	9e a7       	std	Y+46, r25	; 0x2e
    14e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ec:	98 a9       	ldd	r25, Y+48	; 0x30
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	98 ab       	std	Y+48, r25	; 0x30
    14f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f6:	98 a9       	ldd	r25, Y+48	; 0x30
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	69 f7       	brne	.-38     	; 0x14d6 <LCD_enuInit+0xf0>
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1500:	7a a9       	ldd	r23, Y+50	; 0x32
    1502:	8b a9       	ldd	r24, Y+51	; 0x33
    1504:	9c a9       	ldd	r25, Y+52	; 0x34
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	98 ab       	std	Y+48, r25	; 0x30
    1510:	8f a7       	std	Y+47, r24	; 0x2f
    1512:	8f a5       	ldd	r24, Y+47	; 0x2f
    1514:	98 a9       	ldd	r25, Y+48	; 0x30
    1516:	9c a7       	std	Y+44, r25	; 0x2c
    1518:	8b a7       	std	Y+43, r24	; 0x2b
    151a:	8b a5       	ldd	r24, Y+43	; 0x2b
    151c:	9c a5       	ldd	r25, Y+44	; 0x2c
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <LCD_enuInit+0x138>
    1522:	9c a7       	std	Y+44, r25	; 0x2c
    1524:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);

	//function set
	LCD_invidSendCommend(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
    1526:	88 e2       	ldi	r24, 0x28	; 40
    1528:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_invidSendCommend>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e8       	ldi	r26, 0x80	; 128
    1532:	bf e3       	ldi	r27, 0x3F	; 63
    1534:	8f a3       	std	Y+39, r24	; 0x27
    1536:	98 a7       	std	Y+40, r25	; 0x28
    1538:	a9 a7       	std	Y+41, r26	; 0x29
    153a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	6f a1       	ldd	r22, Y+39	; 0x27
    153e:	78 a5       	ldd	r23, Y+40	; 0x28
    1540:	89 a5       	ldd	r24, Y+41	; 0x29
    1542:	9a a5       	ldd	r25, Y+42	; 0x2a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4a e7       	ldi	r20, 0x7A	; 122
    154a:	53 e4       	ldi	r21, 0x43	; 67
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	8b a3       	std	Y+35, r24	; 0x23
    1556:	9c a3       	std	Y+36, r25	; 0x24
    1558:	ad a3       	std	Y+37, r26	; 0x25
    155a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    155c:	6b a1       	ldd	r22, Y+35	; 0x23
    155e:	7c a1       	ldd	r23, Y+36	; 0x24
    1560:	8d a1       	ldd	r24, Y+37	; 0x25
    1562:	9e a1       	ldd	r25, Y+38	; 0x26
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	2c f4       	brge	.+10     	; 0x157e <LCD_enuInit+0x198>
		__ticks = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9a a3       	std	Y+34, r25	; 0x22
    157a:	89 a3       	std	Y+33, r24	; 0x21
    157c:	3f c0       	rjmp	.+126    	; 0x15fc <LCD_enuInit+0x216>
	else if (__tmp > 65535)
    157e:	6b a1       	ldd	r22, Y+35	; 0x23
    1580:	7c a1       	ldd	r23, Y+36	; 0x24
    1582:	8d a1       	ldd	r24, Y+37	; 0x25
    1584:	9e a1       	ldd	r25, Y+38	; 0x26
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	57 e4       	ldi	r21, 0x47	; 71
    158e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	4c f5       	brge	.+82     	; 0x15e8 <LCD_enuInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1596:	6f a1       	ldd	r22, Y+39	; 0x27
    1598:	78 a5       	ldd	r23, Y+40	; 0x28
    159a:	89 a5       	ldd	r24, Y+41	; 0x29
    159c:	9a a5       	ldd	r25, Y+42	; 0x2a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e2       	ldi	r20, 0x20	; 32
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9a a3       	std	Y+34, r25	; 0x22
    15bc:	89 a3       	std	Y+33, r24	; 0x21
    15be:	0f c0       	rjmp	.+30     	; 0x15de <LCD_enuInit+0x1f8>
    15c0:	89 e1       	ldi	r24, 0x19	; 25
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	98 a3       	std	Y+32, r25	; 0x20
    15c6:	8f 8f       	std	Y+31, r24	; 0x1f
    15c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ca:	98 a1       	ldd	r25, Y+32	; 0x20
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_enuInit+0x1e6>
    15d0:	98 a3       	std	Y+32, r25	; 0x20
    15d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d4:	89 a1       	ldd	r24, Y+33	; 0x21
    15d6:	9a a1       	ldd	r25, Y+34	; 0x22
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	9a a3       	std	Y+34, r25	; 0x22
    15dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15de:	89 a1       	ldd	r24, Y+33	; 0x21
    15e0:	9a a1       	ldd	r25, Y+34	; 0x22
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	69 f7       	brne	.-38     	; 0x15c0 <LCD_enuInit+0x1da>
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <LCD_enuInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ea:	7c a1       	ldd	r23, Y+36	; 0x24
    15ec:	8d a1       	ldd	r24, Y+37	; 0x25
    15ee:	9e a1       	ldd	r25, Y+38	; 0x26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1600:	9e 8f       	std	Y+30, r25	; 0x1e
    1602:	8d 8f       	std	Y+29, r24	; 0x1d
    1604:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1606:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <LCD_enuInit+0x222>
    160c:	9e 8f       	std	Y+30, r25	; 0x1e
    160e:	8d 8f       	std	Y+29, r24	; 0x1d
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1610:	8f e0       	ldi	r24, 0x0F	; 15
    1612:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_invidSendCommend>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e8       	ldi	r26, 0x80	; 128
    161c:	bf e3       	ldi	r27, 0x3F	; 63
    161e:	89 8f       	std	Y+25, r24	; 0x19
    1620:	9a 8f       	std	Y+26, r25	; 0x1a
    1622:	ab 8f       	std	Y+27, r26	; 0x1b
    1624:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	69 8d       	ldd	r22, Y+25	; 0x19
    1628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e7       	ldi	r20, 0x7A	; 122
    1634:	53 e4       	ldi	r21, 0x43	; 67
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8d 8b       	std	Y+21, r24	; 0x15
    1640:	9e 8b       	std	Y+22, r25	; 0x16
    1642:	af 8b       	std	Y+23, r26	; 0x17
    1644:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1646:	6d 89       	ldd	r22, Y+21	; 0x15
    1648:	7e 89       	ldd	r23, Y+22	; 0x16
    164a:	8f 89       	ldd	r24, Y+23	; 0x17
    164c:	98 8d       	ldd	r25, Y+24	; 0x18
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165a:	88 23       	and	r24, r24
    165c:	2c f4       	brge	.+10     	; 0x1668 <LCD_enuInit+0x282>
		__ticks = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <LCD_enuInit+0x300>
	else if (__tmp > 65535)
    1668:	6d 89       	ldd	r22, Y+21	; 0x15
    166a:	7e 89       	ldd	r23, Y+22	; 0x16
    166c:	8f 89       	ldd	r24, Y+23	; 0x17
    166e:	98 8d       	ldd	r25, Y+24	; 0x18
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	4c f5       	brge	.+82     	; 0x16d2 <LCD_enuInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	69 8d       	ldd	r22, Y+25	; 0x19
    1682:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1686:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <LCD_enuInit+0x2e2>
    16aa:	89 e1       	ldi	r24, 0x19	; 25
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9a 8b       	std	Y+18, r25	; 0x12
    16b0:	89 8b       	std	Y+17, r24	; 0x11
    16b2:	89 89       	ldd	r24, Y+17	; 0x11
    16b4:	9a 89       	ldd	r25, Y+18	; 0x12
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <LCD_enuInit+0x2d0>
    16ba:	9a 8b       	std	Y+18, r25	; 0x12
    16bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ca:	9c 89       	ldd	r25, Y+20	; 0x14
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <LCD_enuInit+0x2c4>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <LCD_enuInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9c 8b       	std	Y+20, r25	; 0x14
    16e4:	8b 8b       	std	Y+19, r24	; 0x13
    16e6:	8b 89       	ldd	r24, Y+19	; 0x13
    16e8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ea:	98 8b       	std	Y+16, r25	; 0x10
    16ec:	8f 87       	std	Y+15, r24	; 0x0f
    16ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f0:	98 89       	ldd	r25, Y+16	; 0x10
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <LCD_enuInit+0x30c>
    16f6:	98 8b       	std	Y+16, r25	; 0x10
    16f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_invidSendCommend>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e4       	ldi	r27, 0x40	; 64
    1708:	8b 87       	std	Y+11, r24	; 0x0b
    170a:	9c 87       	std	Y+12, r25	; 0x0c
    170c:	ad 87       	std	Y+13, r26	; 0x0d
    170e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1710:	6b 85       	ldd	r22, Y+11	; 0x0b
    1712:	7c 85       	ldd	r23, Y+12	; 0x0c
    1714:	8d 85       	ldd	r24, Y+13	; 0x0d
    1716:	9e 85       	ldd	r25, Y+14	; 0x0e
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a e7       	ldi	r20, 0x7A	; 122
    171e:	53 e4       	ldi	r21, 0x43	; 67
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8f 83       	std	Y+7, r24	; 0x07
    172a:	98 87       	std	Y+8, r25	; 0x08
    172c:	a9 87       	std	Y+9, r26	; 0x09
    172e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <LCD_enuInit+0x36c>
		__ticks = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <LCD_enuInit+0x3ea>
	else if (__tmp > 65535)
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	4c f5       	brge	.+82     	; 0x17bc <LCD_enuInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	6b 85       	ldd	r22, Y+11	; 0x0b
    176c:	7c 85       	ldd	r23, Y+12	; 0x0c
    176e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1770:	9e 85       	ldd	r25, Y+14	; 0x0e
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	0f c0       	rjmp	.+30     	; 0x17b2 <LCD_enuInit+0x3cc>
    1794:	89 e1       	ldi	r24, 0x19	; 25
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LCD_enuInit+0x3ba>
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	69 f7       	brne	.-38     	; 0x1794 <LCD_enuInit+0x3ae>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <LCD_enuInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LCD_enuInit+0x3f6>
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    17e4:	86 e0       	ldi	r24, 0x06	; 6
    17e6:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_invidSendCommend>

	return Local_enuErrorState;
    17ea:	89 ad       	ldd	r24, Y+57	; 0x39
}
    17ec:	e9 96       	adiw	r28, 0x39	; 57
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <LCD_enuDisplayChar+0x6>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    180a:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_vidLatch>

	return Local_enuErrorState;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <LCD_enuSendCommand+0x6>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1834:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_vidLatch>


	return Local_enuErrorState;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	2b 97       	sbiw	r28, 0x0b	; 11
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	68 87       	std	Y+8, r22	; 0x08
    1868:	79 87       	std	Y+9, r23	; 0x09
    186a:	8a 87       	std	Y+10, r24	; 0x0a
    186c:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    186e:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    1870:	1b 82       	std	Y+3, r1	; 0x03
    1872:	1c 82       	std	Y+4, r1	; 0x04
    1874:	1d 82       	std	Y+5, r1	; 0x05
    1876:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1878:	1a 82       	std	Y+2, r1	; 0x02
    187a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    187c:	88 85       	ldd	r24, Y+8	; 0x08
    187e:	99 85       	ldd	r25, Y+9	; 0x09
    1880:	aa 85       	ldd	r26, Y+10	; 0x0a
    1882:	bb 85       	ldd	r27, Y+11	; 0x0b
    1884:	bb 23       	and	r27, r27
    1886:	0c f0       	brlt	.+2      	; 0x188a <LCD_enuDisplayIntegerNum+0x38>
    1888:	57 c0       	rjmp	.+174    	; 0x1938 <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    1894:	8d e2       	ldi	r24, 0x2D	; 45
    1896:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    189a:	88 85       	ldd	r24, Y+8	; 0x08
    189c:	99 85       	ldd	r25, Y+9	; 0x09
    189e:	aa 85       	ldd	r26, Y+10	; 0x0a
    18a0:	bb 85       	ldd	r27, Y+11	; 0x0b
    18a2:	b0 95       	com	r27
    18a4:	a0 95       	com	r26
    18a6:	90 95       	com	r25
    18a8:	81 95       	neg	r24
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	af 4f       	sbci	r26, 0xFF	; 255
    18ae:	bf 4f       	sbci	r27, 0xFF	; 255
    18b0:	88 87       	std	Y+8, r24	; 0x08
    18b2:	99 87       	std	Y+9, r25	; 0x09
    18b4:	aa 87       	std	Y+10, r26	; 0x0a
    18b6:	bb 87       	std	Y+11, r27	; 0x0b
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    18ba:	88 85       	ldd	r24, Y+8	; 0x08
    18bc:	99 85       	ldd	r25, Y+9	; 0x09
    18be:	aa 85       	ldd	r26, Y+10	; 0x0a
    18c0:	bb 85       	ldd	r27, Y+11	; 0x0b
    18c2:	2a e0       	ldi	r18, 0x0A	; 10
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	ad 81       	ldd	r26, Y+5	; 0x05
    18de:	be 81       	ldd	r27, Y+6	; 0x06
    18e0:	2a e0       	ldi	r18, 0x0A	; 10
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 4f 1b 	call	0x369e	; 0x369e <__mulsi3>
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	82 0f       	add	r24, r18
    1900:	93 1f       	adc	r25, r19
    1902:	a4 1f       	adc	r26, r20
    1904:	b5 1f       	adc	r27, r21
    1906:	8b 83       	std	Y+3, r24	; 0x03
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	ad 83       	std	Y+5, r26	; 0x05
    190c:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    190e:	88 85       	ldd	r24, Y+8	; 0x08
    1910:	99 85       	ldd	r25, Y+9	; 0x09
    1912:	aa 85       	ldd	r26, Y+10	; 0x0a
    1914:	bb 85       	ldd	r27, Y+11	; 0x0b
    1916:	2a e0       	ldi	r18, 0x0A	; 10
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
    1926:	da 01       	movw	r26, r20
    1928:	c9 01       	movw	r24, r18
    192a:	88 87       	std	Y+8, r24	; 0x08
    192c:	99 87       	std	Y+9, r25	; 0x09
    192e:	aa 87       	std	Y+10, r26	; 0x0a
    1930:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	8f 5f       	subi	r24, 0xFF	; 255
    1936:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	99 85       	ldd	r25, Y+9	; 0x09
    193c:	aa 85       	ldd	r26, Y+10	; 0x0a
    193e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	a1 05       	cpc	r26, r1
    1944:	b1 05       	cpc	r27, r1
    1946:	09 f0       	breq	.+2      	; 0x194a <LCD_enuDisplayIntegerNum+0xf8>
    1948:	b8 cf       	rjmp	.-144    	; 0x18ba <LCD_enuDisplayIntegerNum+0x68>
    194a:	2d c0       	rjmp	.+90     	; 0x19a6 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	ad 81       	ldd	r26, Y+5	; 0x05
    1952:	be 81       	ldd	r27, Y+6	; 0x06
    1954:	2a e0       	ldi	r18, 0x0A	; 10
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	80 5d       	subi	r24, 0xD0	; 208
    1978:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	ad 81       	ldd	r26, Y+5	; 0x05
    1982:	be 81       	ldd	r27, Y+6	; 0x06
    1984:	2a e0       	ldi	r18, 0x0A	; 10
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <__divmodsi4>
    1994:	da 01       	movw	r26, r20
    1996:	c9 01       	movw	r24, r18
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	ad 83       	std	Y+5, r26	; 0x05
    199e:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	88 23       	and	r24, r24
    19aa:	81 f6       	brne	.-96     	; 0x194c <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    19ac:	8f 81       	ldd	r24, Y+7	; 0x07
}
    19ae:	2b 96       	adiw	r28, 0x0b	; 11
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	c5 55       	subi	r28, 0x55	; 85
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	fe 01       	movw	r30, r28
    19dc:	eb 5a       	subi	r30, 0xAB	; 171
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 83       	st	Z, r24
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	62 e0       	ldi	r22, 0x02	; 2
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    19f6:	fe 01       	movw	r30, r28
    19f8:	eb 5a       	subi	r30, 0xAB	; 171
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	98 2f       	mov	r25, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	99 27       	eor	r25, r25
    1a04:	99 1f       	adc	r25, r25
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	67 e0       	ldi	r22, 0x07	; 7
    1a0a:	49 2f       	mov	r20, r25
    1a0c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1a10:	fe 01       	movw	r30, r28
    1a12:	eb 5a       	subi	r30, 0xAB	; 171
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	82 95       	swap	r24
    1a1a:	86 95       	lsr	r24
    1a1c:	86 95       	lsr	r24
    1a1e:	83 70       	andi	r24, 0x03	; 3
    1a20:	98 2f       	mov	r25, r24
    1a22:	91 70       	andi	r25, 0x01	; 1
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	66 e0       	ldi	r22, 0x06	; 6
    1a28:	49 2f       	mov	r20, r25
    1a2a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1a2e:	fe 01       	movw	r30, r28
    1a30:	eb 5a       	subi	r30, 0xAB	; 171
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	82 95       	swap	r24
    1a38:	86 95       	lsr	r24
    1a3a:	87 70       	andi	r24, 0x07	; 7
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	91 70       	andi	r25, 0x01	; 1
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	65 e0       	ldi	r22, 0x05	; 5
    1a44:	49 2f       	mov	r20, r25
    1a46:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	eb 5a       	subi	r30, 0xAB	; 171
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	82 95       	swap	r24
    1a54:	8f 70       	andi	r24, 0x0F	; 15
    1a56:	98 2f       	mov	r25, r24
    1a58:	91 70       	andi	r25, 0x01	; 1
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	64 e0       	ldi	r22, 0x04	; 4
    1a5e:	49 2f       	mov	r20, r25
    1a60:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));

#elif LCD_MODE == FOUR_BIT
	if (Copy_u8Data == 0x28)
    1a64:	fe 01       	movw	r30, r28
    1a66:	eb 5a       	subi	r30, 0xAB	; 171
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 32       	cpi	r24, 0x28	; 40
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <LCD_vidLatch+0xb2>
    1a70:	79 c1       	rjmp	.+754    	; 0x1d64 <LCD_vidLatch+0x3a4>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ef 5a       	subi	r30, 0xAF	; 175
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a0 e2       	ldi	r26, 0x20	; 32
    1a88:	b1 e4       	ldi	r27, 0x41	; 65
    1a8a:	80 83       	st	Z, r24
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	a2 83       	std	Z+2, r26	; 0x02
    1a90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	8e 01       	movw	r16, r28
    1a94:	03 5b       	subi	r16, 0xB3	; 179
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5a       	subi	r30, 0xAF	; 175
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	80 83       	st	Z, r24
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	a2 83       	std	Z+2, r26	; 0x02
    1abe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e3 5b       	subi	r30, 0xB3	; 179
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	44 f4       	brge	.+16     	; 0x1aee <LCD_vidLatch+0x12e>
		__ticks = 1;
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e5 5b       	subi	r30, 0xB5	; 181
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
    1aec:	64 c0       	rjmp	.+200    	; 0x1bb6 <LCD_vidLatch+0x1f6>
	else if (__tmp > 65535)
    1aee:	fe 01       	movw	r30, r28
    1af0:	e3 5b       	subi	r30, 0xB3	; 179
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	0c f0       	brlt	.+2      	; 0x1b0e <LCD_vidLatch+0x14e>
    1b0c:	43 c0       	rjmp	.+134    	; 0x1b94 <LCD_vidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ef 5a       	subi	r30, 0xAF	; 175
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	05 5b       	subi	r16, 0xB5	; 181
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
    1b44:	1f c0       	rjmp	.+62     	; 0x1b84 <LCD_vidLatch+0x1c4>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5b       	subi	r30, 0xB7	; 183
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	89 e1       	ldi	r24, 0x19	; 25
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 5b       	subi	r30, 0xB7	; 183
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_vidLatch+0x19e>
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	de 01       	movw	r26, r28
    1b6e:	a5 5b       	subi	r26, 0xB5	; 181
    1b70:	bf 4f       	sbci	r27, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	e5 5b       	subi	r30, 0xB5	; 181
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	9c 93       	st	X, r25
    1b82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e5 5b       	subi	r30, 0xB5	; 181
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	d1 f6       	brne	.-76     	; 0x1b46 <LCD_vidLatch+0x186>
    1b92:	27 c0       	rjmp	.+78     	; 0x1be2 <LCD_vidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	8e 01       	movw	r16, r28
    1b96:	05 5b       	subi	r16, 0xB5	; 181
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e3 5b       	subi	r30, 0xB3	; 179
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
    1bb6:	de 01       	movw	r26, r28
    1bb8:	a9 5b       	subi	r26, 0xB9	; 185
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	8d 93       	st	X+, r24
    1bc8:	9c 93       	st	X, r25
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 5b       	subi	r30, 0xB9	; 185
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_vidLatch+0x214>
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e9 5b       	subi	r30, 0xB9	; 185
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	62 e0       	ldi	r22, 0x02	; 2
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    1bec:	fe 01       	movw	r30, r28
    1bee:	ed 5b       	subi	r30, 0xBD	; 189
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e2       	ldi	r26, 0x20	; 32
    1bf8:	b1 e4       	ldi	r27, 0x41	; 65
    1bfa:	80 83       	st	Z, r24
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	a2 83       	std	Z+2, r26	; 0x02
    1c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	8e 01       	movw	r16, r28
    1c04:	01 5c       	subi	r16, 0xC1	; 193
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ed 5b       	subi	r30, 0xBD	; 189
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a e7       	ldi	r20, 0x7A	; 122
    1c1c:	53 e4       	ldi	r21, 0x43	; 67
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 83       	st	Z, r24
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	a2 83       	std	Z+2, r26	; 0x02
    1c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c30:	fe 01       	movw	r30, r28
    1c32:	ff 96       	adiw	r30, 0x3f	; 63
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <LCD_vidLatch+0x296>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9e af       	std	Y+62, r25	; 0x3e
    1c52:	8d af       	std	Y+61, r24	; 0x3d
    1c54:	46 c0       	rjmp	.+140    	; 0x1ce2 <LCD_vidLatch+0x322>
	else if (__tmp > 65535)
    1c56:	fe 01       	movw	r30, r28
    1c58:	ff 96       	adiw	r30, 0x3f	; 63
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	64 f5       	brge	.+88     	; 0x1cca <LCD_vidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 5b       	subi	r30, 0xBD	; 189
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e af       	std	Y+62, r25	; 0x3e
    1c9e:	8d af       	std	Y+61, r24	; 0x3d
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_vidLatch+0x300>
    1ca2:	89 e1       	ldi	r24, 0x19	; 25
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9c af       	std	Y+60, r25	; 0x3c
    1ca8:	8b af       	std	Y+59, r24	; 0x3b
    1caa:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cac:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_vidLatch+0x2ee>
    1cb2:	9c af       	std	Y+60, r25	; 0x3c
    1cb4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9e af       	std	Y+62, r25	; 0x3e
    1cbe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_vidLatch+0x2e2>
    1cc8:	16 c0       	rjmp	.+44     	; 0x1cf6 <LCD_vidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ff 96       	adiw	r30, 0x3f	; 63
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e af       	std	Y+62, r25	; 0x3e
    1ce0:	8d af       	std	Y+61, r24	; 0x3d
    1ce2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ce4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce6:	9a af       	std	Y+58, r25	; 0x3a
    1ce8:	89 af       	std	Y+57, r24	; 0x39
    1cea:	89 ad       	ldd	r24, Y+57	; 0x39
    1cec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_vidLatch+0x32e>
    1cf2:	9a af       	std	Y+58, r25	; 0x3a
    1cf4:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	eb 5a       	subi	r30, 0xAB	; 171
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	98 2f       	mov	r25, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	99 27       	eor	r25, r25
    1d04:	99 1f       	adc	r25, r25
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	67 e0       	ldi	r22, 0x07	; 7
    1d0a:	49 2f       	mov	r20, r25
    1d0c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1d10:	fe 01       	movw	r30, r28
    1d12:	eb 5a       	subi	r30, 0xAB	; 171
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	82 95       	swap	r24
    1d1a:	86 95       	lsr	r24
    1d1c:	86 95       	lsr	r24
    1d1e:	83 70       	andi	r24, 0x03	; 3
    1d20:	98 2f       	mov	r25, r24
    1d22:	91 70       	andi	r25, 0x01	; 1
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	66 e0       	ldi	r22, 0x06	; 6
    1d28:	49 2f       	mov	r20, r25
    1d2a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1d2e:	fe 01       	movw	r30, r28
    1d30:	eb 5a       	subi	r30, 0xAB	; 171
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	82 95       	swap	r24
    1d38:	86 95       	lsr	r24
    1d3a:	87 70       	andi	r24, 0x07	; 7
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	91 70       	andi	r25, 0x01	; 1
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	65 e0       	ldi	r22, 0x05	; 5
    1d44:	49 2f       	mov	r20, r25
    1d46:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	eb 5a       	subi	r30, 0xAB	; 171
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	82 95       	swap	r24
    1d54:	8f 70       	andi	r24, 0x0F	; 15
    1d56:	98 2f       	mov	r25, r24
    1d58:	91 70       	andi	r25, 0x01	; 1
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	64 e0       	ldi	r22, 0x04	; 4
    1d5e:	49 2f       	mov	r20, r25
    1d60:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	}

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	62 e0       	ldi	r22, 0x02	; 2
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e2       	ldi	r26, 0x20	; 32
    1d74:	b1 e4       	ldi	r27, 0x41	; 65
    1d76:	8d ab       	std	Y+53, r24	; 0x35
    1d78:	9e ab       	std	Y+54, r25	; 0x36
    1d7a:	af ab       	std	Y+55, r26	; 0x37
    1d7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d80:	7e a9       	ldd	r23, Y+54	; 0x36
    1d82:	8f a9       	ldd	r24, Y+55	; 0x37
    1d84:	98 ad       	ldd	r25, Y+56	; 0x38
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a e7       	ldi	r20, 0x7A	; 122
    1d8c:	53 e4       	ldi	r21, 0x43	; 67
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	89 ab       	std	Y+49, r24	; 0x31
    1d98:	9a ab       	std	Y+50, r25	; 0x32
    1d9a:	ab ab       	std	Y+51, r26	; 0x33
    1d9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1da0:	7a a9       	ldd	r23, Y+50	; 0x32
    1da2:	8b a9       	ldd	r24, Y+51	; 0x33
    1da4:	9c a9       	ldd	r25, Y+52	; 0x34
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <LCD_vidLatch+0x400>
		__ticks = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	98 ab       	std	Y+48, r25	; 0x30
    1dbc:	8f a7       	std	Y+47, r24	; 0x2f
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <LCD_vidLatch+0x47e>
	else if (__tmp > 65535)
    1dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	4f e7       	ldi	r20, 0x7F	; 127
    1dce:	57 e4       	ldi	r21, 0x47	; 71
    1dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	4c f5       	brge	.+82     	; 0x1e2a <LCD_vidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dda:	7e a9       	ldd	r23, Y+54	; 0x36
    1ddc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dde:	98 ad       	ldd	r25, Y+56	; 0x38
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	98 ab       	std	Y+48, r25	; 0x30
    1dfe:	8f a7       	std	Y+47, r24	; 0x2f
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <LCD_vidLatch+0x460>
    1e02:	89 e1       	ldi	r24, 0x19	; 25
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e a7       	std	Y+46, r25	; 0x2e
    1e08:	8d a7       	std	Y+45, r24	; 0x2d
    1e0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_vidLatch+0x44e>
    1e12:	9e a7       	std	Y+46, r25	; 0x2e
    1e14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e18:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	98 ab       	std	Y+48, r25	; 0x30
    1e1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e22:	98 a9       	ldd	r25, Y+48	; 0x30
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <LCD_vidLatch+0x442>
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <LCD_vidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e30:	9c a9       	ldd	r25, Y+52	; 0x34
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	98 ab       	std	Y+48, r25	; 0x30
    1e3c:	8f a7       	std	Y+47, r24	; 0x2f
    1e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e40:	98 a9       	ldd	r25, Y+48	; 0x30
    1e42:	9c a7       	std	Y+44, r25	; 0x2c
    1e44:	8b a7       	std	Y+43, r24	; 0x2b
    1e46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_vidLatch+0x48a>
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e2       	ldi	r26, 0x20	; 32
    1e62:	b1 e4       	ldi	r27, 0x41	; 65
    1e64:	8f a3       	std	Y+39, r24	; 0x27
    1e66:	98 a7       	std	Y+40, r25	; 0x28
    1e68:	a9 a7       	std	Y+41, r26	; 0x29
    1e6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e70:	89 a5       	ldd	r24, Y+41	; 0x29
    1e72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	53 e4       	ldi	r21, 0x43	; 67
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8b a3       	std	Y+35, r24	; 0x23
    1e86:	9c a3       	std	Y+36, r25	; 0x24
    1e88:	ad a3       	std	Y+37, r26	; 0x25
    1e8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_vidLatch+0x4ee>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9a a3       	std	Y+34, r25	; 0x22
    1eaa:	89 a3       	std	Y+33, r24	; 0x21
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_vidLatch+0x56c>
	else if (__tmp > 65535)
    1eae:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_vidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9a a3       	std	Y+34, r25	; 0x22
    1eec:	89 a3       	std	Y+33, r24	; 0x21
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_vidLatch+0x54e>
    1ef0:	89 e1       	ldi	r24, 0x19	; 25
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	98 a3       	std	Y+32, r25	; 0x20
    1ef6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1efa:	98 a1       	ldd	r25, Y+32	; 0x20
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_vidLatch+0x53c>
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9a a3       	std	Y+34, r25	; 0x22
    1f0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f10:	9a a1       	ldd	r25, Y+34	; 0x22
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_vidLatch+0x530>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <LCD_vidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f30:	9e 8f       	std	Y+30, r25	; 0x1e
    1f32:	8d 8f       	std	Y+29, r24	; 0x1d
    1f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_vidLatch+0x578>
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(10);
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>3)&1));
    1f40:	fe 01       	movw	r30, r28
    1f42:	eb 5a       	subi	r30, 0xAB	; 171
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	86 95       	lsr	r24
    1f4a:	86 95       	lsr	r24
    1f4c:	86 95       	lsr	r24
    1f4e:	98 2f       	mov	r25, r24
    1f50:	91 70       	andi	r25, 0x01	; 1
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	67 e0       	ldi	r22, 0x07	; 7
    1f56:	49 2f       	mov	r20, r25
    1f58:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>2)&1));
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	eb 5a       	subi	r30, 0xAB	; 171
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	86 95       	lsr	r24
    1f66:	86 95       	lsr	r24
    1f68:	98 2f       	mov	r25, r24
    1f6a:	91 70       	andi	r25, 0x01	; 1
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	66 e0       	ldi	r22, 0x06	; 6
    1f70:	49 2f       	mov	r20, r25
    1f72:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
    1f76:	fe 01       	movw	r30, r28
    1f78:	eb 5a       	subi	r30, 0xAB	; 171
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	86 95       	lsr	r24
    1f80:	98 2f       	mov	r25, r24
    1f82:	91 70       	andi	r25, 0x01	; 1
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	65 e0       	ldi	r22, 0x05	; 5
    1f88:	49 2f       	mov	r20, r25
    1f8a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
    1f8e:	fe 01       	movw	r30, r28
    1f90:	eb 5a       	subi	r30, 0xAB	; 171
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	98 2f       	mov	r25, r24
    1f98:	91 70       	andi	r25, 0x01	; 1
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	64 e0       	ldi	r22, 0x04	; 4
    1f9e:	49 2f       	mov	r20, r25
    1fa0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e2       	ldi	r26, 0x20	; 32
    1fb4:	b1 e4       	ldi	r27, 0x41	; 65
    1fb6:	89 8f       	std	Y+25, r24	; 0x19
    1fb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1fba:	ab 8f       	std	Y+27, r26	; 0x1b
    1fbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a e7       	ldi	r20, 0x7A	; 122
    1fcc:	53 e4       	ldi	r21, 0x43	; 67
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8d 8b       	std	Y+21, r24	; 0x15
    1fd8:	9e 8b       	std	Y+22, r25	; 0x16
    1fda:	af 8b       	std	Y+23, r26	; 0x17
    1fdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fde:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_vidLatch+0x640>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_vidLatch+0x6be>
	else if (__tmp > 65535)
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_vidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	69 8d       	ldd	r22, Y+25	; 0x19
    201a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_vidLatch+0x6a0>
    2042:	89 e1       	ldi	r24, 0x19	; 25
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9a 8b       	std	Y+18, r25	; 0x12
    2048:	89 8b       	std	Y+17, r24	; 0x11
    204a:	89 89       	ldd	r24, Y+17	; 0x11
    204c:	9a 89       	ldd	r25, Y+18	; 0x12
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_vidLatch+0x68e>
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9c 8b       	std	Y+20, r25	; 0x14
    205e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8b 89       	ldd	r24, Y+19	; 0x13
    2062:	9c 89       	ldd	r25, Y+20	; 0x14
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_vidLatch+0x682>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_vidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	98 8b       	std	Y+16, r25	; 0x10
    2084:	8f 87       	std	Y+15, r24	; 0x0f
    2086:	8f 85       	ldd	r24, Y+15	; 0x0f
    2088:	98 89       	ldd	r25, Y+16	; 0x10
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_vidLatch+0x6ca>
    208e:	98 8b       	std	Y+16, r25	; 0x10
    2090:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2092:	83 e0       	ldi	r24, 0x03	; 3
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e2       	ldi	r26, 0x20	; 32
    20a2:	b1 e4       	ldi	r27, 0x41	; 65
    20a4:	8b 87       	std	Y+11, r24	; 0x0b
    20a6:	9c 87       	std	Y+12, r25	; 0x0c
    20a8:	ad 87       	std	Y+13, r26	; 0x0d
    20aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	53 e4       	ldi	r21, 0x43	; 67
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8f 83       	std	Y+7, r24	; 0x07
    20c6:	98 87       	std	Y+8, r25	; 0x08
    20c8:	a9 87       	std	Y+9, r26	; 0x09
    20ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_vidLatch+0x72e>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <LCD_vidLatch+0x7ac>
	else if (__tmp > 65535)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <LCD_vidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_vidLatch+0x78e>
    2130:	89 e1       	ldi	r24, 0x19	; 25
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_vidLatch+0x77c>
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <LCD_vidLatch+0x770>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <LCD_vidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_vidLatch+0x7b8>
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    2180:	cb 5a       	subi	r28, 0xAB	; 171
    2182:	df 4f       	sbci	r29, 0xFF	; 255
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	08 95       	ret

00002198 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	ab 97       	sbiw	r28, 0x2b	; 43
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	8b a7       	std	Y+43, r24	; 0x2b
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    21cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ce:	98 2f       	mov	r25, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	99 27       	eor	r25, r25
    21d4:	99 1f       	adc	r25, r25
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	67 e0       	ldi	r22, 0x07	; 7
    21da:	49 2f       	mov	r20, r25
    21dc:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    21e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e2:	82 95       	swap	r24
    21e4:	86 95       	lsr	r24
    21e6:	86 95       	lsr	r24
    21e8:	83 70       	andi	r24, 0x03	; 3
    21ea:	98 2f       	mov	r25, r24
    21ec:	91 70       	andi	r25, 0x01	; 1
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	66 e0       	ldi	r22, 0x06	; 6
    21f2:	49 2f       	mov	r20, r25
    21f4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    21f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fa:	82 95       	swap	r24
    21fc:	86 95       	lsr	r24
    21fe:	87 70       	andi	r24, 0x07	; 7
    2200:	98 2f       	mov	r25, r24
    2202:	91 70       	andi	r25, 0x01	; 1
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	65 e0       	ldi	r22, 0x05	; 5
    2208:	49 2f       	mov	r20, r25
    220a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    220e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2210:	82 95       	swap	r24
    2212:	8f 70       	andi	r24, 0x0F	; 15
    2214:	98 2f       	mov	r25, r24
    2216:	91 70       	andi	r25, 0x01	; 1
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	64 e0       	ldi	r22, 0x04	; 4
    221c:	49 2f       	mov	r20, r25
    221e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));

#elif LCD_MODE == FOUR_BIT

	if(Copy_u8Command == 0x28)
    2222:	8b a5       	ldd	r24, Y+43	; 0x2b
    2224:	88 32       	cpi	r24, 0x28	; 40
    2226:	09 f0       	breq	.+2      	; 0x222a <LCD_invidSendCommend+0x92>
    2228:	a7 c0       	rjmp	.+334    	; 0x2378 <LCD_invidSendCommend+0x1e0>
	{
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	62 e0       	ldi	r22, 0x02	; 2
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e2       	ldi	r26, 0x20	; 32
    223a:	b1 e4       	ldi	r27, 0x41	; 65
    223c:	8f a3       	std	Y+39, r24	; 0x27
    223e:	98 a7       	std	Y+40, r25	; 0x28
    2240:	a9 a7       	std	Y+41, r26	; 0x29
    2242:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	6f a1       	ldd	r22, Y+39	; 0x27
    2246:	78 a5       	ldd	r23, Y+40	; 0x28
    2248:	89 a5       	ldd	r24, Y+41	; 0x29
    224a:	9a a5       	ldd	r25, Y+42	; 0x2a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a e7       	ldi	r20, 0x7A	; 122
    2252:	53 e4       	ldi	r21, 0x43	; 67
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8b a3       	std	Y+35, r24	; 0x23
    225e:	9c a3       	std	Y+36, r25	; 0x24
    2260:	ad a3       	std	Y+37, r26	; 0x25
    2262:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2264:	6b a1       	ldd	r22, Y+35	; 0x23
    2266:	7c a1       	ldd	r23, Y+36	; 0x24
    2268:	8d a1       	ldd	r24, Y+37	; 0x25
    226a:	9e a1       	ldd	r25, Y+38	; 0x26
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_invidSendCommend+0xee>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9a a3       	std	Y+34, r25	; 0x22
    2282:	89 a3       	std	Y+33, r24	; 0x21
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_invidSendCommend+0x16c>
	else if (__tmp > 65535)
    2286:	6b a1       	ldd	r22, Y+35	; 0x23
    2288:	7c a1       	ldd	r23, Y+36	; 0x24
    228a:	8d a1       	ldd	r24, Y+37	; 0x25
    228c:	9e a1       	ldd	r25, Y+38	; 0x26
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_invidSendCommend+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	6f a1       	ldd	r22, Y+39	; 0x27
    22a0:	78 a5       	ldd	r23, Y+40	; 0x28
    22a2:	89 a5       	ldd	r24, Y+41	; 0x29
    22a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_invidSendCommend+0x14e>
    22c8:	89 e1       	ldi	r24, 0x19	; 25
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	98 a3       	std	Y+32, r25	; 0x20
    22ce:	8f 8f       	std	Y+31, r24	; 0x1f
    22d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d2:	98 a1       	ldd	r25, Y+32	; 0x20
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_invidSendCommend+0x13c>
    22d8:	98 a3       	std	Y+32, r25	; 0x20
    22da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	89 a1       	ldd	r24, Y+33	; 0x21
    22de:	9a a1       	ldd	r25, Y+34	; 0x22
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9a a3       	std	Y+34, r25	; 0x22
    22e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	89 a1       	ldd	r24, Y+33	; 0x21
    22e8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_invidSendCommend+0x130>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_invidSendCommend+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6b a1       	ldd	r22, Y+35	; 0x23
    22f2:	7c a1       	ldd	r23, Y+36	; 0x24
    22f4:	8d a1       	ldd	r24, Y+37	; 0x25
    22f6:	9e a1       	ldd	r25, Y+38	; 0x26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9a a3       	std	Y+34, r25	; 0x22
    2302:	89 a3       	std	Y+33, r24	; 0x21
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	9e 8f       	std	Y+30, r25	; 0x1e
    230a:	8d 8f       	std	Y+29, r24	; 0x1d
    230c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_invidSendCommend+0x178>
    2314:	9e 8f       	std	Y+30, r25	; 0x1e
    2316:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>

		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2322:	8b a5       	ldd	r24, Y+43	; 0x2b
    2324:	98 2f       	mov	r25, r24
    2326:	99 1f       	adc	r25, r25
    2328:	99 27       	eor	r25, r25
    232a:	99 1f       	adc	r25, r25
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	67 e0       	ldi	r22, 0x07	; 7
    2330:	49 2f       	mov	r20, r25
    2332:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2336:	8b a5       	ldd	r24, Y+43	; 0x2b
    2338:	82 95       	swap	r24
    233a:	86 95       	lsr	r24
    233c:	86 95       	lsr	r24
    233e:	83 70       	andi	r24, 0x03	; 3
    2340:	98 2f       	mov	r25, r24
    2342:	91 70       	andi	r25, 0x01	; 1
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	49 2f       	mov	r20, r25
    234a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    234e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2350:	82 95       	swap	r24
    2352:	86 95       	lsr	r24
    2354:	87 70       	andi	r24, 0x07	; 7
    2356:	98 2f       	mov	r25, r24
    2358:	91 70       	andi	r25, 0x01	; 1
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	65 e0       	ldi	r22, 0x05	; 5
    235e:	49 2f       	mov	r20, r25
    2360:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2364:	8b a5       	ldd	r24, Y+43	; 0x2b
    2366:	82 95       	swap	r24
    2368:	8f 70       	andi	r24, 0x0F	; 15
    236a:	98 2f       	mov	r25, r24
    236c:	91 70       	andi	r25, 0x01	; 1
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	64 e0       	ldi	r22, 0x04	; 4
    2372:	49 2f       	mov	r20, r25
    2374:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	}
	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	62 e0       	ldi	r22, 0x02	; 2
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e2       	ldi	r26, 0x20	; 32
    2388:	b1 e4       	ldi	r27, 0x41	; 65
    238a:	89 8f       	std	Y+25, r24	; 0x19
    238c:	9a 8f       	std	Y+26, r25	; 0x1a
    238e:	ab 8f       	std	Y+27, r26	; 0x1b
    2390:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	69 8d       	ldd	r22, Y+25	; 0x19
    2394:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2396:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2398:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	53 e4       	ldi	r21, 0x43	; 67
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8d 8b       	std	Y+21, r24	; 0x15
    23ac:	9e 8b       	std	Y+22, r25	; 0x16
    23ae:	af 8b       	std	Y+23, r26	; 0x17
    23b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b2:	6d 89       	ldd	r22, Y+21	; 0x15
    23b4:	7e 89       	ldd	r23, Y+22	; 0x16
    23b6:	8f 89       	ldd	r24, Y+23	; 0x17
    23b8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_invidSendCommend+0x23c>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9c 8b       	std	Y+20, r25	; 0x14
    23d0:	8b 8b       	std	Y+19, r24	; 0x13
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_invidSendCommend+0x2ba>
	else if (__tmp > 65535)
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_invidSendCommend+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	69 8d       	ldd	r22, Y+25	; 0x19
    23ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_invidSendCommend+0x29c>
    2416:	89 e1       	ldi	r24, 0x19	; 25
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9a 8b       	std	Y+18, r25	; 0x12
    241c:	89 8b       	std	Y+17, r24	; 0x11
    241e:	89 89       	ldd	r24, Y+17	; 0x11
    2420:	9a 89       	ldd	r25, Y+18	; 0x12
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_invidSendCommend+0x28a>
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_invidSendCommend+0x27e>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <LCD_invidSendCommend+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	98 8b       	std	Y+16, r25	; 0x10
    2458:	8f 87       	std	Y+15, r24	; 0x0f
    245a:	8f 85       	ldd	r24, Y+15	; 0x0f
    245c:	98 89       	ldd	r25, Y+16	; 0x10
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_invidSendCommend+0x2c6>
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>3)&1));
    2470:	8b a5       	ldd	r24, Y+43	; 0x2b
    2472:	86 95       	lsr	r24
    2474:	86 95       	lsr	r24
    2476:	86 95       	lsr	r24
    2478:	98 2f       	mov	r25, r24
    247a:	91 70       	andi	r25, 0x01	; 1
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	67 e0       	ldi	r22, 0x07	; 7
    2480:	49 2f       	mov	r20, r25
    2482:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
    2486:	8b a5       	ldd	r24, Y+43	; 0x2b
    2488:	86 95       	lsr	r24
    248a:	86 95       	lsr	r24
    248c:	98 2f       	mov	r25, r24
    248e:	91 70       	andi	r25, 0x01	; 1
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	66 e0       	ldi	r22, 0x06	; 6
    2494:	49 2f       	mov	r20, r25
    2496:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
    249a:	8b a5       	ldd	r24, Y+43	; 0x2b
    249c:	86 95       	lsr	r24
    249e:	98 2f       	mov	r25, r24
    24a0:	91 70       	andi	r25, 0x01	; 1
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	65 e0       	ldi	r22, 0x05	; 5
    24a6:	49 2f       	mov	r20, r25
    24a8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));
    24ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ae:	98 2f       	mov	r25, r24
    24b0:	91 70       	andi	r25, 0x01	; 1
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	64 e0       	ldi	r22, 0x04	; 4
    24b6:	49 2f       	mov	r20, r25
    24b8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	62 e0       	ldi	r22, 0x02	; 2
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e2       	ldi	r26, 0x20	; 32
    24cc:	b1 e4       	ldi	r27, 0x41	; 65
    24ce:	8b 87       	std	Y+11, r24	; 0x0b
    24d0:	9c 87       	std	Y+12, r25	; 0x0c
    24d2:	ad 87       	std	Y+13, r26	; 0x0d
    24d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24da:	8d 85       	ldd	r24, Y+13	; 0x0d
    24dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a e7       	ldi	r20, 0x7A	; 122
    24e4:	53 e4       	ldi	r21, 0x43	; 67
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8f 83       	std	Y+7, r24	; 0x07
    24f0:	98 87       	std	Y+8, r25	; 0x08
    24f2:	a9 87       	std	Y+9, r26	; 0x09
    24f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <LCD_invidSendCommend+0x380>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <LCD_invidSendCommend+0x3fe>
	else if (__tmp > 65535)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <LCD_invidSendCommend+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6b 85       	ldd	r22, Y+11	; 0x0b
    2532:	7c 85       	ldd	r23, Y+12	; 0x0c
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_invidSendCommend+0x3e0>
    255a:	89 e1       	ldi	r24, 0x19	; 25
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_invidSendCommend+0x3ce>
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <LCD_invidSendCommend+0x3c2>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <LCD_invidSendCommend+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_invidSendCommend+0x40a>
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
}
    25b4:	ab 96       	adiw	r28, 0x2b	; 43
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <LCD_Clear>:
void LCD_Clear(){
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62

	LCD_enuSendCommand(LCD_CLEAR);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_enuSendCommand>



}
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <Keypad_enuInit>:
#include "KPD_priv.h"

#include <util/delay.h>


ES_t Keypad_enuInit(void){
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    25e4:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorstate =   DIO_enuSetPinDirection(C1_PORT,C1_PIN, DIO_u8OUTPUT);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    25f0:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C2_PORT,C2_PIN, DIO_u8OUTPUT);
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    25fc:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C3_PORT,C3_PIN, DIO_u8OUTPUT);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	62 e0       	ldi	r22, 0x02	; 2
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    2608:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(C4_PORT,C4_PIN, DIO_u8OUTPUT);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	63 e0       	ldi	r22, 0x03	; 3
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    2614:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinDirection(R1_PORT,R1_PIN, DIO_u8INPUT);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    2620:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R2_PORT,R2_PIN, DIO_u8INPUT);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	65 e0       	ldi	r22, 0x05	; 5
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    262c:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R3_PORT,R3_PIN, DIO_u8INPUT);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	66 e0       	ldi	r22, 0x06	; 6
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    2638:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinDirection(R4_PORT,R4_PIN, DIO_u8INPUT);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	67 e0       	ldi	r22, 0x07	; 7
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enuSetPinDirection>
    2644:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinValue(C1_PORT,C1_PIN, DIO_u8HIGH);
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2650:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C2_PORT,C2_PIN, DIO_u8HIGH);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    265c:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C3_PORT,C3_PIN, DIO_u8HIGH);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	62 e0       	ldi	r22, 0x02	; 2
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2668:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(C4_PORT,C4_PIN, DIO_u8HIGH);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	63 e0       	ldi	r22, 0x03	; 3
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2674:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorstate =	DIO_enuSetPinValue(R1_PORT,R1_PIN, DIO_u8PULL_UP);
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	64 e0       	ldi	r22, 0x04	; 4
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2680:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R2_PORT,R2_PIN, DIO_u8PULL_UP);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	65 e0       	ldi	r22, 0x05	; 5
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    268c:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R3_PORT,R3_PIN, DIO_u8PULL_UP);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	66 e0       	ldi	r22, 0x06	; 6
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    2698:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorstate =	DIO_enuSetPinValue(R4_PORT,R4_PIN, DIO_u8PULL_UP);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	67 e0       	ldi	r22, 0x07	; 7
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
    26a4:	89 83       	std	Y+1, r24	; 0x01

	 Local_enuErrorstate  =ES_OK;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	89 83       	std	Y+1, r24	; 0x01


		return Local_enuErrorstate;
    26aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue){
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	ea 97       	sbiw	r28, 0x3a	; 58
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	9c ab       	std	Y+52, r25	; 0x34
    26ca:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorstate=ES_NOK;
    26cc:	19 8a       	std	Y+17, r1	; 0x11
			if( Copy_pu8KeyValue!=NULL){
    26ce:	8b a9       	ldd	r24, Y+51	; 0x33
    26d0:	9c a9       	ldd	r25, Y+52	; 0x34
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <Keypad_enuGetPressedKey+0x24>
    26d6:	64 c1       	rjmp	.+712    	; 0x29a0 <Keypad_enuGetPressedKey+0x2ec>
				    u8 Local_Au8RowPins [ROWS_NUM] = { R1_PIN , R2_PIN , R3_PIN , R4_PIN };
    26d8:	84 e0       	ldi	r24, 0x04	; 4
    26da:	8a 8b       	std	Y+18, r24	; 0x12
    26dc:	85 e0       	ldi	r24, 0x05	; 5
    26de:	8b 8b       	std	Y+19, r24	; 0x13
    26e0:	86 e0       	ldi	r24, 0x06	; 6
    26e2:	8c 8b       	std	Y+20, r24	; 0x14
    26e4:	87 e0       	ldi	r24, 0x07	; 7
    26e6:	8d 8b       	std	Y+21, r24	; 0x15
				    u8 Local_Au8ColPins [COLS_NUM] = { C1_PIN , C2_PIN , C3_PIN , C4_PIN };
    26e8:	1e 8a       	std	Y+22, r1	; 0x16
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	8f 8b       	std	Y+23, r24	; 0x17
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	88 8f       	std	Y+24, r24	; 0x18
    26f2:	83 e0       	ldi	r24, 0x03	; 3
    26f4:	89 8f       	std	Y+25, r24	; 0x19
				    u8 Local_Au8RowPorts[ROWS_NUM] = { R1_PORT , R2_PORT , R3_PORT , R4_PORT };
    26f6:	1a 8e       	std	Y+26, r1	; 0x1a
    26f8:	1b 8e       	std	Y+27, r1	; 0x1b
    26fa:	1c 8e       	std	Y+28, r1	; 0x1c
    26fc:	1d 8e       	std	Y+29, r1	; 0x1d
				    u8 Local_Au8ColPorts[COLS_NUM] = { C1_PORT , C2_PORT , C3_PORT , C4_PORT };
    26fe:	1e 8e       	std	Y+30, r1	; 0x1e
    2700:	1f 8e       	std	Y+31, r1	; 0x1f
    2702:	18 a2       	std	Y+32, r1	; 0x20
    2704:	19 a2       	std	Y+33, r1	; 0x21

						*Copy_pu8KeyValue = KEY_NOT_PRESS;
    2706:	eb a9       	ldd	r30, Y+51	; 0x33
    2708:	fc a9       	ldd	r31, Y+52	; 0x34
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	80 83       	st	Z, r24
						u8 Local_u8PinValue = 0xff;
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	8a a3       	std	Y+34, r24	; 0x22

				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    2712:	ce 01       	movw	r24, r28
    2714:	83 96       	adiw	r24, 0x23	; 35
    2716:	9f ab       	std	Y+55, r25	; 0x37
    2718:	8e ab       	std	Y+54, r24	; 0x36
    271a:	e6 e7       	ldi	r30, 0x76	; 118
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	f9 af       	std	Y+57, r31	; 0x39
    2720:	e8 af       	std	Y+56, r30	; 0x38
    2722:	f0 e1       	ldi	r31, 0x10	; 16
    2724:	fa af       	std	Y+58, r31	; 0x3a
    2726:	e8 ad       	ldd	r30, Y+56	; 0x38
    2728:	f9 ad       	ldd	r31, Y+57	; 0x39
    272a:	00 80       	ld	r0, Z
    272c:	88 ad       	ldd	r24, Y+56	; 0x38
    272e:	99 ad       	ldd	r25, Y+57	; 0x39
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	99 af       	std	Y+57, r25	; 0x39
    2734:	88 af       	std	Y+56, r24	; 0x38
    2736:	ee a9       	ldd	r30, Y+54	; 0x36
    2738:	ff a9       	ldd	r31, Y+55	; 0x37
    273a:	00 82       	st	Z, r0
    273c:	8e a9       	ldd	r24, Y+54	; 0x36
    273e:	9f a9       	ldd	r25, Y+55	; 0x37
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	9f ab       	std	Y+55, r25	; 0x37
    2744:	8e ab       	std	Y+54, r24	; 0x36
    2746:	9a ad       	ldd	r25, Y+58	; 0x3a
    2748:	91 50       	subi	r25, 0x01	; 1
    274a:	9a af       	std	Y+58, r25	; 0x3a
    274c:	ea ad       	ldd	r30, Y+58	; 0x3a
    274e:	ee 23       	and	r30, r30
    2750:	51 f7       	brne	.-44     	; 0x2726 <Keypad_enuGetPressedKey+0x72>
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
    2752:	18 8a       	std	Y+16, r1	; 0x10
    2754:	20 c1       	rjmp	.+576    	; 0x2996 <Keypad_enuGetPressedKey+0x2e2>
					  //active col
					   DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it],Local_Au8ColPins[Local_col_it],DIO_u8LOW);
    2756:	88 89       	ldd	r24, Y+16	; 0x10
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	ce 01       	movw	r24, r28
    275e:	4e 96       	adiw	r24, 0x1e	; 30
    2760:	fc 01       	movw	r30, r24
    2762:	e2 0f       	add	r30, r18
    2764:	f3 1f       	adc	r31, r19
    2766:	40 81       	ld	r20, Z
    2768:	88 89       	ldd	r24, Y+16	; 0x10
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	ce 01       	movw	r24, r28
    2770:	46 96       	adiw	r24, 0x16	; 22
    2772:	fc 01       	movw	r30, r24
    2774:	e2 0f       	add	r30, r18
    2776:	f3 1f       	adc	r31, r19
    2778:	90 81       	ld	r25, Z
    277a:	84 2f       	mov	r24, r20
    277c:	69 2f       	mov	r22, r25
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
					   for(Local_row_it=0;Local_row_it<ROWS_NUM;Local_row_it++){
    2784:	1f 86       	std	Y+15, r1	; 0x0f
    2786:	e9 c0       	rjmp	.+466    	; 0x295a <Keypad_enuGetPressedKey+0x2a6>
						   DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    2788:	8f 85       	ldd	r24, Y+15	; 0x0f
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	ce 01       	movw	r24, r28
    2790:	4a 96       	adiw	r24, 0x1a	; 26
    2792:	fc 01       	movw	r30, r24
    2794:	e2 0f       	add	r30, r18
    2796:	f3 1f       	adc	r31, r19
    2798:	40 81       	ld	r20, Z
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	ce 01       	movw	r24, r28
    27a2:	42 96       	adiw	r24, 0x12	; 18
    27a4:	fc 01       	movw	r30, r24
    27a6:	e2 0f       	add	r30, r18
    27a8:	f3 1f       	adc	r31, r19
    27aa:	90 81       	ld	r25, Z
    27ac:	9e 01       	movw	r18, r28
    27ae:	2e 5d       	subi	r18, 0xDE	; 222
    27b0:	3f 4f       	sbci	r19, 0xFF	; 255
    27b2:	84 2f       	mov	r24, r20
    27b4:	69 2f       	mov	r22, r25
    27b6:	a9 01       	movw	r20, r18
    27b8:	0e 94 bf 18 	call	0x317e	; 0x317e <DIO_enuGetPinValue>
						   if (! Local_u8PinValue)
    27bc:	8a a1       	ldd	r24, Y+34	; 0x22
    27be:	88 23       	and	r24, r24
    27c0:	09 f0       	breq	.+2      	; 0x27c4 <Keypad_enuGetPressedKey+0x110>
    27c2:	c8 c0       	rjmp	.+400    	; 0x2954 <Keypad_enuGetPressedKey+0x2a0>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e2       	ldi	r26, 0x20	; 32
    27ca:	b1 e4       	ldi	r27, 0x41	; 65
    27cc:	8b 87       	std	Y+11, r24	; 0x0b
    27ce:	9c 87       	std	Y+12, r25	; 0x0c
    27d0:	ad 87       	std	Y+13, r26	; 0x0d
    27d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a e7       	ldi	r20, 0x7A	; 122
    27e2:	53 e4       	ldi	r21, 0x43	; 67
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8f 83       	std	Y+7, r24	; 0x07
    27ee:	98 87       	std	Y+8, r25	; 0x08
    27f0:	a9 87       	std	Y+9, r26	; 0x09
    27f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f4:	6f 81       	ldd	r22, Y+7	; 0x07
    27f6:	78 85       	ldd	r23, Y+8	; 0x08
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <Keypad_enuGetPressedKey+0x162>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <Keypad_enuGetPressedKey+0x1e0>
	else if (__tmp > 65535)
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	78 85       	ldd	r23, Y+8	; 0x08
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <Keypad_enuGetPressedKey+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2830:	7c 85       	ldd	r23, Y+12	; 0x0c
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <Keypad_enuGetPressedKey+0x1c2>
    2858:	89 e1       	ldi	r24, 0x19	; 25
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <Keypad_enuGetPressedKey+0x1b0>
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <Keypad_enuGetPressedKey+0x1a4>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <Keypad_enuGetPressedKey+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <Keypad_enuGetPressedKey+0x1ec>
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
						   				{
						   					_delay_ms(10);
						   					DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	ce 01       	movw	r24, r28
    28b0:	4a 96       	adiw	r24, 0x1a	; 26
    28b2:	fc 01       	movw	r30, r24
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	40 81       	ld	r20, Z
    28ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	ce 01       	movw	r24, r28
    28c2:	42 96       	adiw	r24, 0x12	; 18
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	90 81       	ld	r25, Z
    28cc:	9e 01       	movw	r18, r28
    28ce:	2e 5d       	subi	r18, 0xDE	; 222
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	84 2f       	mov	r24, r20
    28d4:	69 2f       	mov	r22, r25
    28d6:	a9 01       	movw	r20, r18
    28d8:	0e 94 bf 18 	call	0x317e	; 0x317e <DIO_enuGetPinValue>
						   					if (! Local_u8PinValue)
    28dc:	8a a1       	ldd	r24, Y+34	; 0x22
    28de:	88 23       	and	r24, r24
    28e0:	c9 f5       	brne	.+114    	; 0x2954 <Keypad_enuGetPressedKey+0x2a0>
    28e2:	1a c0       	rjmp	.+52     	; 0x2918 <Keypad_enuGetPressedKey+0x264>
						   					{
						   						while (! Local_u8PinValue)
						   						{
						   							DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
    28e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	ce 01       	movw	r24, r28
    28ec:	4a 96       	adiw	r24, 0x1a	; 26
    28ee:	fc 01       	movw	r30, r24
    28f0:	e2 0f       	add	r30, r18
    28f2:	f3 1f       	adc	r31, r19
    28f4:	40 81       	ld	r20, Z
    28f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	ce 01       	movw	r24, r28
    28fe:	42 96       	adiw	r24, 0x12	; 18
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	90 81       	ld	r25, Z
    2908:	9e 01       	movw	r18, r28
    290a:	2e 5d       	subi	r18, 0xDE	; 222
    290c:	3f 4f       	sbci	r19, 0xFF	; 255
    290e:	84 2f       	mov	r24, r20
    2910:	69 2f       	mov	r22, r25
    2912:	a9 01       	movw	r20, r18
    2914:	0e 94 bf 18 	call	0x317e	; 0x317e <DIO_enuGetPinValue>
						   				{
						   					_delay_ms(10);
						   					DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
						   					if (! Local_u8PinValue)
						   					{
						   						while (! Local_u8PinValue)
    2918:	8a a1       	ldd	r24, Y+34	; 0x22
    291a:	88 23       	and	r24, r24
    291c:	19 f3       	breq	.-58     	; 0x28e4 <Keypad_enuGetPressedKey+0x230>
						   						{
						   							DIO_enuGetPinValue(Local_Au8RowPorts[Local_row_it], Local_Au8RowPins[Local_row_it], &Local_u8PinValue);
						   						}

						   						*Copy_pu8KeyValue = Local_Au8KeyValues[Local_row_it][Local_col_it];
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	88 89       	ldd	r24, Y+16	; 0x10
    2926:	48 2f       	mov	r20, r24
    2928:	50 e0       	ldi	r21, 0x00	; 0
    292a:	22 0f       	add	r18, r18
    292c:	33 1f       	adc	r19, r19
    292e:	22 0f       	add	r18, r18
    2930:	33 1f       	adc	r19, r19
    2932:	ce 01       	movw	r24, r28
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	84 0f       	add	r24, r20
    293c:	95 1f       	adc	r25, r21
    293e:	fc 01       	movw	r30, r24
    2940:	b2 96       	adiw	r30, 0x22	; 34
    2942:	80 81       	ld	r24, Z
    2944:	eb a9       	ldd	r30, Y+51	; 0x33
    2946:	fc a9       	ldd	r31, Y+52	; 0x34
    2948:	80 83       	st	Z, r24

						   						return Local_enuErrorstate=ES_OK;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	89 8b       	std	Y+17, r24	; 0x11
    294e:	f9 89       	ldd	r31, Y+17	; 0x11
    2950:	fd ab       	std	Y+53, r31	; 0x35
    2952:	2a c0       	rjmp	.+84     	; 0x29a8 <Keypad_enuGetPressedKey+0x2f4>
				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
					  //active col
					   DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it],Local_Au8ColPins[Local_col_it],DIO_u8LOW);
					   for(Local_row_it=0;Local_row_it<ROWS_NUM;Local_row_it++){
    2954:	8f 85       	ldd	r24, Y+15	; 0x0f
    2956:	8f 5f       	subi	r24, 0xFF	; 255
    2958:	8f 87       	std	Y+15, r24	; 0x0f
    295a:	8f 85       	ldd	r24, Y+15	; 0x0f
    295c:	84 30       	cpi	r24, 0x04	; 4
    295e:	08 f4       	brcc	.+2      	; 0x2962 <Keypad_enuGetPressedKey+0x2ae>
    2960:	13 cf       	rjmp	.-474    	; 0x2788 <Keypad_enuGetPressedKey+0xd4>
						   					}
						   				}
						   			}
					   //deactive

						   			DIO_enuSetPinValue(Local_Au8ColPorts[Local_col_it] , Local_Au8ColPins[Local_col_it] , DIO_u8HIGH);
    2962:	88 89       	ldd	r24, Y+16	; 0x10
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	ce 01       	movw	r24, r28
    296a:	4e 96       	adiw	r24, 0x1e	; 30
    296c:	fc 01       	movw	r30, r24
    296e:	e2 0f       	add	r30, r18
    2970:	f3 1f       	adc	r31, r19
    2972:	40 81       	ld	r20, Z
    2974:	88 89       	ldd	r24, Y+16	; 0x10
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	ce 01       	movw	r24, r28
    297c:	46 96       	adiw	r24, 0x16	; 22
    297e:	fc 01       	movw	r30, r24
    2980:	e2 0f       	add	r30, r18
    2982:	f3 1f       	adc	r31, r19
    2984:	90 81       	ld	r25, Z
    2986:	84 2f       	mov	r24, r20
    2988:	69 2f       	mov	r22, r25
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <DIO_enuSetPinValue>
						*Copy_pu8KeyValue = KEY_NOT_PRESS;
						u8 Local_u8PinValue = 0xff;

				  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
				  u8 Local_col_it,Local_row_it;
				  for(Local_col_it=0;Local_col_it<COLS_NUM;Local_col_it++){
    2990:	88 89       	ldd	r24, Y+16	; 0x10
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	88 8b       	std	Y+16, r24	; 0x10
    2996:	88 89       	ldd	r24, Y+16	; 0x10
    2998:	84 30       	cpi	r24, 0x04	; 4
    299a:	08 f4       	brcc	.+2      	; 0x299e <Keypad_enuGetPressedKey+0x2ea>
    299c:	dc ce       	rjmp	.-584    	; 0x2756 <Keypad_enuGetPressedKey+0xa2>
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <Keypad_enuGetPressedKey+0x2f0>




			else{
				 Local_enuErrorstate=ES_NULL_POINTER;
    29a0:	82 e0       	ldi	r24, 0x02	; 2
    29a2:	89 8b       	std	Y+17, r24	; 0x11
			}


			return Local_enuErrorstate;
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	8d ab       	std	Y+53, r24	; 0x35
    29a8:	8d a9       	ldd	r24, Y+53	; 0x35

}
    29aa:	ea 96       	adiw	r28, 0x3a	; 58
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	0f 92       	push	r0
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    29c6:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    29c8:	ea e3       	ldi	r30, 0x3A	; 58
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8f ef       	ldi	r24, 0xFF	; 255
    29ce:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    29d0:	e7 e3       	ldi	r30, 0x37	; 55
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 ef       	ldi	r24, 0xF0	; 240
    29d6:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    29d8:	e4 e3       	ldi	r30, 0x34	; 52
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    29e0:	e1 e3       	ldi	r30, 0x31	; 49
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	8f ed       	ldi	r24, 0xDF	; 223
    29e6:	80 83       	st	Z, r24

	    PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    29e8:	eb e3       	ldi	r30, 0x3B	; 59
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	10 82       	st	Z, r1
		PORTB =CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    29ee:	e8 e3       	ldi	r30, 0x38	; 56
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	8f ef       	ldi	r24, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
		PORTC =CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    29f6:	e5 e3       	ldi	r30, 0x35	; 53
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	10 82       	st	Z, r1
		PORTD =CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    29fc:	e2 e3       	ldi	r30, 0x32	; 50
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	88 e5       	ldi	r24, 0x58	; 88
    2a02:	80 83       	st	Z, r24

	Local_enuErrorstate = ES_OK;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <DIO_enuSetPortDirection+0x6>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <DIO_enuSetPortDirection+0x8>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	8a 83       	std	Y+2, r24	; 0x02
    2a22:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2a24:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	84 30       	cpi	r24, 0x04	; 4
    2a2a:	a8 f5       	brcc	.+106    	; 0x2a96 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	3d 83       	std	Y+5, r19	; 0x05
    2a34:	2c 83       	std	Y+4, r18	; 0x04
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	d1 f0       	breq	.+52     	; 0x2a74 <DIO_enuSetPortDirection+0x62>
    2a40:	2c 81       	ldd	r18, Y+4	; 0x04
    2a42:	3d 81       	ldd	r19, Y+5	; 0x05
    2a44:	22 30       	cpi	r18, 0x02	; 2
    2a46:	31 05       	cpc	r19, r1
    2a48:	2c f4       	brge	.+10     	; 0x2a54 <DIO_enuSetPortDirection+0x42>
    2a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	61 f0       	breq	.+24     	; 0x2a6a <DIO_enuSetPortDirection+0x58>
    2a52:	1e c0       	rjmp	.+60     	; 0x2a90 <DIO_enuSetPortDirection+0x7e>
    2a54:	2c 81       	ldd	r18, Y+4	; 0x04
    2a56:	3d 81       	ldd	r19, Y+5	; 0x05
    2a58:	22 30       	cpi	r18, 0x02	; 2
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	81 f0       	breq	.+32     	; 0x2a7e <DIO_enuSetPortDirection+0x6c>
    2a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a60:	9d 81       	ldd	r25, Y+5	; 0x05
    2a62:	83 30       	cpi	r24, 0x03	; 3
    2a64:	91 05       	cpc	r25, r1
    2a66:	81 f0       	breq	.+32     	; 0x2a88 <DIO_enuSetPortDirection+0x76>
    2a68:	13 c0       	rjmp	.+38     	; 0x2a90 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    2a6a:	ea e3       	ldi	r30, 0x3A	; 58
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	80 83       	st	Z, r24
    2a72:	0e c0       	rjmp	.+28     	; 0x2a90 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    2a74:	e7 e3       	ldi	r30, 0x37	; 55
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	80 83       	st	Z, r24
    2a7c:	09 c0       	rjmp	.+18     	; 0x2a90 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    2a7e:	e4 e3       	ldi	r30, 0x34	; 52
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	80 83       	st	Z, r24
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    2a88:	e1 e3       	ldi	r30, 0x31	; 49
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <DIO_enuSetPortValue+0x6>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <DIO_enuSetPortValue+0x8>
    2ab4:	0f 92       	push	r0
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	8a 83       	std	Y+2, r24	; 0x02
    2abc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2abe:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	84 30       	cpi	r24, 0x04	; 4
    2ac4:	a8 f5       	brcc	.+106    	; 0x2b30 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	3d 83       	std	Y+5, r19	; 0x05
    2ace:	2c 83       	std	Y+4, r18	; 0x04
    2ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	d1 f0       	breq	.+52     	; 0x2b0e <DIO_enuSetPortValue+0x62>
    2ada:	2c 81       	ldd	r18, Y+4	; 0x04
    2adc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	2c f4       	brge	.+10     	; 0x2aee <DIO_enuSetPortValue+0x42>
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	61 f0       	breq	.+24     	; 0x2b04 <DIO_enuSetPortValue+0x58>
    2aec:	1e c0       	rjmp	.+60     	; 0x2b2a <DIO_enuSetPortValue+0x7e>
    2aee:	2c 81       	ldd	r18, Y+4	; 0x04
    2af0:	3d 81       	ldd	r19, Y+5	; 0x05
    2af2:	22 30       	cpi	r18, 0x02	; 2
    2af4:	31 05       	cpc	r19, r1
    2af6:	81 f0       	breq	.+32     	; 0x2b18 <DIO_enuSetPortValue+0x6c>
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	9d 81       	ldd	r25, Y+5	; 0x05
    2afc:	83 30       	cpi	r24, 0x03	; 3
    2afe:	91 05       	cpc	r25, r1
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <DIO_enuSetPortValue+0x76>
    2b02:	13 c0       	rjmp	.+38     	; 0x2b2a <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    2b04:	eb e3       	ldi	r30, 0x3B	; 59
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	80 83       	st	Z, r24
    2b0c:	0e c0       	rjmp	.+28     	; 0x2b2a <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    2b0e:	e8 e3       	ldi	r30, 0x38	; 56
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	80 83       	st	Z, r24
    2b16:	09 c0       	rjmp	.+18     	; 0x2b2a <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    2b18:	e5 e3       	ldi	r30, 0x35	; 53
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	80 83       	st	Z, r24
    2b20:	04 c0       	rjmp	.+8      	; 0x2b2a <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    2b22:	e2 e3       	ldi	r30, 0x32	; 50
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	08 95       	ret

00002b46 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <DIO_enuTogPortValue+0x6>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <DIO_enuTogPortValue+0x8>
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    2b54:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <DIO_enuTogPortValue+0x18>
    2b5c:	41 c0       	rjmp	.+130    	; 0x2be0 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3c 83       	std	Y+4, r19	; 0x04
    2b66:	2b 83       	std	Y+3, r18	; 0x03
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	91 05       	cpc	r25, r1
    2b70:	e9 f0       	breq	.+58     	; 0x2bac <DIO_enuTogPortValue+0x66>
    2b72:	2b 81       	ldd	r18, Y+3	; 0x03
    2b74:	3c 81       	ldd	r19, Y+4	; 0x04
    2b76:	22 30       	cpi	r18, 0x02	; 2
    2b78:	31 05       	cpc	r19, r1
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <DIO_enuTogPortValue+0x40>
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	61 f0       	breq	.+24     	; 0x2b9c <DIO_enuTogPortValue+0x56>
    2b84:	2a c0       	rjmp	.+84     	; 0x2bda <DIO_enuTogPortValue+0x94>
    2b86:	2b 81       	ldd	r18, Y+3	; 0x03
    2b88:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	b1 f0       	breq	.+44     	; 0x2bbc <DIO_enuTogPortValue+0x76>
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	9c 81       	ldd	r25, Y+4	; 0x04
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	91 05       	cpc	r25, r1
    2b98:	c9 f0       	breq	.+50     	; 0x2bcc <DIO_enuTogPortValue+0x86>
    2b9a:	1f c0       	rjmp	.+62     	; 0x2bda <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    2b9c:	ab e3       	ldi	r26, 0x3B	; 59
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	eb e3       	ldi	r30, 0x3B	; 59
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 95       	com	r24
    2ba8:	8c 93       	st	X, r24
    2baa:	17 c0       	rjmp	.+46     	; 0x2bda <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    2bac:	a8 e3       	ldi	r26, 0x38	; 56
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e8 e3       	ldi	r30, 0x38	; 56
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 95       	com	r24
    2bb8:	8c 93       	st	X, r24
    2bba:	0f c0       	rjmp	.+30     	; 0x2bda <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    2bbc:	a5 e3       	ldi	r26, 0x35	; 53
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e5 e3       	ldi	r30, 0x35	; 53
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 95       	com	r24
    2bc8:	8c 93       	st	X, r24
    2bca:	07 c0       	rjmp	.+14     	; 0x2bda <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    2bcc:	a2 e3       	ldi	r26, 0x32	; 50
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e2 e3       	ldi	r30, 0x32	; 50
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 95       	com	r24
    2bd8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2be0:	83 e0       	ldi	r24, 0x03	; 3
    2be2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <DIO_enuGetPortValue+0x6>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <DIO_enuGetPortValue+0x8>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <DIO_enuGetPortValue+0xa>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	8a 83       	std	Y+2, r24	; 0x02
    2c04:	7c 83       	std	Y+4, r23	; 0x04
    2c06:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2c08:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <DIO_enuGetPortValue+0x20>
    2c12:	43 c0       	rjmp	.+134    	; 0x2c9a <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	84 30       	cpi	r24, 0x04	; 4
    2c18:	e8 f5       	brcc	.+122    	; 0x2c94 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	3e 83       	std	Y+6, r19	; 0x06
    2c22:	2d 83       	std	Y+5, r18	; 0x05
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	e1 f0       	breq	.+56     	; 0x2c66 <DIO_enuGetPortValue+0x72>
    2c2e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c30:	3e 81       	ldd	r19, Y+6	; 0x06
    2c32:	22 30       	cpi	r18, 0x02	; 2
    2c34:	31 05       	cpc	r19, r1
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <DIO_enuGetPortValue+0x4e>
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	61 f0       	breq	.+24     	; 0x2c58 <DIO_enuGetPortValue+0x64>
    2c40:	26 c0       	rjmp	.+76     	; 0x2c8e <DIO_enuGetPortValue+0x9a>
    2c42:	2d 81       	ldd	r18, Y+5	; 0x05
    2c44:	3e 81       	ldd	r19, Y+6	; 0x06
    2c46:	22 30       	cpi	r18, 0x02	; 2
    2c48:	31 05       	cpc	r19, r1
    2c4a:	a1 f0       	breq	.+40     	; 0x2c74 <DIO_enuGetPortValue+0x80>
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	91 05       	cpc	r25, r1
    2c54:	b1 f0       	breq	.+44     	; 0x2c82 <DIO_enuGetPortValue+0x8e>
    2c56:	1b c0       	rjmp	.+54     	; 0x2c8e <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    2c58:	e9 e3       	ldi	r30, 0x39	; 57
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c60:	fc 81       	ldd	r31, Y+4	; 0x04
    2c62:	80 83       	st	Z, r24
    2c64:	14 c0       	rjmp	.+40     	; 0x2c8e <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    2c66:	e6 e3       	ldi	r30, 0x36	; 54
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c70:	80 83       	st	Z, r24
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    2c74:	e3 e3       	ldi	r30, 0x33	; 51
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c7e:	80 83       	st	Z, r24
    2c80:	06 c0       	rjmp	.+12     	; 0x2c8e <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    2c82:	e0 e3       	ldi	r30, 0x30	; 48
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c8c:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	05 c0       	rjmp	.+10     	; 0x2c9e <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    2c94:	83 e0       	ldi	r24, 0x03	; 3
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ca0:	26 96       	adiw	r28, 0x06	; 6
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <DIO_enuSetPinDirection+0x6>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <DIO_enuSetPinDirection+0x8>
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <DIO_enuSetPinDirection+0xa>
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	8a 83       	std	Y+2, r24	; 0x02
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
    2cc4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2cc6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	84 30       	cpi	r24, 0x04	; 4
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <DIO_enuSetPinDirection+0x1e>
    2cce:	d1 c0       	rjmp	.+418    	; 0x2e72 <DIO_enuSetPinDirection+0x1c0>
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	88 30       	cpi	r24, 0x08	; 8
    2cd4:	08 f0       	brcs	.+2      	; 0x2cd8 <DIO_enuSetPinDirection+0x26>
    2cd6:	cd c0       	rjmp	.+410    	; 0x2e72 <DIO_enuSetPinDirection+0x1c0>
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <DIO_enuSetPinDirection+0x2e>
    2cde:	c9 c0       	rjmp	.+402    	; 0x2e72 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	3e 83       	std	Y+6, r19	; 0x06
    2ce8:	2d 83       	std	Y+5, r18	; 0x05
    2cea:	6d 81       	ldd	r22, Y+5	; 0x05
    2cec:	7e 81       	ldd	r23, Y+6	; 0x06
    2cee:	61 30       	cpi	r22, 0x01	; 1
    2cf0:	71 05       	cpc	r23, r1
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <DIO_enuSetPinDirection+0x44>
    2cf4:	41 c0       	rjmp	.+130    	; 0x2d78 <DIO_enuSetPinDirection+0xc6>
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	82 30       	cpi	r24, 0x02	; 2
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	34 f4       	brge	.+12     	; 0x2d0c <DIO_enuSetPinDirection+0x5a>
    2d00:	2d 81       	ldd	r18, Y+5	; 0x05
    2d02:	3e 81       	ldd	r19, Y+6	; 0x06
    2d04:	21 15       	cp	r18, r1
    2d06:	31 05       	cpc	r19, r1
    2d08:	71 f0       	breq	.+28     	; 0x2d26 <DIO_enuSetPinDirection+0x74>
    2d0a:	b0 c0       	rjmp	.+352    	; 0x2e6c <DIO_enuSetPinDirection+0x1ba>
    2d0c:	6d 81       	ldd	r22, Y+5	; 0x05
    2d0e:	7e 81       	ldd	r23, Y+6	; 0x06
    2d10:	62 30       	cpi	r22, 0x02	; 2
    2d12:	71 05       	cpc	r23, r1
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <DIO_enuSetPinDirection+0x66>
    2d16:	59 c0       	rjmp	.+178    	; 0x2dca <DIO_enuSetPinDirection+0x118>
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1c:	83 30       	cpi	r24, 0x03	; 3
    2d1e:	91 05       	cpc	r25, r1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <DIO_enuSetPinDirection+0x72>
    2d22:	7c c0       	rjmp	.+248    	; 0x2e1c <DIO_enuSetPinDirection+0x16a>
    2d24:	a3 c0       	rjmp	.+326    	; 0x2e6c <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2d26:	aa e3       	ldi	r26, 0x3A	; 58
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ea e3       	ldi	r30, 0x3A	; 58
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	48 2f       	mov	r20, r24
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <DIO_enuSetPinDirection+0x90>
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	2a 95       	dec	r18
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <DIO_enuSetPinDirection+0x8c>
    2d46:	80 95       	com	r24
    2d48:	84 23       	and	r24, r20
    2d4a:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    2d4c:	aa e3       	ldi	r26, 0x3A	; 58
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	ea e3       	ldi	r30, 0x3A	; 58
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	b9 01       	movw	r22, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <DIO_enuSetPinDirection+0xba>
    2d68:	66 0f       	add	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	8a 95       	dec	r24
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <DIO_enuSetPinDirection+0xb6>
    2d70:	cb 01       	movw	r24, r22
    2d72:	84 2b       	or	r24, r20
    2d74:	8c 93       	st	X, r24
    2d76:	7a c0       	rjmp	.+244    	; 0x2e6c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2d78:	a7 e3       	ldi	r26, 0x37	; 55
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e7 e3       	ldi	r30, 0x37	; 55
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	48 2f       	mov	r20, r24
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <DIO_enuSetPinDirection+0xe2>
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	2a 95       	dec	r18
    2d96:	e2 f7       	brpl	.-8      	; 0x2d90 <DIO_enuSetPinDirection+0xde>
    2d98:	80 95       	com	r24
    2d9a:	84 23       	and	r24, r20
    2d9c:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    2d9e:	a7 e3       	ldi	r26, 0x37	; 55
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e7 e3       	ldi	r30, 0x37	; 55
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	48 2f       	mov	r20, r24
    2daa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	b9 01       	movw	r22, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <DIO_enuSetPinDirection+0x10c>
    2dba:	66 0f       	add	r22, r22
    2dbc:	77 1f       	adc	r23, r23
    2dbe:	8a 95       	dec	r24
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <DIO_enuSetPinDirection+0x108>
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	84 2b       	or	r24, r20
    2dc6:	8c 93       	st	X, r24
    2dc8:	51 c0       	rjmp	.+162    	; 0x2e6c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2dca:	a4 e3       	ldi	r26, 0x34	; 52
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e4 e3       	ldi	r30, 0x34	; 52
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	48 2f       	mov	r20, r24
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <DIO_enuSetPinDirection+0x134>
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	2a 95       	dec	r18
    2de8:	e2 f7       	brpl	.-8      	; 0x2de2 <DIO_enuSetPinDirection+0x130>
    2dea:	80 95       	com	r24
    2dec:	84 23       	and	r24, r20
    2dee:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    2df0:	a4 e3       	ldi	r26, 0x34	; 52
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e4 e3       	ldi	r30, 0x34	; 52
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	48 2f       	mov	r20, r24
    2dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfe:	28 2f       	mov	r18, r24
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	88 2f       	mov	r24, r24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	b9 01       	movw	r22, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <DIO_enuSetPinDirection+0x15e>
    2e0c:	66 0f       	add	r22, r22
    2e0e:	77 1f       	adc	r23, r23
    2e10:	8a 95       	dec	r24
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <DIO_enuSetPinDirection+0x15a>
    2e14:	cb 01       	movw	r24, r22
    2e16:	84 2b       	or	r24, r20
    2e18:	8c 93       	st	X, r24
    2e1a:	28 c0       	rjmp	.+80     	; 0x2e6c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2e1c:	a1 e3       	ldi	r26, 0x31	; 49
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e1 e3       	ldi	r30, 0x31	; 49
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	48 2f       	mov	r20, r24
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <DIO_enuSetPinDirection+0x186>
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	2a 95       	dec	r18
    2e3a:	e2 f7       	brpl	.-8      	; 0x2e34 <DIO_enuSetPinDirection+0x182>
    2e3c:	80 95       	com	r24
    2e3e:	84 23       	and	r24, r20
    2e40:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    2e42:	a1 e3       	ldi	r26, 0x31	; 49
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e1 e3       	ldi	r30, 0x31	; 49
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	48 2f       	mov	r20, r24
    2e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	b9 01       	movw	r22, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <DIO_enuSetPinDirection+0x1b0>
    2e5e:	66 0f       	add	r22, r22
    2e60:	77 1f       	adc	r23, r23
    2e62:	8a 95       	dec	r24
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <DIO_enuSetPinDirection+0x1ac>
    2e66:	cb 01       	movw	r24, r22
    2e68:	84 2b       	or	r24, r20
    2e6a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e78:	26 96       	adiw	r28, 0x06	; 6
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <DIO_enuSetPinValue+0x6>
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <DIO_enuSetPinValue+0x8>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <DIO_enuSetPinValue+0xa>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	8a 83       	std	Y+2, r24	; 0x02
    2e9a:	6b 83       	std	Y+3, r22	; 0x03
    2e9c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2e9e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	84 30       	cpi	r24, 0x04	; 4
    2ea4:	08 f0       	brcs	.+2      	; 0x2ea8 <DIO_enuSetPinValue+0x1e>
    2ea6:	d1 c0       	rjmp	.+418    	; 0x304a <DIO_enuSetPinValue+0x1c0>
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	88 30       	cpi	r24, 0x08	; 8
    2eac:	08 f0       	brcs	.+2      	; 0x2eb0 <DIO_enuSetPinValue+0x26>
    2eae:	cd c0       	rjmp	.+410    	; 0x304a <DIO_enuSetPinValue+0x1c0>
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	08 f0       	brcs	.+2      	; 0x2eb8 <DIO_enuSetPinValue+0x2e>
    2eb6:	c9 c0       	rjmp	.+402    	; 0x304a <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	3e 83       	std	Y+6, r19	; 0x06
    2ec0:	2d 83       	std	Y+5, r18	; 0x05
    2ec2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ec4:	7e 81       	ldd	r23, Y+6	; 0x06
    2ec6:	61 30       	cpi	r22, 0x01	; 1
    2ec8:	71 05       	cpc	r23, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <DIO_enuSetPinValue+0x44>
    2ecc:	41 c0       	rjmp	.+130    	; 0x2f50 <DIO_enuSetPinValue+0xc6>
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	82 30       	cpi	r24, 0x02	; 2
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	34 f4       	brge	.+12     	; 0x2ee4 <DIO_enuSetPinValue+0x5a>
    2ed8:	2d 81       	ldd	r18, Y+5	; 0x05
    2eda:	3e 81       	ldd	r19, Y+6	; 0x06
    2edc:	21 15       	cp	r18, r1
    2ede:	31 05       	cpc	r19, r1
    2ee0:	71 f0       	breq	.+28     	; 0x2efe <DIO_enuSetPinValue+0x74>
    2ee2:	b0 c0       	rjmp	.+352    	; 0x3044 <DIO_enuSetPinValue+0x1ba>
    2ee4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ee6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ee8:	62 30       	cpi	r22, 0x02	; 2
    2eea:	71 05       	cpc	r23, r1
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <DIO_enuSetPinValue+0x66>
    2eee:	59 c0       	rjmp	.+178    	; 0x2fa2 <DIO_enuSetPinValue+0x118>
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	83 30       	cpi	r24, 0x03	; 3
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <DIO_enuSetPinValue+0x72>
    2efa:	7c c0       	rjmp	.+248    	; 0x2ff4 <DIO_enuSetPinValue+0x16a>
    2efc:	a3 c0       	rjmp	.+326    	; 0x3044 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2efe:	ab e3       	ldi	r26, 0x3B	; 59
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	eb e3       	ldi	r30, 0x3B	; 59
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	48 2f       	mov	r20, r24
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	02 c0       	rjmp	.+4      	; 0x2f1a <DIO_enuSetPinValue+0x90>
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	2a 95       	dec	r18
    2f1c:	e2 f7       	brpl	.-8      	; 0x2f16 <DIO_enuSetPinValue+0x8c>
    2f1e:	80 95       	com	r24
    2f20:	84 23       	and	r24, r20
    2f22:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    2f24:	ab e3       	ldi	r26, 0x3B	; 59
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	eb e3       	ldi	r30, 0x3B	; 59
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	48 2f       	mov	r20, r24
    2f30:	8c 81       	ldd	r24, Y+4	; 0x04
    2f32:	28 2f       	mov	r18, r24
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	b9 01       	movw	r22, r18
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <DIO_enuSetPinValue+0xba>
    2f40:	66 0f       	add	r22, r22
    2f42:	77 1f       	adc	r23, r23
    2f44:	8a 95       	dec	r24
    2f46:	e2 f7       	brpl	.-8      	; 0x2f40 <DIO_enuSetPinValue+0xb6>
    2f48:	cb 01       	movw	r24, r22
    2f4a:	84 2b       	or	r24, r20
    2f4c:	8c 93       	st	X, r24
    2f4e:	7a c0       	rjmp	.+244    	; 0x3044 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2f50:	a8 e3       	ldi	r26, 0x38	; 56
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e8 e3       	ldi	r30, 0x38	; 56
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	48 2f       	mov	r20, r24
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <DIO_enuSetPinValue+0xe2>
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	2a 95       	dec	r18
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <DIO_enuSetPinValue+0xde>
    2f70:	80 95       	com	r24
    2f72:	84 23       	and	r24, r20
    2f74:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    2f76:	a8 e3       	ldi	r26, 0x38	; 56
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e8 e3       	ldi	r30, 0x38	; 56
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	48 2f       	mov	r20, r24
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	b9 01       	movw	r22, r18
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <DIO_enuSetPinValue+0x10c>
    2f92:	66 0f       	add	r22, r22
    2f94:	77 1f       	adc	r23, r23
    2f96:	8a 95       	dec	r24
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <DIO_enuSetPinValue+0x108>
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	84 2b       	or	r24, r20
    2f9e:	8c 93       	st	X, r24
    2fa0:	51 c0       	rjmp	.+162    	; 0x3044 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2fa2:	a5 e3       	ldi	r26, 0x35	; 53
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e5 e3       	ldi	r30, 0x35	; 53
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	48 2f       	mov	r20, r24
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <DIO_enuSetPinValue+0x134>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	2a 95       	dec	r18
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <DIO_enuSetPinValue+0x130>
    2fc2:	80 95       	com	r24
    2fc4:	84 23       	and	r24, r20
    2fc6:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    2fc8:	a5 e3       	ldi	r26, 0x35	; 53
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e5 e3       	ldi	r30, 0x35	; 53
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	48 2f       	mov	r20, r24
    2fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	88 2f       	mov	r24, r24
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	b9 01       	movw	r22, r18
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <DIO_enuSetPinValue+0x15e>
    2fe4:	66 0f       	add	r22, r22
    2fe6:	77 1f       	adc	r23, r23
    2fe8:	8a 95       	dec	r24
    2fea:	e2 f7       	brpl	.-8      	; 0x2fe4 <DIO_enuSetPinValue+0x15a>
    2fec:	cb 01       	movw	r24, r22
    2fee:	84 2b       	or	r24, r20
    2ff0:	8c 93       	st	X, r24
    2ff2:	28 c0       	rjmp	.+80     	; 0x3044 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    2ff4:	a2 e3       	ldi	r26, 0x32	; 50
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e2 e3       	ldi	r30, 0x32	; 50
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	48 2f       	mov	r20, r24
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <DIO_enuSetPinValue+0x186>
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	2a 95       	dec	r18
    3012:	e2 f7       	brpl	.-8      	; 0x300c <DIO_enuSetPinValue+0x182>
    3014:	80 95       	com	r24
    3016:	84 23       	and	r24, r20
    3018:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    301a:	a2 e3       	ldi	r26, 0x32	; 50
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e2 e3       	ldi	r30, 0x32	; 50
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	48 2f       	mov	r20, r24
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	b9 01       	movw	r22, r18
    3034:	02 c0       	rjmp	.+4      	; 0x303a <DIO_enuSetPinValue+0x1b0>
    3036:	66 0f       	add	r22, r22
    3038:	77 1f       	adc	r23, r23
    303a:	8a 95       	dec	r24
    303c:	e2 f7       	brpl	.-8      	; 0x3036 <DIO_enuSetPinValue+0x1ac>
    303e:	cb 01       	movw	r24, r22
    3040:	84 2b       	or	r24, r20
    3042:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	02 c0       	rjmp	.+4      	; 0x304e <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3050:	26 96       	adiw	r28, 0x06	; 6
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	00 d0       	rcall	.+0      	; 0x3068 <DIO_enuTogPin+0x6>
    3068:	00 d0       	rcall	.+0      	; 0x306a <DIO_enuTogPin+0x8>
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	8a 83       	std	Y+2, r24	; 0x02
    3072:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    3074:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	84 30       	cpi	r24, 0x04	; 4
    307a:	08 f0       	brcs	.+2      	; 0x307e <DIO_enuTogPin+0x1c>
    307c:	75 c0       	rjmp	.+234    	; 0x3168 <DIO_enuTogPin+0x106>
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	88 30       	cpi	r24, 0x08	; 8
    3082:	08 f0       	brcs	.+2      	; 0x3086 <DIO_enuTogPin+0x24>
    3084:	71 c0       	rjmp	.+226    	; 0x3168 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	3d 83       	std	Y+5, r19	; 0x05
    308e:	2c 83       	std	Y+4, r18	; 0x04
    3090:	8c 81       	ldd	r24, Y+4	; 0x04
    3092:	9d 81       	ldd	r25, Y+5	; 0x05
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	91 05       	cpc	r25, r1
    3098:	49 f1       	breq	.+82     	; 0x30ec <DIO_enuTogPin+0x8a>
    309a:	2c 81       	ldd	r18, Y+4	; 0x04
    309c:	3d 81       	ldd	r19, Y+5	; 0x05
    309e:	22 30       	cpi	r18, 0x02	; 2
    30a0:	31 05       	cpc	r19, r1
    30a2:	2c f4       	brge	.+10     	; 0x30ae <DIO_enuTogPin+0x4c>
    30a4:	8c 81       	ldd	r24, Y+4	; 0x04
    30a6:	9d 81       	ldd	r25, Y+5	; 0x05
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	61 f0       	breq	.+24     	; 0x30c4 <DIO_enuTogPin+0x62>
    30ac:	5a c0       	rjmp	.+180    	; 0x3162 <DIO_enuTogPin+0x100>
    30ae:	2c 81       	ldd	r18, Y+4	; 0x04
    30b0:	3d 81       	ldd	r19, Y+5	; 0x05
    30b2:	22 30       	cpi	r18, 0x02	; 2
    30b4:	31 05       	cpc	r19, r1
    30b6:	71 f1       	breq	.+92     	; 0x3114 <DIO_enuTogPin+0xb2>
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	9d 81       	ldd	r25, Y+5	; 0x05
    30bc:	83 30       	cpi	r24, 0x03	; 3
    30be:	91 05       	cpc	r25, r1
    30c0:	e9 f1       	breq	.+122    	; 0x313c <DIO_enuTogPin+0xda>
    30c2:	4f c0       	rjmp	.+158    	; 0x3162 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    30c4:	ab e3       	ldi	r26, 0x3B	; 59
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	eb e3       	ldi	r30, 0x3B	; 59
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	48 2f       	mov	r20, r24
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	02 2e       	mov	r0, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <DIO_enuTogPin+0x80>
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	0a 94       	dec	r0
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <DIO_enuTogPin+0x7c>
    30e6:	84 27       	eor	r24, r20
    30e8:	8c 93       	st	X, r24
    30ea:	3b c0       	rjmp	.+118    	; 0x3162 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    30ec:	a8 e3       	ldi	r26, 0x38	; 56
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e8 e3       	ldi	r30, 0x38	; 56
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	48 2f       	mov	r20, r24
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	02 2e       	mov	r0, r18
    3104:	02 c0       	rjmp	.+4      	; 0x310a <DIO_enuTogPin+0xa8>
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	0a 94       	dec	r0
    310c:	e2 f7       	brpl	.-8      	; 0x3106 <DIO_enuTogPin+0xa4>
    310e:	84 27       	eor	r24, r20
    3110:	8c 93       	st	X, r24
    3112:	27 c0       	rjmp	.+78     	; 0x3162 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    3114:	a5 e3       	ldi	r26, 0x35	; 53
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e5 e3       	ldi	r30, 0x35	; 53
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	48 2f       	mov	r20, r24
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	02 2e       	mov	r0, r18
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <DIO_enuTogPin+0xd0>
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	0a 94       	dec	r0
    3134:	e2 f7       	brpl	.-8      	; 0x312e <DIO_enuTogPin+0xcc>
    3136:	84 27       	eor	r24, r20
    3138:	8c 93       	st	X, r24
    313a:	13 c0       	rjmp	.+38     	; 0x3162 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    313c:	a2 e3       	ldi	r26, 0x32	; 50
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e2 e3       	ldi	r30, 0x32	; 50
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	48 2f       	mov	r20, r24
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	02 2e       	mov	r0, r18
    3154:	02 c0       	rjmp	.+4      	; 0x315a <DIO_enuTogPin+0xf8>
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	0a 94       	dec	r0
    315c:	e2 f7       	brpl	.-8      	; 0x3156 <DIO_enuTogPin+0xf4>
    315e:	84 27       	eor	r24, r20
    3160:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	02 c0       	rjmp	.+4      	; 0x316c <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    3168:	83 e0       	ldi	r24, 0x03	; 3
    316a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	27 97       	sbiw	r28, 0x07	; 7
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	8a 83       	std	Y+2, r24	; 0x02
    3194:	6b 83       	std	Y+3, r22	; 0x03
    3196:	5d 83       	std	Y+5, r21	; 0x05
    3198:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    319a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    319c:	8c 81       	ldd	r24, Y+4	; 0x04
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <DIO_enuGetPinValue+0x28>
    31a4:	7e c0       	rjmp	.+252    	; 0x32a2 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	84 30       	cpi	r24, 0x04	; 4
    31aa:	08 f0       	brcs	.+2      	; 0x31ae <DIO_enuGetPinValue+0x30>
    31ac:	77 c0       	rjmp	.+238    	; 0x329c <DIO_enuGetPinValue+0x11e>
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	88 30       	cpi	r24, 0x08	; 8
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <DIO_enuGetPinValue+0x38>
    31b4:	73 c0       	rjmp	.+230    	; 0x329c <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	3f 83       	std	Y+7, r19	; 0x07
    31be:	2e 83       	std	Y+6, r18	; 0x06
    31c0:	4e 81       	ldd	r20, Y+6	; 0x06
    31c2:	5f 81       	ldd	r21, Y+7	; 0x07
    31c4:	41 30       	cpi	r20, 0x01	; 1
    31c6:	51 05       	cpc	r21, r1
    31c8:	59 f1       	breq	.+86     	; 0x3220 <DIO_enuGetPinValue+0xa2>
    31ca:	8e 81       	ldd	r24, Y+6	; 0x06
    31cc:	9f 81       	ldd	r25, Y+7	; 0x07
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	91 05       	cpc	r25, r1
    31d2:	34 f4       	brge	.+12     	; 0x31e0 <DIO_enuGetPinValue+0x62>
    31d4:	2e 81       	ldd	r18, Y+6	; 0x06
    31d6:	3f 81       	ldd	r19, Y+7	; 0x07
    31d8:	21 15       	cp	r18, r1
    31da:	31 05       	cpc	r19, r1
    31dc:	69 f0       	breq	.+26     	; 0x31f8 <DIO_enuGetPinValue+0x7a>
    31de:	5b c0       	rjmp	.+182    	; 0x3296 <DIO_enuGetPinValue+0x118>
    31e0:	4e 81       	ldd	r20, Y+6	; 0x06
    31e2:	5f 81       	ldd	r21, Y+7	; 0x07
    31e4:	42 30       	cpi	r20, 0x02	; 2
    31e6:	51 05       	cpc	r21, r1
    31e8:	79 f1       	breq	.+94     	; 0x3248 <DIO_enuGetPinValue+0xca>
    31ea:	8e 81       	ldd	r24, Y+6	; 0x06
    31ec:	9f 81       	ldd	r25, Y+7	; 0x07
    31ee:	83 30       	cpi	r24, 0x03	; 3
    31f0:	91 05       	cpc	r25, r1
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <DIO_enuGetPinValue+0x78>
    31f4:	3d c0       	rjmp	.+122    	; 0x3270 <DIO_enuGetPinValue+0xf2>
    31f6:	4f c0       	rjmp	.+158    	; 0x3296 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    31f8:	e9 e3       	ldi	r30, 0x39	; 57
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a9 01       	movw	r20, r18
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <DIO_enuGetPinValue+0x92>
    320c:	55 95       	asr	r21
    320e:	47 95       	ror	r20
    3210:	8a 95       	dec	r24
    3212:	e2 f7       	brpl	.-8      	; 0x320c <DIO_enuGetPinValue+0x8e>
    3214:	ca 01       	movw	r24, r20
    3216:	81 70       	andi	r24, 0x01	; 1
    3218:	ec 81       	ldd	r30, Y+4	; 0x04
    321a:	fd 81       	ldd	r31, Y+5	; 0x05
    321c:	80 83       	st	Z, r24
    321e:	3b c0       	rjmp	.+118    	; 0x3296 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    3220:	e6 e3       	ldi	r30, 0x36	; 54
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	a9 01       	movw	r20, r18
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <DIO_enuGetPinValue+0xba>
    3234:	55 95       	asr	r21
    3236:	47 95       	ror	r20
    3238:	8a 95       	dec	r24
    323a:	e2 f7       	brpl	.-8      	; 0x3234 <DIO_enuGetPinValue+0xb6>
    323c:	ca 01       	movw	r24, r20
    323e:	81 70       	andi	r24, 0x01	; 1
    3240:	ec 81       	ldd	r30, Y+4	; 0x04
    3242:	fd 81       	ldd	r31, Y+5	; 0x05
    3244:	80 83       	st	Z, r24
    3246:	27 c0       	rjmp	.+78     	; 0x3296 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    3248:	e3 e3       	ldi	r30, 0x33	; 51
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	88 2f       	mov	r24, r24
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	a9 01       	movw	r20, r18
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <DIO_enuGetPinValue+0xe2>
    325c:	55 95       	asr	r21
    325e:	47 95       	ror	r20
    3260:	8a 95       	dec	r24
    3262:	e2 f7       	brpl	.-8      	; 0x325c <DIO_enuGetPinValue+0xde>
    3264:	ca 01       	movw	r24, r20
    3266:	81 70       	andi	r24, 0x01	; 1
    3268:	ec 81       	ldd	r30, Y+4	; 0x04
    326a:	fd 81       	ldd	r31, Y+5	; 0x05
    326c:	80 83       	st	Z, r24
    326e:	13 c0       	rjmp	.+38     	; 0x3296 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    3270:	e0 e3       	ldi	r30, 0x30	; 48
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	88 2f       	mov	r24, r24
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	a9 01       	movw	r20, r18
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <DIO_enuGetPinValue+0x10a>
    3284:	55 95       	asr	r21
    3286:	47 95       	ror	r20
    3288:	8a 95       	dec	r24
    328a:	e2 f7       	brpl	.-8      	; 0x3284 <DIO_enuGetPinValue+0x106>
    328c:	ca 01       	movw	r24, r20
    328e:	81 70       	andi	r24, 0x01	; 1
    3290:	ec 81       	ldd	r30, Y+4	; 0x04
    3292:	fd 81       	ldd	r31, Y+5	; 0x05
    3294:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	89 83       	std	Y+1, r24	; 0x01
    329a:	05 c0       	rjmp	.+10     	; 0x32a6 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    329c:	83 e0       	ldi	r24, 0x03	; 3
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	02 c0       	rjmp	.+4      	; 0x32a6 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32a8:	27 96       	adiw	r28, 0x07	; 7
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <main>:

#include "calculator/cal.h"


int main (void)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62

	CAL_INIT();
    32c2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CAL_INIT>

   while(1){
    CAL_INPUT();
    32c6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CAL_INPUT>
    32ca:	fd cf       	rjmp	.-6      	; 0x32c6 <main+0xc>

000032cc <CreateStack>:

#include "stack.h"

void CreateStack(NUMS *ps)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <CreateStack+0x6>
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    32da:	e9 81       	ldd	r30, Y+1	; 0x01
    32dc:	fa 81       	ldd	r31, Y+2	; 0x02
    32de:	11 82       	std	Z+1, r1	; 0x01
    32e0:	10 82       	st	Z, r1
}
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <CreateStack_op>:

void CreateStack_op(operations *ps)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <CreateStack_op+0x6>
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    32fa:	e9 81       	ldd	r30, Y+1	; 0x01
    32fc:	fa 81       	ldd	r31, Y+2	; 0x02
    32fe:	11 82       	std	Z+1, r1	; 0x01
    3300:	10 82       	st	Z, r1
}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <Push>:


void Push(stackentry e, NUMS *ps)
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	00 d0       	rcall	.+0      	; 0x3312 <Push+0x6>
    3312:	00 d0       	rcall	.+0      	; 0x3314 <Push+0x8>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <Push+0xa>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	69 83       	std	Y+1, r22	; 0x01
    331c:	7a 83       	std	Y+2, r23	; 0x02
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	5e 83       	std	Y+6, r21	; 0x06
    3324:	4d 83       	std	Y+5, r20	; 0x05
    ps->entry[ps->top++]=e;
    3326:	ed 81       	ldd	r30, Y+5	; 0x05
    3328:	fe 81       	ldd	r31, Y+6	; 0x06
    332a:	40 81       	ld	r20, Z
    332c:	51 81       	ldd	r21, Z+1	; 0x01
    332e:	2d 81       	ldd	r18, Y+5	; 0x05
    3330:	3e 81       	ldd	r19, Y+6	; 0x06
    3332:	ca 01       	movw	r24, r20
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	88 0f       	add	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	f9 01       	movw	r30, r18
    3340:	e8 0f       	add	r30, r24
    3342:	f9 1f       	adc	r31, r25
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	ab 81       	ldd	r26, Y+3	; 0x03
    334a:	bc 81       	ldd	r27, Y+4	; 0x04
    334c:	80 83       	st	Z, r24
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	a2 83       	std	Z+2, r26	; 0x02
    3352:	b3 83       	std	Z+3, r27	; 0x03
    3354:	ca 01       	movw	r24, r20
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	ed 81       	ldd	r30, Y+5	; 0x05
    335a:	fe 81       	ldd	r31, Y+6	; 0x06
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	80 83       	st	Z, r24
}
    3360:	26 96       	adiw	r28, 0x06	; 6
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <Push_op>:
void Push_op(u8 e, operations *OP)
{
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	00 d0       	rcall	.+0      	; 0x3378 <Push_op+0x6>
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	7b 83       	std	Y+3, r23	; 0x03
    3382:	6a 83       	std	Y+2, r22	; 0x02
    OP->entryy[OP->top++]=e;
    3384:	ea 81       	ldd	r30, Y+2	; 0x02
    3386:	fb 81       	ldd	r31, Y+3	; 0x03
    3388:	20 81       	ld	r18, Z
    338a:	31 81       	ldd	r19, Z+1	; 0x01
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	82 0f       	add	r24, r18
    3392:	93 1f       	adc	r25, r19
    3394:	fc 01       	movw	r30, r24
    3396:	32 96       	adiw	r30, 0x02	; 2
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	80 83       	st	Z, r24
    339c:	c9 01       	movw	r24, r18
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	ea 81       	ldd	r30, Y+2	; 0x02
    33a2:	fb 81       	ldd	r31, Y+3	; 0x03
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	80 83       	st	Z, r24
}
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <Pop_op>:

void Pop_op(u8 *pe, operations *OP)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <Pop_op+0x6>
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <Pop_op+0x8>
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	9a 83       	std	Y+2, r25	; 0x02
    33c2:	89 83       	std	Y+1, r24	; 0x01
    33c4:	7c 83       	std	Y+4, r23	; 0x04
    33c6:	6b 83       	std	Y+3, r22	; 0x03
    *pe=OP->entryy[--OP->top];
    33c8:	eb 81       	ldd	r30, Y+3	; 0x03
    33ca:	fc 81       	ldd	r31, Y+4	; 0x04
    33cc:	80 81       	ld	r24, Z
    33ce:	91 81       	ldd	r25, Z+1	; 0x01
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	eb 81       	ldd	r30, Y+3	; 0x03
    33d4:	fc 81       	ldd	r31, Y+4	; 0x04
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	80 83       	st	Z, r24
    33da:	eb 81       	ldd	r30, Y+3	; 0x03
    33dc:	fc 81       	ldd	r31, Y+4	; 0x04
    33de:	20 81       	ld	r18, Z
    33e0:	31 81       	ldd	r19, Z+1	; 0x01
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	9c 81       	ldd	r25, Y+4	; 0x04
    33e6:	82 0f       	add	r24, r18
    33e8:	93 1f       	adc	r25, r19
    33ea:	fc 01       	movw	r30, r24
    33ec:	32 96       	adiw	r30, 0x02	; 2
    33ee:	80 81       	ld	r24, Z
    33f0:	e9 81       	ldd	r30, Y+1	; 0x01
    33f2:	fa 81       	ldd	r31, Y+2	; 0x02
    33f4:	80 83       	st	Z, r24
}
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <Pop>:

void Pop(stackentry *pe, NUMS *ps)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <Pop+0x6>
    340a:	00 d0       	rcall	.+0      	; 0x340c <Pop+0x8>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	7c 83       	std	Y+4, r23	; 0x04
    3416:	6b 83       	std	Y+3, r22	; 0x03
    *pe=ps->entry[--ps->top];
    3418:	eb 81       	ldd	r30, Y+3	; 0x03
    341a:	fc 81       	ldd	r31, Y+4	; 0x04
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	eb 81       	ldd	r30, Y+3	; 0x03
    3424:	fc 81       	ldd	r31, Y+4	; 0x04
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
    342a:	eb 81       	ldd	r30, Y+3	; 0x03
    342c:	fc 81       	ldd	r31, Y+4	; 0x04
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	2b 81       	ldd	r18, Y+3	; 0x03
    3434:	3c 81       	ldd	r19, Y+4	; 0x04
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	f9 01       	movw	r30, r18
    3442:	e8 0f       	add	r30, r24
    3444:	f9 1f       	adc	r31, r25
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	a2 81       	ldd	r26, Z+2	; 0x02
    344c:	b3 81       	ldd	r27, Z+3	; 0x03
    344e:	e9 81       	ldd	r30, Y+1	; 0x01
    3450:	fa 81       	ldd	r31, Y+2	; 0x02
    3452:	80 83       	st	Z, r24
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	a2 83       	std	Z+2, r26	; 0x02
    3458:	b3 83       	std	Z+3, r27	; 0x03
}
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <StackFull>:


int StackFull(NUMS *ps)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <StackFull+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <StackFull+0x8>
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    return (ps->top==maxstack);
    3478:	e9 81       	ldd	r30, Y+1	; 0x01
    347a:	fa 81       	ldd	r31, Y+2	; 0x02
    347c:	80 81       	ld	r24, Z
    347e:	91 81       	ldd	r25, Z+1	; 0x01
    3480:	1c 82       	std	Y+4, r1	; 0x04
    3482:	1b 82       	std	Y+3, r1	; 0x03
    3484:	84 36       	cpi	r24, 0x64	; 100
    3486:	91 05       	cpc	r25, r1
    3488:	21 f4       	brne	.+8      	; 0x3492 <StackFull+0x2a>
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9c 83       	std	Y+4, r25	; 0x04
    3490:	8b 83       	std	Y+3, r24	; 0x03
    3492:	8b 81       	ldd	r24, Y+3	; 0x03
    3494:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <StackEmpty_op>:

int StackEmpty_op(operations *ps)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <StackEmpty_op+0x6>
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <StackEmpty_op+0x8>
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	89 83       	std	Y+1, r24	; 0x01
    return !ps->top;
    34b4:	e9 81       	ldd	r30, Y+1	; 0x01
    34b6:	fa 81       	ldd	r31, Y+2	; 0x02
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	1c 82       	std	Y+4, r1	; 0x04
    34be:	1b 82       	std	Y+3, r1	; 0x03
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	21 f4       	brne	.+8      	; 0x34cc <StackEmpty_op+0x28>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9c 83       	std	Y+4, r25	; 0x04
    34ca:	8b 83       	std	Y+3, r24	; 0x03
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	9c 81       	ldd	r25, Y+4	; 0x04
}
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <StackEmpty>:
int StackEmpty(NUMS *ps)
{
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <StackEmpty+0x6>
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <StackEmpty+0x8>
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9a 83       	std	Y+2, r25	; 0x02
    34ec:	89 83       	std	Y+1, r24	; 0x01
    return !ps->top;
    34ee:	e9 81       	ldd	r30, Y+1	; 0x01
    34f0:	fa 81       	ldd	r31, Y+2	; 0x02
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	1c 82       	std	Y+4, r1	; 0x04
    34f8:	1b 82       	std	Y+3, r1	; 0x03
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	21 f4       	brne	.+8      	; 0x3506 <StackEmpty+0x28>
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	9c 83       	std	Y+4, r25	; 0x04
    3504:	8b 83       	std	Y+3, r24	; 0x03
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	9c 81       	ldd	r25, Y+4	; 0x04
}
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <StackSize>:


int StackSize(NUMS *ps)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	00 d0       	rcall	.+0      	; 0x351e <StackSize+0x6>
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01

    return ps->top;
    3526:	e9 81       	ldd	r30, Y+1	; 0x01
    3528:	fa 81       	ldd	r31, Y+2	; 0x02
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
}
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <ClearStack>:
void ClearStack(NUMS *ps)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	00 d0       	rcall	.+0      	; 0x353e <ClearStack+0x6>
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01

    ps->top=0;
    3546:	e9 81       	ldd	r30, Y+1	; 0x01
    3548:	fa 81       	ldd	r31, Y+2	; 0x02
    354a:	11 82       	std	Z+1, r1	; 0x01
    354c:	10 82       	st	Z, r1
}
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <ClearStack_op>:
void ClearStack_op(operations* op){
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <ClearStack_op+0x6>
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	9a 83       	std	Y+2, r25	; 0x02
    3564:	89 83       	std	Y+1, r24	; 0x01
	op->top=0;
    3566:	e9 81       	ldd	r30, Y+1	; 0x01
    3568:	fa 81       	ldd	r31, Y+2	; 0x02
    356a:	11 82       	std	Z+1, r1	; 0x01
    356c:	10 82       	st	Z, r1
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <TraverseStack>:
void TraverseStack(NUMS *ps, void (*pf)(stackentry))
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	00 d0       	rcall	.+0      	; 0x357e <TraverseStack+0x6>
    357e:	00 d0       	rcall	.+0      	; 0x3580 <TraverseStack+0x8>
    3580:	00 d0       	rcall	.+0      	; 0x3582 <TraverseStack+0xa>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	9c 83       	std	Y+4, r25	; 0x04
    3588:	8b 83       	std	Y+3, r24	; 0x03
    358a:	7e 83       	std	Y+6, r23	; 0x06
    358c:	6d 83       	std	Y+5, r22	; 0x05
    for(int i=ps->top; i>0; i--)
    358e:	eb 81       	ldd	r30, Y+3	; 0x03
    3590:	fc 81       	ldd	r31, Y+4	; 0x04
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	89 83       	std	Y+1, r24	; 0x01
    359a:	1b c0       	rjmp	.+54     	; 0x35d2 <TraverseStack+0x5a>
        (*pf)(ps->entry[i-1]);
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	2b 81       	ldd	r18, Y+3	; 0x03
    35a4:	3c 81       	ldd	r19, Y+4	; 0x04
    35a6:	88 0f       	add	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	f9 01       	movw	r30, r18
    35b2:	e8 0f       	add	r30, r24
    35b4:	f9 1f       	adc	r31, r25
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	a2 81       	ldd	r26, Z+2	; 0x02
    35bc:	b3 81       	ldd	r27, Z+3	; 0x03
    35be:	ed 81       	ldd	r30, Y+5	; 0x05
    35c0:	fe 81       	ldd	r31, Y+6	; 0x06
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	09 95       	icall
void ClearStack_op(operations* op){
	op->top=0;
}
void TraverseStack(NUMS *ps, void (*pf)(stackentry))
{
    for(int i=ps->top; i>0; i--)
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	9a 83       	std	Y+2, r25	; 0x02
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	18 16       	cp	r1, r24
    35d8:	19 06       	cpc	r1, r25
    35da:	04 f3       	brlt	.-64     	; 0x359c <TraverseStack+0x24>
        (*pf)(ps->entry[i-1]);

}
    35dc:	26 96       	adiw	r28, 0x06	; 6
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <StackTop_op>:
char StackTop_op(operations* op ){
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <StackTop_op+0x6>
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01

return op->entryy[op->top-1];
    35fc:	e9 81       	ldd	r30, Y+1	; 0x01
    35fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	9c 01       	movw	r18, r24
    3606:	21 50       	subi	r18, 0x01	; 1
    3608:	30 40       	sbci	r19, 0x00	; 0
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	82 0f       	add	r24, r18
    3610:	93 1f       	adc	r25, r19
    3612:	fc 01       	movw	r30, r24
    3614:	32 96       	adiw	r30, 0x02	; 2
    3616:	80 81       	ld	r24, Z
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <IsDigit>:



int IsDigit(char c){
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	00 d0       	rcall	.+0      	; 0x3628 <IsDigit+0x6>
    3628:	0f 92       	push	r0
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	89 83       	std	Y+1, r24	; 0x01
   return(c>='0' && c<='9');
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	80 33       	cpi	r24, 0x30	; 48
    3634:	40 f0       	brcs	.+16     	; 0x3646 <IsDigit+0x24>
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	8a 33       	cpi	r24, 0x3A	; 58
    363a:	28 f4       	brcc	.+10     	; 0x3646 <IsDigit+0x24>
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	9b 83       	std	Y+3, r25	; 0x03
    3642:	8a 83       	std	Y+2, r24	; 0x02
    3644:	02 c0       	rjmp	.+4      	; 0x364a <IsDigit+0x28>
    3646:	1b 82       	std	Y+3, r1	; 0x03
    3648:	1a 82       	std	Y+2, r1	; 0x02
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <IsOp>:
int IsOp(char c){
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <IsOp+0x6>
    3660:	0f 92       	push	r0
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	89 83       	std	Y+1, r24	; 0x01
   return(c=='/' || c=='x'||c=='+'||c=='-');
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	8f 32       	cpi	r24, 0x2F	; 47
    366c:	49 f0       	breq	.+18     	; 0x3680 <IsOp+0x26>
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	88 37       	cpi	r24, 0x78	; 120
    3672:	31 f0       	breq	.+12     	; 0x3680 <IsOp+0x26>
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	8b 32       	cpi	r24, 0x2B	; 43
    3678:	19 f0       	breq	.+6      	; 0x3680 <IsOp+0x26>
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	8d 32       	cpi	r24, 0x2D	; 45
    367e:	29 f4       	brne	.+10     	; 0x368a <IsOp+0x30>
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9b 83       	std	Y+3, r25	; 0x03
    3686:	8a 83       	std	Y+2, r24	; 0x02
    3688:	02 c0       	rjmp	.+4      	; 0x368e <IsOp+0x34>
    368a:	1b 82       	std	Y+3, r1	; 0x03
    368c:	1a 82       	std	Y+2, r1	; 0x02
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <__mulsi3>:
    369e:	62 9f       	mul	r22, r18
    36a0:	d0 01       	movw	r26, r0
    36a2:	73 9f       	mul	r23, r19
    36a4:	f0 01       	movw	r30, r0
    36a6:	82 9f       	mul	r24, r18
    36a8:	e0 0d       	add	r30, r0
    36aa:	f1 1d       	adc	r31, r1
    36ac:	64 9f       	mul	r22, r20
    36ae:	e0 0d       	add	r30, r0
    36b0:	f1 1d       	adc	r31, r1
    36b2:	92 9f       	mul	r25, r18
    36b4:	f0 0d       	add	r31, r0
    36b6:	83 9f       	mul	r24, r19
    36b8:	f0 0d       	add	r31, r0
    36ba:	74 9f       	mul	r23, r20
    36bc:	f0 0d       	add	r31, r0
    36be:	65 9f       	mul	r22, r21
    36c0:	f0 0d       	add	r31, r0
    36c2:	99 27       	eor	r25, r25
    36c4:	72 9f       	mul	r23, r18
    36c6:	b0 0d       	add	r27, r0
    36c8:	e1 1d       	adc	r30, r1
    36ca:	f9 1f       	adc	r31, r25
    36cc:	63 9f       	mul	r22, r19
    36ce:	b0 0d       	add	r27, r0
    36d0:	e1 1d       	adc	r30, r1
    36d2:	f9 1f       	adc	r31, r25
    36d4:	bd 01       	movw	r22, r26
    36d6:	cf 01       	movw	r24, r30
    36d8:	11 24       	eor	r1, r1
    36da:	08 95       	ret

000036dc <__divmodsi4>:
    36dc:	97 fb       	bst	r25, 7
    36de:	09 2e       	mov	r0, r25
    36e0:	05 26       	eor	r0, r21
    36e2:	0e d0       	rcall	.+28     	; 0x3700 <__divmodsi4_neg1>
    36e4:	57 fd       	sbrc	r21, 7
    36e6:	04 d0       	rcall	.+8      	; 0x36f0 <__divmodsi4_neg2>
    36e8:	14 d0       	rcall	.+40     	; 0x3712 <__udivmodsi4>
    36ea:	0a d0       	rcall	.+20     	; 0x3700 <__divmodsi4_neg1>
    36ec:	00 1c       	adc	r0, r0
    36ee:	38 f4       	brcc	.+14     	; 0x36fe <__divmodsi4_exit>

000036f0 <__divmodsi4_neg2>:
    36f0:	50 95       	com	r21
    36f2:	40 95       	com	r20
    36f4:	30 95       	com	r19
    36f6:	21 95       	neg	r18
    36f8:	3f 4f       	sbci	r19, 0xFF	; 255
    36fa:	4f 4f       	sbci	r20, 0xFF	; 255
    36fc:	5f 4f       	sbci	r21, 0xFF	; 255

000036fe <__divmodsi4_exit>:
    36fe:	08 95       	ret

00003700 <__divmodsi4_neg1>:
    3700:	f6 f7       	brtc	.-4      	; 0x36fe <__divmodsi4_exit>
    3702:	90 95       	com	r25
    3704:	80 95       	com	r24
    3706:	70 95       	com	r23
    3708:	61 95       	neg	r22
    370a:	7f 4f       	sbci	r23, 0xFF	; 255
    370c:	8f 4f       	sbci	r24, 0xFF	; 255
    370e:	9f 4f       	sbci	r25, 0xFF	; 255
    3710:	08 95       	ret

00003712 <__udivmodsi4>:
    3712:	a1 e2       	ldi	r26, 0x21	; 33
    3714:	1a 2e       	mov	r1, r26
    3716:	aa 1b       	sub	r26, r26
    3718:	bb 1b       	sub	r27, r27
    371a:	fd 01       	movw	r30, r26
    371c:	0d c0       	rjmp	.+26     	; 0x3738 <__udivmodsi4_ep>

0000371e <__udivmodsi4_loop>:
    371e:	aa 1f       	adc	r26, r26
    3720:	bb 1f       	adc	r27, r27
    3722:	ee 1f       	adc	r30, r30
    3724:	ff 1f       	adc	r31, r31
    3726:	a2 17       	cp	r26, r18
    3728:	b3 07       	cpc	r27, r19
    372a:	e4 07       	cpc	r30, r20
    372c:	f5 07       	cpc	r31, r21
    372e:	20 f0       	brcs	.+8      	; 0x3738 <__udivmodsi4_ep>
    3730:	a2 1b       	sub	r26, r18
    3732:	b3 0b       	sbc	r27, r19
    3734:	e4 0b       	sbc	r30, r20
    3736:	f5 0b       	sbc	r31, r21

00003738 <__udivmodsi4_ep>:
    3738:	66 1f       	adc	r22, r22
    373a:	77 1f       	adc	r23, r23
    373c:	88 1f       	adc	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	1a 94       	dec	r1
    3742:	69 f7       	brne	.-38     	; 0x371e <__udivmodsi4_loop>
    3744:	60 95       	com	r22
    3746:	70 95       	com	r23
    3748:	80 95       	com	r24
    374a:	90 95       	com	r25
    374c:	9b 01       	movw	r18, r22
    374e:	ac 01       	movw	r20, r24
    3750:	bd 01       	movw	r22, r26
    3752:	cf 01       	movw	r24, r30
    3754:	08 95       	ret

00003756 <__prologue_saves__>:
    3756:	2f 92       	push	r2
    3758:	3f 92       	push	r3
    375a:	4f 92       	push	r4
    375c:	5f 92       	push	r5
    375e:	6f 92       	push	r6
    3760:	7f 92       	push	r7
    3762:	8f 92       	push	r8
    3764:	9f 92       	push	r9
    3766:	af 92       	push	r10
    3768:	bf 92       	push	r11
    376a:	cf 92       	push	r12
    376c:	df 92       	push	r13
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	ca 1b       	sub	r28, r26
    3780:	db 0b       	sbc	r29, r27
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	09 94       	ijmp

0000378e <__epilogue_restores__>:
    378e:	2a 88       	ldd	r2, Y+18	; 0x12
    3790:	39 88       	ldd	r3, Y+17	; 0x11
    3792:	48 88       	ldd	r4, Y+16	; 0x10
    3794:	5f 84       	ldd	r5, Y+15	; 0x0f
    3796:	6e 84       	ldd	r6, Y+14	; 0x0e
    3798:	7d 84       	ldd	r7, Y+13	; 0x0d
    379a:	8c 84       	ldd	r8, Y+12	; 0x0c
    379c:	9b 84       	ldd	r9, Y+11	; 0x0b
    379e:	aa 84       	ldd	r10, Y+10	; 0x0a
    37a0:	b9 84       	ldd	r11, Y+9	; 0x09
    37a2:	c8 84       	ldd	r12, Y+8	; 0x08
    37a4:	df 80       	ldd	r13, Y+7	; 0x07
    37a6:	ee 80       	ldd	r14, Y+6	; 0x06
    37a8:	fd 80       	ldd	r15, Y+5	; 0x05
    37aa:	0c 81       	ldd	r16, Y+4	; 0x04
    37ac:	1b 81       	ldd	r17, Y+3	; 0x03
    37ae:	aa 81       	ldd	r26, Y+2	; 0x02
    37b0:	b9 81       	ldd	r27, Y+1	; 0x01
    37b2:	ce 0f       	add	r28, r30
    37b4:	d1 1d       	adc	r29, r1
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	ed 01       	movw	r28, r26
    37c2:	08 95       	ret

000037c4 <_exit>:
    37c4:	f8 94       	cli

000037c6 <__stop_program>:
    37c6:	ff cf       	rjmp	.-2      	; 0x37c6 <__stop_program>
